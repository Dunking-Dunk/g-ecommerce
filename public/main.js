/*! For license information please see main.js.LICENSE.txt */
(()=>{var e,t,r,s,n,i,o,a={"./node_modules/ansi-html-community/index.js":e=>{"use strict";e.exports=o;var t=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,r={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},s={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},n={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},i={23:"</i>",24:"</u>",29:"</del>"};function o(e){if(!t.test(e))return e;var r=[],s=e.replace(/\033\[(\d+)m/g,(function(e,t){var s=n[t];if(s)return~r.indexOf(t)?(r.pop(),"</span>"):(r.push(t),"<"===s[0]?s:'<span style="'+s+';">');var o=i[t];return o?(r.pop(),o):""})),o=r.length;return o>0&&(s+=Array(o+1).join("</span>")),s}function a(e){for(var t in n[0]="font-weight:normal;opacity:1;color:#"+e.reset[0]+";background:#"+e.reset[1],n[7]="color:#"+e.reset[1]+";background:#"+e.reset[0],n[90]="color:#"+e.darkgrey,s){var r=e[s[t]]||"000";n[t]="color:#"+r,t=parseInt(t),n[(t+10).toString()]="background:#"+r}}[0,21,22,27,28,39,49].forEach((function(e){i[e]="</span>"})),o.setColors=function(e){if("object"!=typeof e)throw new Error("`colors` parameter must be an Object.");var t={};for(var s in r){var n=e.hasOwnProperty(s)?e[s]:null;if(n){if("reset"===s){if("string"==typeof n&&(n=[n]),!Array.isArray(n)||0===n.length||n.some((function(e){return"string"!=typeof e})))throw new Error("The value of `"+s+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var i=r[s];n[0]||(n[0]=i[0]),1!==n.length&&n[1]||(n=[n[0]]).push(i[1]),n=n.slice(0,2)}else if("string"!=typeof n)throw new Error("The value of `"+s+"` property must be a hex string, e.g.: FF0000");t[s]=n}else t[s]=r[s]}a(t)},o.reset=function(){a(r)},o.tags={},Object.defineProperty?(Object.defineProperty(o.tags,"open",{get:function(){return n}}),Object.defineProperty(o.tags,"close",{get:function(){return i}})):(o.tags.open=n,o.tags.close=i),o.reset()},"./node_modules/events/events.js":e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,s=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var n=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(r,s){function n(r){e.removeListener(t,i),s(r)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",n),r([].slice.call(arguments))}m(e,t,i,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&m(e,"error",t,r)}(e,n,{once:!0})}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var o=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function u(e,t,r,s){var n,i,o,u;if(a(r),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),i=e._events),o=i[t]),void 0===o)o=i[t]=r,++e._eventsCount;else if("function"==typeof o?o=i[t]=s?[r,o]:[o,r]:s?o.unshift(r):o.push(r),(n=l(e))>0&&o.length>n&&!o.warned){o.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=o.length,u=c,console&&console.warn&&console.warn(u)}return e}function c(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,r){var s={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},n=c.bind(s);return n.listener=r,s.wrapFn=n,n}function h(e,t,r){var s=e._events;if(void 0===s)return[];var n=s[t];return void 0===n?[]:"function"==typeof n?r?[n.listener||n]:[n]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(n):f(n,n.length)}function p(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function f(e,t){for(var r=new Array(t),s=0;s<t;++s)r[s]=e[s];return r}function m(e,t,r,s){if("function"==typeof e.on)s.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function n(i){s.once&&e.removeEventListener(t,n),r(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||n(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return l(this)},i.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var l=i[e];if(void 0===l)return!1;if("function"==typeof l)s(l,this,t);else{var u=l.length,c=f(l,u);for(r=0;r<u;++r)s(c[r],this,t)}return!0},i.prototype.addListener=function(e,t){return u(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return u(this,e,t,!0)},i.prototype.once=function(e,t){return a(t),this.on(e,d(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,d(this,e,t)),this},i.prototype.removeListener=function(e,t){var r,s,n,i,o;if(a(t),void 0===(s=this._events))return this;if(void 0===(r=s[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete s[e],s.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(n=-1,i=r.length-1;i>=0;i--)if(r[i]===t||r[i].listener===t){o=r[i].listener,n=i;break}if(n<0)return this;0===n?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,n),1===r.length&&(s[e]=r[0]),void 0!==s.removeListener&&this.emit("removeListener",e,o||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,r,s;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var n,i=Object.keys(r);for(s=0;s<i.length;++s)"removeListener"!==(n=i[s])&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(s=t.length-1;s>=0;s--)this.removeListener(e,t[s]);return this},i.prototype.listeners=function(e){return h(this,e,!0)},i.prototype.rawListeners=function(e){return h(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},i.prototype.listenerCount=p,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},"./node_modules/gsap/CSSPlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{CSSPlugin:()=>ve,_createElement:()=>L,_getBBox:()=>N,checkPrefix:()=>P,default:()=>ve});var s,n,i,o,a,l,u,c=r("./node_modules/gsap/gsap-core.js"),d={},h=180/Math.PI,p=Math.PI/180,f=Math.atan2,m=/([A-Z])/g,g=/(left|right|width|margin|padding|x)/i,_=/[\s,\(]\S/,v={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},y=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},b=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},w=function(e,t){return t.set(t.t,t.p,e?Math.round(1e4*(t.s+t.c*e))/1e4+t.u:t.b,t)},x=function(e,t){var r=t.s+t.c*e;t.set(t.t,t.p,~~(r+(r<0?-.5:.5))+t.u,t)},j=function(e,t){return t.set(t.t,t.p,e?t.e:t.b,t)},E=function(e,t){return t.set(t.t,t.p,1!==e?t.b:t.e,t)},A=function(e,t,r){return e.style[t]=r},T=function(e,t,r){return e.style.setProperty(t,r)},M=function(e,t,r){return e._gsap[t]=r},S=function(e,t,r){return e._gsap.scaleX=e._gsap.scaleY=r},k=function(e,t,r,s,n){var i=e._gsap;i.scaleX=i.scaleY=r,i.renderTransform(n,i)},C=function(e,t,r,s,n){var i=e._gsap;i[t]=r,i.renderTransform(n,i)},q="transform",O=q+"Origin",L=function(e,t){var r=n.createElementNS?n.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):n.createElement(e);return r.style?r:n.createElement(e)},D=function e(t,r,s){var n=getComputedStyle(t);return n[r]||n.getPropertyValue(r.replace(m,"-$1").toLowerCase())||n.getPropertyValue(r)||!s&&e(t,P(r)||r,1)||""},R="O,Moz,ms,Ms,Webkit".split(","),P=function(e,t,r){var s=(t||a).style,n=5;if(e in s&&!r)return e;for(e=e.charAt(0).toUpperCase()+e.substr(1);n--&&!(R[n]+e in s););return n<0?null:(3===n?"ms":n>=0?R[n]:"")+e},F=function(){"undefined"!=typeof window&&window.document&&(s=window,n=s.document,i=n.documentElement,a=L("div")||{style:{}},L("div"),q=P(q),O=q+"Origin",a.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",u=!!P("perspective"),o=1)},I=function e(t){var r,s=L("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),n=this.parentNode,o=this.nextSibling,a=this.style.cssText;if(i.appendChild(s),s.appendChild(this),this.style.display="block",t)try{r=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=e}catch(e){}else this._gsapBBox&&(r=this._gsapBBox());return n&&(o?n.insertBefore(this,o):n.appendChild(this)),i.removeChild(s),this.style.cssText=a,r},U=function(e,t){for(var r=t.length;r--;)if(e.hasAttribute(t[r]))return e.getAttribute(t[r])},N=function(e){var t;try{t=e.getBBox()}catch(r){t=I.call(e,!0)}return t&&(t.width||t.height)||e.getBBox===I||(t=I.call(e,!0)),!t||t.width||t.x||t.y?t:{x:+U(e,["x","cx","x1"])||0,y:+U(e,["y","cy","y1"])||0,width:0,height:0}},z=function(e){return!(!e.getCTM||e.parentNode&&!e.ownerSVGElement||!N(e))},B=function(e,t){if(t){var r=e.style;t in d&&t!==O&&(t=q),r.removeProperty?("ms"!==t.substr(0,2)&&"webkit"!==t.substr(0,6)||(t="-"+t),r.removeProperty(t.replace(m,"-$1").toLowerCase())):r.removeAttribute(t)}},V=function(e,t,r,s,n,i){var o=new c.PropTween(e._pt,t,r,0,1,i?E:j);return e._pt=o,o.b=s,o.e=n,e._props.push(r),o},H={deg:1,rad:1,turn:1},G=function e(t,r,s,i){var o,l,u,h,p=parseFloat(s)||0,f=(s+"").trim().substr((p+"").length)||"px",m=a.style,_=g.test(r),v="svg"===t.tagName.toLowerCase(),y=(v?"client":"offset")+(_?"Width":"Height"),b=100,w="px"===i,x="%"===i;return i===f||!p||H[i]||H[f]?p:("px"!==f&&!w&&(p=e(t,r,s,"px")),h=t.getCTM&&z(t),!x&&"%"!==f||!d[r]&&!~r.indexOf("adius")?(m[_?"width":"height"]=b+(w?f:i),l=~r.indexOf("adius")||"em"===i&&t.appendChild&&!v?t:t.parentNode,h&&(l=(t.ownerSVGElement||{}).parentNode),l&&l!==n&&l.appendChild||(l=n.body),(u=l._gsap)&&x&&u.width&&_&&u.time===c._ticker.time?(0,c._round)(p/u.width*b):((x||"%"===f)&&(m.position=D(t,"position")),l===t&&(m.position="static"),l.appendChild(a),o=a[y],l.removeChild(a),m.position="absolute",_&&x&&((u=(0,c._getCache)(l)).time=c._ticker.time,u.width=l[y]),(0,c._round)(w?o*p/b:o&&p?b/o*p:0))):(o=h?t.getBBox()[_?"width":"height"]:t[y],(0,c._round)(x?p/o*b:p/100*o)))},Y=function(e,t,r,s){var n;return o||F(),t in v&&"transform"!==t&&~(t=v[t]).indexOf(",")&&(t=t.split(",")[0]),d[t]&&"transform"!==t?(n=se(e,s),n="transformOrigin"!==t?n[t]:n.svg?n.origin:ne(D(e,O))+" "+n.zOrigin+"px"):(!(n=e.style[t])||"auto"===n||s||~(n+"").indexOf("calc("))&&(n=K[t]&&K[t](e,t,r)||D(e,t)||(0,c._getProperty)(e,t)||("opacity"===t?1:0)),r&&!~(n+"").trim().indexOf(" ")?G(e,t,n,r)+r:n},X=function(e,t,r,s){if(!r||"none"===r){var n=P(t,e,1),i=n&&D(e,n,1);i&&i!==r?(t=n,r=i):"borderColor"===t&&(r=D(e,"borderTopColor"))}var o,a,l,u,d,h,p,f,m,g,_,v=new c.PropTween(this._pt,e.style,t,0,1,c._renderComplexString),y=0,b=0;if(v.b=r,v.e=s,r+="","auto"===(s+="")&&(e.style[t]=s,s=D(e,t)||s,e.style[t]=r),o=[r,s],(0,c._colorStringFilter)(o),s=o[1],l=(r=o[0]).match(c._numWithUnitExp)||[],(s.match(c._numWithUnitExp)||[]).length){for(;a=c._numWithUnitExp.exec(s);)p=a[0],m=s.substring(y,a.index),d?d=(d+1)%5:"rgba("!==m.substr(-5)&&"hsla("!==m.substr(-5)||(d=1),p!==(h=l[b++]||"")&&(u=parseFloat(h)||0,_=h.substr((u+"").length),"="===p.charAt(1)&&(p=(0,c._parseRelative)(u,p)+_),f=parseFloat(p),g=p.substr((f+"").length),y=c._numWithUnitExp.lastIndex-g.length,g||(g=g||c._config.units[t]||_,y===s.length&&(s+=g,v.e+=g)),_!==g&&(u=G(e,t,h,g)||0),v._pt={_next:v._pt,p:m||1===b?m:",",s:u,c:f-u,m:d&&d<4||"zIndex"===t?Math.round:0});v.c=y<s.length?s.substring(y,s.length):""}else v.r="display"===t&&"none"===s?E:j;return c._relExp.test(s)&&(v.e=0),this._pt=v,v},W={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},Z=function(e,t){if(t.tween&&t.tween._time===t.tween._dur){var r,s,n,i=t.t,o=i.style,a=t.u,l=i._gsap;if("all"===a||!0===a)o.cssText="",s=1;else for(n=(a=a.split(",")).length;--n>-1;)r=a[n],d[r]&&(s=1,r="transformOrigin"===r?O:q),B(i,r);s&&(B(i,q),l&&(l.svg&&i.removeAttribute("transform"),se(i,1),l.uncache=1))}},K={clearProps:function(e,t,r,s,n){if("isFromStart"!==n.data){var i=e._pt=new c.PropTween(e._pt,t,r,0,0,Z);return i.u=s,i.pr=-10,i.tween=n,e._props.push(r),1}}},Q=[1,0,0,1,0,0],$={},J=function(e){return"matrix(1, 0, 0, 1, 0, 0)"===e||"none"===e||!e},ee=function(e){var t=D(e,q);return J(t)?Q:t.substr(7).match(c._numExp).map(c._round)},te=function(e,t){var r,s,n,o,a=e._gsap||(0,c._getCache)(e),l=e.style,u=ee(e);return a.svg&&e.getAttribute("transform")?"1,0,0,1,0,0"===(u=[(n=e.transform.baseVal.consolidate().matrix).a,n.b,n.c,n.d,n.e,n.f]).join(",")?Q:u:(u!==Q||e.offsetParent||e===i||a.svg||(n=l.display,l.display="block",(r=e.parentNode)&&e.offsetParent||(o=1,s=e.nextSibling,i.appendChild(e)),u=ee(e),n?l.display=n:B(e,"display"),o&&(s?r.insertBefore(e,s):r?r.appendChild(e):i.removeChild(e))),t&&u.length>6?[u[0],u[1],u[4],u[5],u[12],u[13]]:u)},re=function(e,t,r,s,n,i){var o,a,l,u=e._gsap,c=n||te(e,!0),d=u.xOrigin||0,h=u.yOrigin||0,p=u.xOffset||0,f=u.yOffset||0,m=c[0],g=c[1],_=c[2],v=c[3],y=c[4],b=c[5],w=t.split(" "),x=parseFloat(w[0])||0,j=parseFloat(w[1])||0;r?c!==Q&&(a=m*v-g*_)&&(l=x*(-g/a)+j*(m/a)-(m*b-g*y)/a,x=x*(v/a)+j*(-_/a)+(_*b-v*y)/a,j=l):(x=(o=N(e)).x+(~w[0].indexOf("%")?x/100*o.width:x),j=o.y+(~(w[1]||w[0]).indexOf("%")?j/100*o.height:j)),s||!1!==s&&u.smooth?(y=x-d,b=j-h,u.xOffset=p+(y*m+b*_)-y,u.yOffset=f+(y*g+b*v)-b):u.xOffset=u.yOffset=0,u.xOrigin=x,u.yOrigin=j,u.smooth=!!s,u.origin=t,u.originIsAbsolute=!!r,e.style[O]="0px 0px",i&&(V(i,u,"xOrigin",d,x),V(i,u,"yOrigin",h,j),V(i,u,"xOffset",p,u.xOffset),V(i,u,"yOffset",f,u.yOffset)),e.setAttribute("data-svg-origin",x+" "+j)},se=function(e,t){var r=e._gsap||new c.GSCache(e);if("x"in r&&!t&&!r.uncache)return r;var s,n,i,o,a,l,d,m,g,_,v,y,b,w,x,j,E,A,T,M,S,k,C,L,R,P,F,I,U,N,B,V,H=e.style,G=r.scaleX<0,Y="px",X="deg",W=D(e,O)||"0";return s=n=i=l=d=m=g=_=v=0,o=a=1,r.svg=!(!e.getCTM||!z(e)),w=te(e,r.svg),r.svg&&(L=(!r.uncache||"0px 0px"===W)&&!t&&e.getAttribute("data-svg-origin"),re(e,L||W,!!L||r.originIsAbsolute,!1!==r.smooth,w)),y=r.xOrigin||0,b=r.yOrigin||0,w!==Q&&(A=w[0],T=w[1],M=w[2],S=w[3],s=k=w[4],n=C=w[5],6===w.length?(o=Math.sqrt(A*A+T*T),a=Math.sqrt(S*S+M*M),l=A||T?f(T,A)*h:0,(g=M||S?f(M,S)*h+l:0)&&(a*=Math.abs(Math.cos(g*p))),r.svg&&(s-=y-(y*A+b*M),n-=b-(y*T+b*S))):(V=w[6],N=w[7],F=w[8],I=w[9],U=w[10],B=w[11],s=w[12],n=w[13],i=w[14],d=(x=f(V,U))*h,x&&(L=k*(j=Math.cos(-x))+F*(E=Math.sin(-x)),R=C*j+I*E,P=V*j+U*E,F=k*-E+F*j,I=C*-E+I*j,U=V*-E+U*j,B=N*-E+B*j,k=L,C=R,V=P),m=(x=f(-M,U))*h,x&&(j=Math.cos(-x),B=S*(E=Math.sin(-x))+B*j,A=L=A*j-F*E,T=R=T*j-I*E,M=P=M*j-U*E),l=(x=f(T,A))*h,x&&(L=A*(j=Math.cos(x))+T*(E=Math.sin(x)),R=k*j+C*E,T=T*j-A*E,C=C*j-k*E,A=L,k=R),d&&Math.abs(d)+Math.abs(l)>359.9&&(d=l=0,m=180-m),o=(0,c._round)(Math.sqrt(A*A+T*T+M*M)),a=(0,c._round)(Math.sqrt(C*C+V*V)),x=f(k,C),g=Math.abs(x)>2e-4?x*h:0,v=B?1/(B<0?-B:B):0),r.svg&&(L=e.getAttribute("transform"),r.forceCSS=e.setAttribute("transform","")||!J(D(e,q)),L&&e.setAttribute("transform",L))),Math.abs(g)>90&&Math.abs(g)<270&&(G?(o*=-1,g+=l<=0?180:-180,l+=l<=0?180:-180):(a*=-1,g+=g<=0?180:-180)),t=t||r.uncache,r.x=s-((r.xPercent=s&&(!t&&r.xPercent||(Math.round(e.offsetWidth/2)===Math.round(-s)?-50:0)))?e.offsetWidth*r.xPercent/100:0)+Y,r.y=n-((r.yPercent=n&&(!t&&r.yPercent||(Math.round(e.offsetHeight/2)===Math.round(-n)?-50:0)))?e.offsetHeight*r.yPercent/100:0)+Y,r.z=i+Y,r.scaleX=(0,c._round)(o),r.scaleY=(0,c._round)(a),r.rotation=(0,c._round)(l)+X,r.rotationX=(0,c._round)(d)+X,r.rotationY=(0,c._round)(m)+X,r.skewX=g+X,r.skewY=_+X,r.transformPerspective=v+Y,(r.zOrigin=parseFloat(W.split(" ")[2])||0)&&(H[O]=ne(W)),r.xOffset=r.yOffset=0,r.force3D=c._config.force3D,r.renderTransform=r.svg?de:u?ce:oe,r.uncache=0,r},ne=function(e){return(e=e.split(" "))[0]+" "+e[1]},ie=function(e,t,r){var s=(0,c.getUnit)(t);return(0,c._round)(parseFloat(t)+parseFloat(G(e,"x",r+"px",s)))+s},oe=function(e,t){t.z="0px",t.rotationY=t.rotationX="0deg",t.force3D=0,ce(e,t)},ae="0deg",le="0px",ue=") ",ce=function(e,t){var r=t||this,s=r.xPercent,n=r.yPercent,i=r.x,o=r.y,a=r.z,l=r.rotation,u=r.rotationY,c=r.rotationX,d=r.skewX,h=r.skewY,f=r.scaleX,m=r.scaleY,g=r.transformPerspective,_=r.force3D,v=r.target,y=r.zOrigin,b="",w="auto"===_&&e&&1!==e||!0===_;if(y&&(c!==ae||u!==ae)){var x,j=parseFloat(u)*p,E=Math.sin(j),A=Math.cos(j);j=parseFloat(c)*p,x=Math.cos(j),i=ie(v,i,E*x*-y),o=ie(v,o,-Math.sin(j)*-y),a=ie(v,a,A*x*-y+y)}g!==le&&(b+="perspective("+g+ue),(s||n)&&(b+="translate("+s+"%, "+n+"%) "),(w||i!==le||o!==le||a!==le)&&(b+=a!==le||w?"translate3d("+i+", "+o+", "+a+") ":"translate("+i+", "+o+ue),l!==ae&&(b+="rotate("+l+ue),u!==ae&&(b+="rotateY("+u+ue),c!==ae&&(b+="rotateX("+c+ue),d===ae&&h===ae||(b+="skew("+d+", "+h+ue),1===f&&1===m||(b+="scale("+f+", "+m+ue),v.style[q]=b||"translate(0, 0)"},de=function(e,t){var r,s,n,i,o,a=t||this,l=a.xPercent,u=a.yPercent,d=a.x,h=a.y,f=a.rotation,m=a.skewX,g=a.skewY,_=a.scaleX,v=a.scaleY,y=a.target,b=a.xOrigin,w=a.yOrigin,x=a.xOffset,j=a.yOffset,E=a.forceCSS,A=parseFloat(d),T=parseFloat(h);f=parseFloat(f),m=parseFloat(m),(g=parseFloat(g))&&(m+=g=parseFloat(g),f+=g),f||m?(f*=p,m*=p,r=Math.cos(f)*_,s=Math.sin(f)*_,n=Math.sin(f-m)*-v,i=Math.cos(f-m)*v,m&&(g*=p,o=Math.tan(m-g),n*=o=Math.sqrt(1+o*o),i*=o,g&&(o=Math.tan(g),r*=o=Math.sqrt(1+o*o),s*=o)),r=(0,c._round)(r),s=(0,c._round)(s),n=(0,c._round)(n),i=(0,c._round)(i)):(r=_,i=v,s=n=0),(A&&!~(d+"").indexOf("px")||T&&!~(h+"").indexOf("px"))&&(A=G(y,"x",d,"px"),T=G(y,"y",h,"px")),(b||w||x||j)&&(A=(0,c._round)(A+b-(b*r+w*n)+x),T=(0,c._round)(T+w-(b*s+w*i)+j)),(l||u)&&(o=y.getBBox(),A=(0,c._round)(A+l/100*o.width),T=(0,c._round)(T+u/100*o.height)),o="matrix("+r+","+s+","+n+","+i+","+A+","+T+")",y.setAttribute("transform",o),E&&(y.style[q]=o)},he=function(e,t,r,s,n){var i,o,a=360,l=(0,c._isString)(n),u=parseFloat(n)*(l&&~n.indexOf("rad")?h:1)-s,d=s+u+"deg";return l&&("short"===(i=n.split("_")[1])&&(u%=a)!==u%180&&(u+=u<0?a:-360),"cw"===i&&u<0?u=(u+36e9)%a-~~(u/a)*a:"ccw"===i&&u>0&&(u=(u-36e9)%a-~~(u/a)*a)),e._pt=o=new c.PropTween(e._pt,t,r,s,u,b),o.e=d,o.u="deg",e._props.push(r),o},pe=function(e,t){for(var r in t)e[r]=t[r];return e},fe=function(e,t,r){var s,n,i,o,a,l,u,h=pe({},r._gsap),p=r.style;for(n in h.svg?(i=r.getAttribute("transform"),r.setAttribute("transform",""),p[q]=t,s=se(r,1),B(r,q),r.setAttribute("transform",i)):(i=getComputedStyle(r)[q],p[q]=t,s=se(r,1),p[q]=i),d)(i=h[n])!==(o=s[n])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(n)<0&&(a=(0,c.getUnit)(i)!==(u=(0,c.getUnit)(o))?G(r,n,i,u):parseFloat(i),l=parseFloat(o),e._pt=new c.PropTween(e._pt,s,n,a,l-a,y),e._pt.u=u||0,e._props.push(n));pe(s,h)};(0,c._forEachName)("padding,margin,Width,Radius",(function(e,t){var r="Top",s="Right",n="Bottom",i="Left",o=(t<3?[r,s,n,i]:[r+i,r+s,n+s,n+i]).map((function(r){return t<2?e+r:"border"+r+e}));K[t>1?"border"+e:e]=function(e,t,r,s,n){var i,a;if(arguments.length<4)return i=o.map((function(t){return Y(e,t,r)})),5===(a=i.join(" ")).split(i[0]).length?i[0]:a;i=(s+"").split(" "),a={},o.forEach((function(e,t){return a[e]=i[t]=i[t]||i[(t-1)/2|0]})),e.init(t,a,n)}}));var me,ge,_e,ve={name:"css",register:F,targetTest:function(e){return e.style&&e.nodeType},init:function(e,t,r,s,n){var i,a,l,u,h,p,f,m,g,b,j,E,A,T,M,S,k,C,O,L=this._props,D=e.style,R=r.vars.startAt;for(f in o||F(),t)if("autoRound"!==f&&(a=t[f],!c._plugins[f]||!(0,c._checkPlugin)(f,t,r,s,e,n)))if(h=typeof a,p=K[f],"function"===h&&(h=typeof(a=a.call(r,s,e,n))),"string"===h&&~a.indexOf("random(")&&(a=(0,c._replaceRandom)(a)),p)p(this,e,f,a,r)&&(M=1);else if("--"===f.substr(0,2))i=(getComputedStyle(e).getPropertyValue(f)+"").trim(),a+="",c._colorExp.lastIndex=0,c._colorExp.test(i)||(m=(0,c.getUnit)(i),g=(0,c.getUnit)(a)),g?m!==g&&(i=G(e,f,i,g)+g):m&&(a+=m),this.add(D,"setProperty",i,a,s,n,0,0,f),L.push(f);else if("undefined"!==h){if(R&&f in R?(i="function"==typeof R[f]?R[f].call(r,s,e,n):R[f],(0,c._isString)(i)&&~i.indexOf("random(")&&(i=(0,c._replaceRandom)(i)),(0,c.getUnit)(i+"")||(i+=c._config.units[f]||(0,c.getUnit)(Y(e,f))||""),"="===(i+"").charAt(1)&&(i=Y(e,f))):i=Y(e,f),u=parseFloat(i),(b="string"===h&&"="===a.charAt(1)&&a.substr(0,2))&&(a=a.substr(2)),l=parseFloat(a),f in v&&("autoAlpha"===f&&(1===u&&"hidden"===Y(e,"visibility")&&l&&(u=0),V(this,D,"visibility",u?"inherit":"hidden",l?"inherit":"hidden",!l)),"scale"!==f&&"transform"!==f&&~(f=v[f]).indexOf(",")&&(f=f.split(",")[0])),j=f in d)if(E||((A=e._gsap).renderTransform&&!t.parseTransform||se(e,t.parseTransform),T=!1!==t.smoothOrigin&&A.smooth,(E=this._pt=new c.PropTween(this._pt,D,q,0,1,A.renderTransform,A,0,-1)).dep=1),"scale"===f)this._pt=new c.PropTween(this._pt,A,"scaleY",A.scaleY,(b?(0,c._parseRelative)(A.scaleY,b+l):l)-A.scaleY||0),L.push("scaleY",f),f+="X";else{if("transformOrigin"===f){k=void 0,C=void 0,O=void 0,k=(S=a).split(" "),C=k[0],O=k[1]||"50%","top"!==C&&"bottom"!==C&&"left"!==O&&"right"!==O||(S=C,C=O,O=S),k[0]=W[C]||C,k[1]=W[O]||O,a=k.join(" "),A.svg?re(e,a,0,T,0,this):((g=parseFloat(a.split(" ")[2])||0)!==A.zOrigin&&V(this,A,"zOrigin",A.zOrigin,g),V(this,D,f,ne(i),ne(a)));continue}if("svgOrigin"===f){re(e,a,1,T,0,this);continue}if(f in $){he(this,A,f,u,b?(0,c._parseRelative)(u,b+a):a);continue}if("smoothOrigin"===f){V(this,A,"smooth",A.smooth,a);continue}if("force3D"===f){A[f]=a;continue}if("transform"===f){fe(this,a,e);continue}}else f in D||(f=P(f)||f);if(j||(l||0===l)&&(u||0===u)&&!_.test(a)&&f in D)l||(l=0),(m=(i+"").substr((u+"").length))!==(g=(0,c.getUnit)(a)||(f in c._config.units?c._config.units[f]:m))&&(u=G(e,f,i,g)),this._pt=new c.PropTween(this._pt,j?A:D,f,u,(b?(0,c._parseRelative)(u,b+l):l)-u,j||"px"!==g&&"zIndex"!==f||!1===t.autoRound?y:x),this._pt.u=g||0,m!==g&&"%"!==g&&(this._pt.b=i,this._pt.r=w);else if(f in D)X.call(this,e,f,i,b?b+a:a);else{if(!(f in e)){(0,c._missingPlugin)(f,a);continue}this.add(e,f,i||e[f],b?b+a:a,s,n)}L.push(f)}M&&(0,c._sortPropTweensByPriority)(this)},get:Y,aliases:v,getSetter:function(e,t,r){var s=v[t];return s&&s.indexOf(",")<0&&(t=s),t in d&&t!==O&&(e._gsap.x||Y(e,"x"))?r&&l===r?"scale"===t?S:M:(l=r||{})&&("scale"===t?k:C):e.style&&!(0,c._isUndefined)(e.style[t])?A:~t.indexOf("-")?T:(0,c._getSetter)(e,t)},core:{_removeProperty:B,_getMatrix:te}};c.gsap.utils.checkPrefix=P,me="x,y,z,scale,scaleX,scaleY,xPercent,yPercent",ge="rotation,rotationX,rotationY,skewX,skewY",_e=(0,c._forEachName)(me+","+ge+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(e){d[e]=1})),(0,c._forEachName)(ge,(function(e){c._config.units[e]="deg",$[e]=1})),v[_e[13]]=me+","+ge,(0,c._forEachName)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(e){var t=e.split(":");v[t[1]]=_e[t[0]]})),(0,c._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(e){c._config.units[e]="px"})),c.gsap.registerPlugin(ve)},"./node_modules/gsap/gsap-core.js":(e,t,r)=>{"use strict";function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function n(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}r.r(t),r.d(t,{Animation:()=>rr,Back:()=>Gr,Bounce:()=>Xr,Circ:()=>Kr,Cubic:()=>Nr,Elastic:()=>Hr,Expo:()=>Zr,GSCache:()=>tr,Linear:()=>Ir,Power0:()=>Lr,Power1:()=>Dr,Power2:()=>Rr,Power3:()=>Pr,Power4:()=>Fr,PropTween:()=>Sr,Quad:()=>Ur,Quart:()=>zr,Quint:()=>Br,Sine:()=>Wr,SteppedEase:()=>Yr,Strong:()=>Vr,Timeline:()=>sr,TimelineLite:()=>sr,TimelineMax:()=>sr,Tween:()=>fr,TweenLite:()=>fr,TweenMax:()=>fr,_checkPlugin:()=>lr,_colorExp:()=>Ut,_colorStringFilter:()=>zt,_config:()=>L,_forEachName:()=>Ee,_getCache:()=>xe,_getProperty:()=>je,_getSetter:()=>yr,_isString:()=>V,_isUndefined:()=>Y,_missingPlugin:()=>ue,_numExp:()=>ee,_numWithUnitExp:()=>te,_parseRelative:()=>Me,_plugins:()=>ge,_relExp:()=>se,_removeLinkedListItem:()=>Ue,_renderComplexString:()=>xr,_replaceRandom:()=>Tt,_round:()=>Ae,_roundModifier:()=>_t,_setDefaults:()=>Le,_sortPropTweensByPriority:()=>Mr,_ticker:()=>Bt,clamp:()=>ut,default:()=>Or,distribute:()=>gt,getUnit:()=>lt,gsap:()=>Or,interpolate:()=>St,mapRange:()=>Mt,normalize:()=>xt,pipe:()=>bt,random:()=>yt,selector:()=>ft,shuffle:()=>mt,snap:()=>vt,splitColor:()=>Pt,toArray:()=>pt,unitize:()=>wt,wrap:()=>Et,wrapYoyo:()=>At});var i,o,a,l,u,c,d,h,p,f,m,g,_,v,y,b,w,x,j,E,A,T,M,S,k,C,q,O,L={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},D={duration:.5,overwrite:!1,delay:0},R=1e8,P=1e-8,F=2*Math.PI,I=F/4,U=0,N=Math.sqrt,z=Math.cos,B=Math.sin,V=function(e){return"string"==typeof e},H=function(e){return"function"==typeof e},G=function(e){return"number"==typeof e},Y=function(e){return void 0===e},X=function(e){return"object"==typeof e},W=function(e){return!1!==e},Z=function(){return"undefined"!=typeof window},K=function(e){return H(e)||V(e)},Q="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},$=Array.isArray,J=/(?:-?\.?\d|\.)+/gi,ee=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,te=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,re=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,se=/[+-]=-?[.\d]+/,ne=/[^,'"\[\]\s]+/gi,ie=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,oe={},ae={},le=function(e){return(ae=De(e,oe))&&Or},ue=function(e,t){return console.warn("Invalid property",e,"set to",t,"Missing plugin? gsap.registerPlugin()")},ce=function(e,t){return!t&&console.warn(e)},de=function(e,t){return e&&(oe[e]=t)&&ae&&(ae[e]=t)||oe},he=function(){return 0},pe={},fe=[],me={},ge={},_e={},ve=30,ye=[],be="",we=function(e){var t,r,s=e[0];if(X(s)||H(s)||(e=[e]),!(t=(s._gsap||{}).harness)){for(r=ye.length;r--&&!ye[r].targetTest(s););t=ye[r]}for(r=e.length;r--;)e[r]&&(e[r]._gsap||(e[r]._gsap=new tr(e[r],t)))||e.splice(r,1);return e},xe=function(e){return e._gsap||we(pt(e))[0]._gsap},je=function(e,t,r){return(r=e[t])&&H(r)?e[t]():Y(r)&&e.getAttribute&&e.getAttribute(t)||r},Ee=function(e,t){return(e=e.split(",")).forEach(t)||e},Ae=function(e){return Math.round(1e5*e)/1e5||0},Te=function(e){return Math.round(1e7*e)/1e7||0},Me=function(e,t){var r=t.charAt(0),s=parseFloat(t.substr(2));return e=parseFloat(e),"+"===r?e+s:"-"===r?e-s:"*"===r?e*s:e/s},Se=function(e,t){for(var r=t.length,s=0;e.indexOf(t[s])<0&&++s<r;);return s<r},ke=function(){var e,t,r=fe.length,s=fe.slice(0);for(me={},fe.length=0,e=0;e<r;e++)(t=s[e])&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},Ce=function(e,t,r,s){fe.length&&ke(),e.render(t,r,s),fe.length&&ke()},qe=function(e){var t=parseFloat(e);return(t||0===t)&&(e+"").match(ne).length<2?t:V(e)?e.trim():e},Oe=function(e){return e},Le=function(e,t){for(var r in t)r in e||(e[r]=t[r]);return e},De=function(e,t){for(var r in t)e[r]=t[r];return e},Re=function e(t,r){for(var s in r)"__proto__"!==s&&"constructor"!==s&&"prototype"!==s&&(t[s]=X(r[s])?e(t[s]||(t[s]={}),r[s]):r[s]);return t},Pe=function(e,t){var r,s={};for(r in e)r in t||(s[r]=e[r]);return s},Fe=function(e){var t,r=e.parent||o,s=e.keyframes?(t=$(e.keyframes),function(e,r){for(var s in r)s in e||"duration"===s&&t||"ease"===s||(e[s]=r[s])}):Le;if(W(e.inherit))for(;r;)s(e,r.vars.defaults),r=r.parent||r._dp;return e},Ie=function(e,t,r,s,n){void 0===r&&(r="_first"),void 0===s&&(s="_last");var i,o=e[s];if(n)for(i=t[n];o&&o[n]>i;)o=o._prev;return o?(t._next=o._next,o._next=t):(t._next=e[r],e[r]=t),t._next?t._next._prev=t:e[s]=t,t._prev=o,t.parent=t._dp=e,t},Ue=function(e,t,r,s){void 0===r&&(r="_first"),void 0===s&&(s="_last");var n=t._prev,i=t._next;n?n._next=i:e[r]===t&&(e[r]=i),i?i._prev=n:e[s]===t&&(e[s]=n),t._next=t._prev=t.parent=null},Ne=function(e,t){e.parent&&(!t||e.parent.autoRemoveChildren)&&e.parent.remove(e),e._act=0},ze=function(e,t){if(e&&(!t||t._end>e._dur||t._start<0))for(var r=e;r;)r._dirty=1,r=r.parent;return e},Be=function(e){for(var t=e.parent;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return e},Ve=function e(t){return!t||t._ts&&e(t.parent)},He=function(e){return e._repeat?Ge(e._tTime,e=e.duration()+e._rDelay)*e:0},Ge=function(e,t){var r=Math.floor(e/=t);return e&&r===e?r-1:r},Ye=function(e,t){return(e-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur)},Xe=function(e){return e._end=Te(e._start+(e._tDur/Math.abs(e._ts||e._rts||P)||0))},We=function(e,t){var r=e._dp;return r&&r.smoothChildTiming&&e._ts&&(e._start=Te(r._time-(e._ts>0?t/e._ts:((e._dirty?e.totalDuration():e._tDur)-t)/-e._ts)),Xe(e),r._dirty||ze(r,e)),e},Ze=function(e,t){var r;if((t._time||t._initted&&!t._dur)&&(r=Ye(e.rawTime(),t),(!t._dur||at(0,t.totalDuration(),r)-t._tTime>P)&&t.render(r,!0)),ze(e,t)._dp&&e._initted&&e._time>=e._dur&&e._ts){if(e._dur<e.duration())for(r=e;r._dp;)r.rawTime()>=0&&r.totalTime(r._tTime),r=r._dp;e._zTime=-1e-8}},Ke=function(e,t,r,s){return t.parent&&Ne(t),t._start=Te((G(r)?r:r||e!==o?nt(e,r,t):e._time)+t._delay),t._end=Te(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),Ie(e,t,"_first","_last",e._sort?"_start":0),et(t)||(e._recent=t),s||Ze(e,t),e},Qe=function(e,t){return(oe.ScrollTrigger||ue("scrollTrigger",t))&&oe.ScrollTrigger.create(t,e)},$e=function(e,t,r,s){return ur(e,t),e._initted?!r&&e._pt&&(e._dur&&!1!==e.vars.lazy||!e._dur&&e.vars.lazy)&&d!==Bt.frame?(fe.push(e),e._lazy=[t,s],1):void 0:1},Je=function e(t){var r=t.parent;return r&&r._ts&&r._initted&&!r._lock&&(r.rawTime()<0||e(r))},et=function(e){var t=e.data;return"isFromStart"===t||"isStart"===t},tt=function(e,t,r,s){var n=e._repeat,i=Te(t)||0,o=e._tTime/e._tDur;return o&&!s&&(e._time*=i/e._dur),e._dur=i,e._tDur=n?n<0?1e10:Te(i*(n+1)+e._rDelay*n):i,o>0&&!s?We(e,e._tTime=e._tDur*o):e.parent&&Xe(e),r||ze(e.parent,e),e},rt=function(e){return e instanceof sr?ze(e):tt(e,e._dur)},st={_start:0,endTime:he,totalDuration:he},nt=function e(t,r,s){var n,i,o,a=t.labels,l=t._recent||st,u=t.duration()>=R?l.endTime(!1):t._dur;return V(r)&&(isNaN(r)||r in a)?(i=r.charAt(0),o="%"===r.substr(-1),n=r.indexOf("="),"<"===i||">"===i?(n>=0&&(r=r.replace(/=/,"")),("<"===i?l._start:l.endTime(l._repeat>=0))+(parseFloat(r.substr(1))||0)*(o?(n<0?l:s).totalDuration()/100:1)):n<0?(r in a||(a[r]=u),a[r]):(i=parseFloat(r.charAt(n-1)+r.substr(n+1)),o&&s&&(i=i/100*($(s)?s[0]:s).totalDuration()),n>1?e(t,r.substr(0,n-1),s)+i:u+i)):null==r?u:+r},it=function(e,t,r){var s,n,i=G(t[1]),o=(i?2:1)+(e<2?0:1),a=t[o];if(i&&(a.duration=t[1]),a.parent=r,e){for(s=a,n=r;n&&!("immediateRender"in s);)s=n.vars.defaults||{},n=W(n.vars.inherit)&&n.parent;a.immediateRender=W(s.immediateRender),e<2?a.runBackwards=1:a.startAt=t[o-1]}return new fr(t[0],a,t[o+1])},ot=function(e,t){return e||0===e?t(e):t},at=function(e,t,r){return r<e?e:r>t?t:r},lt=function(e,t){return V(e)&&(t=ie.exec(e))?t[1]:""},ut=function(e,t,r){return ot(r,(function(r){return at(e,t,r)}))},ct=[].slice,dt=function(e,t){return e&&X(e)&&"length"in e&&(!t&&!e.length||e.length-1 in e&&X(e[0]))&&!e.nodeType&&e!==a},ht=function(e,t,r){return void 0===r&&(r=[]),e.forEach((function(e){var s;return V(e)&&!t||dt(e,1)?(s=r).push.apply(s,pt(e)):r.push(e)}))||r},pt=function(e,t,r){return!V(e)||r||!l&&Vt()?$(e)?ht(e,r):dt(e)?ct.call(e,0):e?[e]:[]:ct.call((t||u).querySelectorAll(e),0)},ft=function(e){return e=pt(e)[0]||ce("Invalid scope")||{},function(t){var r=e.current||e.nativeElement||e;return pt(t,r.querySelectorAll?r:r===e?ce("Invalid scope")||u.createElement("div"):e)}},mt=function(e){return e.sort((function(){return.5-Math.random()}))},gt=function(e){if(H(e))return e;var t=X(e)?e:{each:e},r=Kt(t.ease),s=t.from||0,n=parseFloat(t.base)||0,i={},o=s>0&&s<1,a=isNaN(s)||o,l=t.axis,u=s,c=s;return V(s)?u=c={center:.5,edges:.5,end:1}[s]||0:!o&&a&&(u=s[0],c=s[1]),function(e,o,d){var h,p,f,m,g,_,v,y,b,w=(d||t).length,x=i[w];if(!x){if(!(b="auto"===t.grid?0:(t.grid||[1,R])[1])){for(v=-R;v<(v=d[b++].getBoundingClientRect().left)&&b<w;);b--}for(x=i[w]=[],h=a?Math.min(b,w)*u-.5:s%b,p=b===R?0:a?w*c/b-.5:s/b|0,v=0,y=R,_=0;_<w;_++)f=_%b-h,m=p-(_/b|0),x[_]=g=l?Math.abs("y"===l?m:f):N(f*f+m*m),g>v&&(v=g),g<y&&(y=g);"random"===s&&mt(x),x.max=v-y,x.min=y,x.v=w=(parseFloat(t.amount)||parseFloat(t.each)*(b>w?w-1:l?"y"===l?w/b:b:Math.max(b,w/b))||0)*("edges"===s?-1:1),x.b=w<0?n-w:n,x.u=lt(t.amount||t.each)||0,r=r&&w<0?Wt(r):r}return w=(x[e]-x.min)/x.max||0,Te(x.b+(r?r(w):w)*x.v)+x.u}},_t=function(e){var t=Math.pow(10,((e+"").split(".")[1]||"").length);return function(r){var s=Math.round(parseFloat(r)/e)*e*t;return(s-s%1)/t+(G(r)?0:lt(r))}},vt=function(e,t){var r,s,n=$(e);return!n&&X(e)&&(r=n=e.radius||R,e.values?(e=pt(e.values),(s=!G(e[0]))&&(r*=r)):e=_t(e.increment)),ot(t,n?H(e)?function(t){return s=e(t),Math.abs(s-t)<=r?s:t}:function(t){for(var n,i,o=parseFloat(s?t.x:t),a=parseFloat(s?t.y:0),l=R,u=0,c=e.length;c--;)(n=s?(n=e[c].x-o)*n+(i=e[c].y-a)*i:Math.abs(e[c]-o))<l&&(l=n,u=c);return u=!r||l<=r?e[u]:t,s||u===t||G(t)?u:u+lt(t)}:_t(e))},yt=function(e,t,r,s){return ot($(e)?!t:!0===r?!!(r=0):!s,(function(){return $(e)?e[~~(Math.random()*e.length)]:(r=r||1e-5)&&(s=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((e-r/2+Math.random()*(t-e+.99*r))/r)*r*s)/s}))},bt=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return t.reduce((function(e,t){return t(e)}),e)}},wt=function(e,t){return function(r){return e(parseFloat(r))+(t||lt(r))}},xt=function(e,t,r){return Mt(e,t,0,1,r)},jt=function(e,t,r){return ot(r,(function(r){return e[~~t(r)]}))},Et=function e(t,r,s){var n=r-t;return $(t)?jt(t,e(0,t.length),r):ot(s,(function(e){return(n+(e-t)%n)%n+t}))},At=function e(t,r,s){var n=r-t,i=2*n;return $(t)?jt(t,e(0,t.length-1),r):ot(s,(function(e){return t+((e=(i+(e-t)%i)%i||0)>n?i-e:e)}))},Tt=function(e){for(var t,r,s,n,i=0,o="";~(t=e.indexOf("random(",i));)s=e.indexOf(")",t),n="["===e.charAt(t+7),r=e.substr(t+7,s-t-7).match(n?ne:J),o+=e.substr(i,t-i)+yt(n?r:+r[0],n?0:+r[1],+r[2]||1e-5),i=s+1;return o+e.substr(i,e.length-i)},Mt=function(e,t,r,s,n){var i=t-e,o=s-r;return ot(n,(function(t){return r+((t-e)/i*o||0)}))},St=function e(t,r,s,n){var i=isNaN(t+r)?0:function(e){return(1-e)*t+e*r};if(!i){var o,a,l,u,c,d=V(t),h={};if(!0===s&&(n=1)&&(s=null),d)t={p:t},r={p:r};else if($(t)&&!$(r)){for(l=[],u=t.length,c=u-2,a=1;a<u;a++)l.push(e(t[a-1],t[a]));u--,i=function(e){e*=u;var t=Math.min(c,~~e);return l[t](e-t)},s=r}else n||(t=De($(t)?[]:{},t));if(!l){for(o in r)ar.call(h,t,o,"get",r[o]);i=function(e){return jr(e,h)||(d?t.p:t)}}}return ot(s,i)},kt=function(e,t,r){var s,n,i,o=e.labels,a=R;for(s in o)(n=o[s]-t)<0==!!r&&n&&a>(n=Math.abs(n))&&(i=s,a=n);return i},Ct=function(e,t,r){var s,n,i=e.vars,o=i[t];if(o)return s=i[t+"Params"],n=i.callbackScope||e,r&&fe.length&&ke(),s?o.apply(n,s):o.call(n)},qt=function(e){return Ne(e),e.scrollTrigger&&e.scrollTrigger.kill(!1),e.progress()<1&&Ct(e,"onInterrupt"),e},Ot=function(e){var t=(e=!e.name&&e.default||e).name,r=H(e),s=t&&!r&&e.init?function(){this._props=[]}:e,n={init:he,render:jr,add:ar,kill:Ar,modifier:Er,rawVars:0},i={targetTest:0,get:0,getSetter:yr,aliases:{},register:0};if(Vt(),e!==s){if(ge[t])return;Le(s,Le(Pe(e,n),i)),De(s.prototype,De(n,Pe(e,i))),ge[s.prop=t]=s,e.targetTest&&(ye.push(s),pe[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}de(t,s),e.register&&e.register(Or,s,Sr)},Lt=255,Dt={aqua:[0,Lt,Lt],lime:[0,Lt,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Lt],navy:[0,0,128],white:[Lt,Lt,Lt],olive:[128,128,0],yellow:[Lt,Lt,0],orange:[Lt,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Lt,0,0],pink:[Lt,192,203],cyan:[0,Lt,Lt],transparent:[Lt,Lt,Lt,0]},Rt=function(e,t,r){return(6*(e+=e<0?1:e>1?-1:0)<1?t+(r-t)*e*6:e<.5?r:3*e<2?t+(r-t)*(2/3-e)*6:t)*Lt+.5|0},Pt=function(e,t,r){var s,n,i,o,a,l,u,c,d,h,p=e?G(e)?[e>>16,e>>8&Lt,e&Lt]:0:Dt.black;if(!p){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),Dt[e])p=Dt[e];else if("#"===e.charAt(0)){if(e.length<6&&(s=e.charAt(1),n=e.charAt(2),i=e.charAt(3),e="#"+s+s+n+n+i+i+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(p=parseInt(e.substr(1,6),16))>>16,p>>8&Lt,p&Lt,parseInt(e.substr(7),16)/255];p=[(e=parseInt(e.substr(1),16))>>16,e>>8&Lt,e&Lt]}else if("hsl"===e.substr(0,3))if(p=h=e.match(J),t){if(~e.indexOf("="))return p=e.match(ee),r&&p.length<4&&(p[3]=1),p}else o=+p[0]%360/360,a=+p[1]/100,s=2*(l=+p[2]/100)-(n=l<=.5?l*(a+1):l+a-l*a),p.length>3&&(p[3]*=1),p[0]=Rt(o+1/3,s,n),p[1]=Rt(o,s,n),p[2]=Rt(o-1/3,s,n);else p=e.match(J)||Dt.transparent;p=p.map(Number)}return t&&!h&&(s=p[0]/Lt,n=p[1]/Lt,i=p[2]/Lt,l=((u=Math.max(s,n,i))+(c=Math.min(s,n,i)))/2,u===c?o=a=0:(d=u-c,a=l>.5?d/(2-u-c):d/(u+c),o=u===s?(n-i)/d+(n<i?6:0):u===n?(i-s)/d+2:(s-n)/d+4,o*=60),p[0]=~~(o+.5),p[1]=~~(100*a+.5),p[2]=~~(100*l+.5)),r&&p.length<4&&(p[3]=1),p},Ft=function(e){var t=[],r=[],s=-1;return e.split(Ut).forEach((function(e){var n=e.match(te)||[];t.push.apply(t,n),r.push(s+=n.length+1)})),t.c=r,t},It=function(e,t,r){var s,n,i,o,a="",l=(e+a).match(Ut),u=t?"hsla(":"rgba(",c=0;if(!l)return e;if(l=l.map((function(e){return(e=Pt(e,t,1))&&u+(t?e[0]+","+e[1]+"%,"+e[2]+"%,"+e[3]:e.join(","))+")"})),r&&(i=Ft(e),(s=r.c).join(a)!==i.c.join(a)))for(o=(n=e.replace(Ut,"1").split(te)).length-1;c<o;c++)a+=n[c]+(~s.indexOf(c)?l.shift()||u+"0,0,0,0)":(i.length?i:l.length?l:r).shift());if(!n)for(o=(n=e.split(Ut)).length-1;c<o;c++)a+=n[c]+l[c];return a+n[o]},Ut=function(){var e,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(e in Dt)t+="|"+e+"\\b";return new RegExp(t+")","gi")}(),Nt=/hsl[a]?\(/,zt=function(e){var t,r=e.join(" ");if(Ut.lastIndex=0,Ut.test(r))return t=Nt.test(r),e[1]=It(e[1],t),e[0]=It(e[0],t,Ft(e[1])),!0},Bt=(b=Date.now,w=500,x=33,j=b(),E=j,T=A=1e3/240,S=function e(t){var r,s,n,i,o=b()-E,a=!0===t;if(o>w&&(j+=o-x),((r=(n=(E+=o)-j)-T)>0||a)&&(i=++_.frame,v=n-1e3*_.time,_.time=n/=1e3,T+=r+(r>=A?4:A-r),s=1),a||(f=m(e)),s)for(y=0;y<M.length;y++)M[y](n,v,i,t)},_={time:0,frame:0,tick:function(){S(!0)},deltaRatio:function(e){return v/(1e3/(e||60))},wake:function(){c&&(!l&&Z()&&(a=l=window,u=a.document||{},oe.gsap=Or,(a.gsapVersions||(a.gsapVersions=[])).push(Or.version),le(ae||a.GreenSockGlobals||!a.gsap&&a||{}),g=a.requestAnimationFrame),f&&_.sleep(),m=g||function(e){return setTimeout(e,T-1e3*_.time+1|0)},p=1,S(2))},sleep:function(){(g?a.cancelAnimationFrame:clearTimeout)(f),p=0,m=he},lagSmoothing:function(e,t){w=e||1e8,x=Math.min(t,w,0)},fps:function(e){A=1e3/(e||240),T=1e3*_.time+A},add:function(e,t,r){var s=t?function(t,r,n,i){e(t,r,n,i),_.remove(s)}:e;return _.remove(e),M[r?"unshift":"push"](s),Vt(),s},remove:function(e,t){~(t=M.indexOf(e))&&M.splice(t,1)&&y>=t&&y--},_listeners:M=[]}),Vt=function(){return!p&&Bt.wake()},Ht={},Gt=/^[\d.\-M][\d.\-,\s]/,Yt=/["']/g,Xt=function(e){for(var t,r,s,n={},i=e.substr(1,e.length-3).split(":"),o=i[0],a=1,l=i.length;a<l;a++)r=i[a],t=a!==l-1?r.lastIndexOf(","):r.length,s=r.substr(0,t),n[o]=isNaN(s)?s.replace(Yt,"").trim():+s,o=r.substr(t+1).trim();return n},Wt=function(e){return function(t){return 1-e(1-t)}},Zt=function e(t,r){for(var s,n=t._first;n;)n instanceof sr?e(n,r):!n.vars.yoyoEase||n._yoyo&&n._repeat||n._yoyo===r||(n.timeline?e(n.timeline,r):(s=n._ease,n._ease=n._yEase,n._yEase=s,n._yoyo=r)),n=n._next},Kt=function(e,t){return e&&(H(e)?e:Ht[e]||function(e){var t,r,s,n,i=(e+"").split("("),o=Ht[i[0]];return o&&i.length>1&&o.config?o.config.apply(null,~e.indexOf("{")?[Xt(i[1])]:(t=e,r=t.indexOf("(")+1,s=t.indexOf(")"),n=t.indexOf("(",r),t.substring(r,~n&&n<s?t.indexOf(")",s+1):s)).split(",").map(qe)):Ht._CE&&Gt.test(e)?Ht._CE("",e):o}(e))||t},Qt=function(e,t,r,s){void 0===r&&(r=function(e){return 1-t(1-e)}),void 0===s&&(s=function(e){return e<.5?t(2*e)/2:1-t(2*(1-e))/2});var n,i={easeIn:t,easeOut:r,easeInOut:s};return Ee(e,(function(e){for(var t in Ht[e]=oe[e]=i,Ht[n=e.toLowerCase()]=r,i)Ht[n+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=Ht[e+"."+t]=i[t]})),i},$t=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},Jt=function e(t,r,s){var n=r>=1?r:1,i=(s||(t?.3:.45))/(r<1?r:1),o=i/F*(Math.asin(1/n)||0),a=function(e){return 1===e?1:n*Math.pow(2,-10*e)*B((e-o)*i)+1},l="out"===t?a:"in"===t?function(e){return 1-a(1-e)}:$t(a);return i=F/i,l.config=function(r,s){return e(t,r,s)},l},er=function e(t,r){void 0===r&&(r=1.70158);var s=function(e){return e?--e*e*((r+1)*e+r)+1:0},n="out"===t?s:"in"===t?function(e){return 1-s(1-e)}:$t(s);return n.config=function(r){return e(t,r)},n};Ee("Linear,Quad,Cubic,Quart,Quint,Strong",(function(e,t){var r=t<5?t+1:t;Qt(e+",Power"+(r-1),t?function(e){return Math.pow(e,r)}:function(e){return e},(function(e){return 1-Math.pow(1-e,r)}),(function(e){return e<.5?Math.pow(2*e,r)/2:1-Math.pow(2*(1-e),r)/2}))})),Ht.Linear.easeNone=Ht.none=Ht.Linear.easeIn,Qt("Elastic",Jt("in"),Jt("out"),Jt()),k=7.5625,q=1/(C=2.75),Qt("Bounce",(function(e){return 1-O(1-e)}),O=function(e){return e<q?k*e*e:e<.7272727272727273?k*Math.pow(e-1.5/C,2)+.75:e<.9090909090909092?k*(e-=2.25/C)*e+.9375:k*Math.pow(e-2.625/C,2)+.984375}),Qt("Expo",(function(e){return e?Math.pow(2,10*(e-1)):0})),Qt("Circ",(function(e){return-(N(1-e*e)-1)})),Qt("Sine",(function(e){return 1===e?1:1-z(e*I)})),Qt("Back",er("in"),er("out"),er()),Ht.SteppedEase=Ht.steps=oe.SteppedEase={config:function(e,t){void 0===e&&(e=1);var r=1/e,s=e+(t?0:1),n=t?1:0;return function(e){return((s*at(0,.99999999,e)|0)+n)*r}}},D.ease=Ht["quad.out"],Ee("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(e){return be+=e+","+e+"Params,"}));var tr=function(e,t){this.id=U++,e._gsap=this,this.target=e,this.harness=t,this.get=t?t.get:je,this.set=t?t.getSetter:yr},rr=function(){function e(e){this.vars=e,this._delay=+e.delay||0,(this._repeat=e.repeat===1/0?-2:e.repeat||0)&&(this._rDelay=e.repeatDelay||0,this._yoyo=!!e.yoyo||!!e.yoyoEase),this._ts=1,tt(this,+e.duration,1,1),this.data=e.data,p||Bt.wake()}var t=e.prototype;return t.delay=function(e){return e||0===e?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+e-this._delay),this._delay=e,this):this._delay},t.duration=function(e){return arguments.length?this.totalDuration(this._repeat>0?e+(e+this._rDelay)*this._repeat:e):this.totalDuration()&&this._dur},t.totalDuration=function(e){return arguments.length?(this._dirty=0,tt(this,this._repeat<0?e:(e-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(e,t){if(Vt(),!arguments.length)return this._tTime;var r=this._dp;if(r&&r.smoothChildTiming&&this._ts){for(We(this,e),!r._dp||r.parent||Ze(r,this);r&&r.parent;)r.parent._time!==r._start+(r._ts>=0?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&e<this._tDur||this._ts<0&&e>0||!this._tDur&&!e)&&Ke(this._dp,this,this._start-this._delay)}return(this._tTime!==e||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===P||!e&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=e),Ce(this,e,t)),this},t.time=function(e,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),e+He(this))%(this._dur+this._rDelay)||(e?this._dur:0),t):this._time},t.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},t.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?e:1-e)+He(this),t):this.duration()?Math.min(1,this._time/this._dur):this.ratio},t.iteration=function(e,t){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(e-1)*r,t):this._repeat?Ge(this._tTime,r)+1:1},t.timeScale=function(e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===e)return this;var t=this.parent&&this._ts?Ye(this.parent._time,this):this._tTime;return this._rts=+e||0,this._ts=this._ps||-1e-8===e?0:this._rts,this.totalTime(at(-this._delay,this._tDur,t),!0),Xe(this),Be(this)},t.paused=function(e){return arguments.length?(this._ps!==e&&(this._ps=e,e?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Vt(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==P&&(this._tTime-=P)))),this):this._ps},t.startTime=function(e){if(arguments.length){this._start=e;var t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&Ke(t,this,e-this._delay),this}return this._start},t.endTime=function(e){return this._start+(W(e)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},t.rawTime=function(e){var t=this.parent||this._dp;return t?e&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Ye(t.rawTime(e),this):this._tTime:this._tTime},t.globalTime=function(e){for(var t=this,r=arguments.length?e:t.rawTime();t;)r=t._start+r/(t._ts||1),t=t._dp;return r},t.repeat=function(e){return arguments.length?(this._repeat=e===1/0?-2:e,rt(this)):-2===this._repeat?1/0:this._repeat},t.repeatDelay=function(e){if(arguments.length){var t=this._time;return this._rDelay=e,rt(this),t?this.time(t):this}return this._rDelay},t.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},t.seek=function(e,t){return this.totalTime(nt(this,e),W(t))},t.restart=function(e,t){return this.play().totalTime(e?-this._delay:0,W(t))},t.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},t.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},t.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(e){return arguments.length?(!!e!==this.reversed()&&this.timeScale(-this._rts||(e?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var e,t=this.parent||this._dp,r=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(e=t.rawTime(!0))>=r&&e<this.endTime(!0)-P))},t.eventCallback=function(e,t,r){var s=this.vars;return arguments.length>1?(t?(s[e]=t,r&&(s[e+"Params"]=r),"onUpdate"===e&&(this._onUpdate=t)):delete s[e],this):s[e]},t.then=function(e){var t=this;return new Promise((function(r){var s=H(e)?e:Oe,n=function(){var e=t.then;t.then=null,H(s)&&(s=s(t))&&(s.then||s===t)&&(t.then=e),r(s),t.then=e};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?n():t._prom=n}))},t.kill=function(){qt(this)},e}();Le(rr.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var sr=function(e){function t(t,r){var n;return void 0===t&&(t={}),(n=e.call(this,t)||this).labels={},n.smoothChildTiming=!!t.smoothChildTiming,n.autoRemoveChildren=!!t.autoRemoveChildren,n._sort=W(t.sortChildren),o&&Ke(t.parent||o,s(n),r),t.reversed&&n.reverse(),t.paused&&n.paused(!0),t.scrollTrigger&&Qe(s(n),t.scrollTrigger),n}n(t,e);var r=t.prototype;return r.to=function(e,t,r){return it(0,arguments,this),this},r.from=function(e,t,r){return it(1,arguments,this),this},r.fromTo=function(e,t,r,s){return it(2,arguments,this),this},r.set=function(e,t,r){return t.duration=0,t.parent=this,Fe(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new fr(e,t,nt(this,r),1),this},r.call=function(e,t,r){return Ke(this,fr.delayedCall(0,e,t),r)},r.staggerTo=function(e,t,r,s,n,i,o){return r.duration=t,r.stagger=r.stagger||s,r.onComplete=i,r.onCompleteParams=o,r.parent=this,new fr(e,r,nt(this,n)),this},r.staggerFrom=function(e,t,r,s,n,i,o){return r.runBackwards=1,Fe(r).immediateRender=W(r.immediateRender),this.staggerTo(e,t,r,s,n,i,o)},r.staggerFromTo=function(e,t,r,s,n,i,o,a){return s.startAt=r,Fe(s).immediateRender=W(s.immediateRender),this.staggerTo(e,t,s,n,i,o,a)},r.render=function(e,t,r){var s,n,i,a,l,u,c,d,h,p,f,m,g=this._time,_=this._dirty?this.totalDuration():this._tDur,v=this._dur,y=e<=0?0:Te(e),b=this._zTime<0!=e<0&&(this._initted||!v);if(this!==o&&y>_&&e>=0&&(y=_),y!==this._tTime||r||b){if(g!==this._time&&v&&(y+=this._time-g,e+=this._time-g),s=y,h=this._start,u=!(d=this._ts),b&&(v||(g=this._zTime),(e||!t)&&(this._zTime=e)),this._repeat){if(f=this._yoyo,l=v+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*l+e,t,r);if(s=Te(y%l),y===_?(a=this._repeat,s=v):((a=~~(y/l))&&a===y/l&&(s=v,a--),s>v&&(s=v)),p=Ge(this._tTime,l),!g&&this._tTime&&p!==a&&(p=a),f&&1&a&&(s=v-s,m=1),a!==p&&!this._lock){var w=f&&1&p,x=w===(f&&1&a);if(a<p&&(w=!w),g=w?0:v,this._lock=1,this.render(g||(m?0:Te(a*l)),t,!v)._lock=0,this._tTime=y,!t&&this.parent&&Ct(this,"onRepeat"),this.vars.repeatRefresh&&!m&&(this.invalidate()._lock=1),g&&g!==this._time||u!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(v=this._dur,_=this._tDur,x&&(this._lock=2,g=w?v:-1e-4,this.render(g,!0),this.vars.repeatRefresh&&!m&&this.invalidate()),this._lock=0,!this._ts&&!u)return this;Zt(this,m)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(c=function(e,t,r){var s;if(r>t)for(s=e._first;s&&s._start<=r;){if("isPause"===s.data&&s._start>t)return s;s=s._next}else for(s=e._last;s&&s._start>=r;){if("isPause"===s.data&&s._start<t)return s;s=s._prev}}(this,Te(g),Te(s)),c&&(y-=s-(s=c._start))),this._tTime=y,this._time=s,this._act=!d,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=e,g=0),!g&&s&&!t&&(Ct(this,"onStart"),this._tTime!==y))return this;if(s>=g&&e>=0)for(n=this._first;n;){if(i=n._next,(n._act||s>=n._start)&&n._ts&&c!==n){if(n.parent!==this)return this.render(e,t,r);if(n.render(n._ts>0?(s-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(s-n._start)*n._ts,t,r),s!==this._time||!this._ts&&!u){c=0,i&&(y+=this._zTime=-1e-8);break}}n=i}else{n=this._last;for(var j=e<0?e:s;n;){if(i=n._prev,(n._act||j<=n._end)&&n._ts&&c!==n){if(n.parent!==this)return this.render(e,t,r);if(n.render(n._ts>0?(j-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(j-n._start)*n._ts,t,r),s!==this._time||!this._ts&&!u){c=0,i&&(y+=this._zTime=j?-1e-8:P);break}}n=i}}if(c&&!t&&(this.pause(),c.render(s>=g?0:-1e-8)._zTime=s>=g?1:-1,this._ts))return this._start=h,Xe(this),this.render(e,t,r);this._onUpdate&&!t&&Ct(this,"onUpdate",!0),(y===_&&this._tTime>=this.totalDuration()||!y&&g)&&(h!==this._start&&Math.abs(d)===Math.abs(this._ts)||this._lock||((e||!v)&&(y===_&&this._ts>0||!y&&this._ts<0)&&Ne(this,1),t||e<0&&!g||!y&&!g&&_||(Ct(this,y===_&&e>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(y<_&&this.timeScale()>0)&&this._prom())))}return this},r.add=function(e,t){var r=this;if(G(t)||(t=nt(this,t,e)),!(e instanceof rr)){if($(e))return e.forEach((function(e){return r.add(e,t)})),this;if(V(e))return this.addLabel(e,t);if(!H(e))return this;e=fr.delayedCall(0,e)}return this!==e?Ke(this,e,t):this},r.getChildren=function(e,t,r,s){void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===r&&(r=!0),void 0===s&&(s=-R);for(var n=[],i=this._first;i;)i._start>=s&&(i instanceof fr?t&&n.push(i):(r&&n.push(i),e&&n.push.apply(n,i.getChildren(!0,t,r)))),i=i._next;return n},r.getById=function(e){for(var t=this.getChildren(1,1,1),r=t.length;r--;)if(t[r].vars.id===e)return t[r]},r.remove=function(e){return V(e)?this.removeLabel(e):H(e)?this.killTweensOf(e):(Ue(this,e),e===this._recent&&(this._recent=this._last),ze(this))},r.totalTime=function(t,r){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=Te(Bt.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),e.prototype.totalTime.call(this,t,r),this._forcing=0,this):this._tTime},r.addLabel=function(e,t){return this.labels[e]=nt(this,t),this},r.removeLabel=function(e){return delete this.labels[e],this},r.addPause=function(e,t,r){var s=fr.delayedCall(0,t||he,r);return s.data="isPause",this._hasPause=1,Ke(this,s,nt(this,e))},r.removePause=function(e){var t=this._first;for(e=nt(this,e);t;)t._start===e&&"isPause"===t.data&&Ne(t),t=t._next},r.killTweensOf=function(e,t,r){for(var s=this.getTweensOf(e,r),n=s.length;n--;)nr!==s[n]&&s[n].kill(e,t);return this},r.getTweensOf=function(e,t){for(var r,s=[],n=pt(e),i=this._first,o=G(t);i;)i instanceof fr?Se(i._targets,n)&&(o?(!nr||i._initted&&i._ts)&&i.globalTime(0)<=t&&i.globalTime(i.totalDuration())>t:!t||i.isActive())&&s.push(i):(r=i.getTweensOf(n,t)).length&&s.push.apply(s,r),i=i._next;return s},r.tweenTo=function(e,t){t=t||{};var r,s=this,n=nt(s,e),i=t,o=i.startAt,a=i.onStart,l=i.onStartParams,u=i.immediateRender,c=fr.to(s,Le({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:n,overwrite:"auto",duration:t.duration||Math.abs((n-(o&&"time"in o?o.time:s._time))/s.timeScale())||P,onStart:function(){if(s.pause(),!r){var e=t.duration||Math.abs((n-(o&&"time"in o?o.time:s._time))/s.timeScale());c._dur!==e&&tt(c,e,0,1).render(c._time,!0,!0),r=1}a&&a.apply(c,l||[])}},t));return u?c.render(0):c},r.tweenFromTo=function(e,t,r){return this.tweenTo(t,Le({startAt:{time:nt(this,e)}},r))},r.recent=function(){return this._recent},r.nextLabel=function(e){return void 0===e&&(e=this._time),kt(this,nt(this,e))},r.previousLabel=function(e){return void 0===e&&(e=this._time),kt(this,nt(this,e),1)},r.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.previousLabel(this._time+P)},r.shiftChildren=function(e,t,r){void 0===r&&(r=0);for(var s,n=this._first,i=this.labels;n;)n._start>=r&&(n._start+=e,n._end+=e),n=n._next;if(t)for(s in i)i[s]>=r&&(i[s]+=e);return ze(this)},r.invalidate=function(){var t=this._first;for(this._lock=0;t;)t.invalidate(),t=t._next;return e.prototype.invalidate.call(this)},r.clear=function(e){void 0===e&&(e=!0);for(var t,r=this._first;r;)t=r._next,this.remove(r),r=t;return this._dp&&(this._time=this._tTime=this._pTime=0),e&&(this.labels={}),ze(this)},r.totalDuration=function(e){var t,r,s,n=0,i=this,a=i._last,l=R;if(arguments.length)return i.timeScale((i._repeat<0?i.duration():i.totalDuration())/(i.reversed()?-e:e));if(i._dirty){for(s=i.parent;a;)t=a._prev,a._dirty&&a.totalDuration(),(r=a._start)>l&&i._sort&&a._ts&&!i._lock?(i._lock=1,Ke(i,a,r-a._delay,1)._lock=0):l=r,r<0&&a._ts&&(n-=r,(!s&&!i._dp||s&&s.smoothChildTiming)&&(i._start+=r/i._ts,i._time-=r,i._tTime-=r),i.shiftChildren(-r,!1,-Infinity),l=0),a._end>n&&a._ts&&(n=a._end),a=t;tt(i,i===o&&i._time>n?i._time:n,1,1),i._dirty=0}return i._tDur},t.updateRoot=function(e){if(o._ts&&(Ce(o,Ye(e,o)),d=Bt.frame),Bt.frame>=ve){ve+=L.autoSleep||120;var t=o._first;if((!t||!t._ts)&&L.autoSleep&&Bt._listeners.length<2){for(;t&&!t._ts;)t=t._next;t||Bt.sleep()}}},t}(rr);Le(sr.prototype,{_lock:0,_hasPause:0,_forcing:0});var nr,ir,or=function(e,t,r,s,n,i,o){var a,l,u,c,d,h,p,f,m=new Sr(this._pt,e,t,0,1,xr,null,n),g=0,_=0;for(m.b=r,m.e=s,r+="",(p=~(s+="").indexOf("random("))&&(s=Tt(s)),i&&(i(f=[r,s],e,t),r=f[0],s=f[1]),l=r.match(re)||[];a=re.exec(s);)c=a[0],d=s.substring(g,a.index),u?u=(u+1)%5:"rgba("===d.substr(-5)&&(u=1),c!==l[_++]&&(h=parseFloat(l[_-1])||0,m._pt={_next:m._pt,p:d||1===_?d:",",s:h,c:"="===c.charAt(1)?Me(h,c)-h:parseFloat(c)-h,m:u&&u<4?Math.round:0},g=re.lastIndex);return m.c=g<s.length?s.substring(g,s.length):"",m.fp=o,(se.test(s)||p)&&(m.e=0),this._pt=m,m},ar=function(e,t,r,s,n,i,o,a,l){H(s)&&(s=s(n||0,e,i));var u,c=e[t],d="get"!==r?r:H(c)?l?e[t.indexOf("set")||!H(e["get"+t.substr(3)])?t:"get"+t.substr(3)](l):e[t]():c,h=H(c)?l?_r:gr:mr;if(V(s)&&(~s.indexOf("random(")&&(s=Tt(s)),"="===s.charAt(1)&&((u=Me(d,s)+(lt(d)||0))||0===u)&&(s=u)),d!==s||ir)return isNaN(d*s)||""===s?(!c&&!(t in e)&&ue(t,s),or.call(this,e,t,d,s,h,a||L.stringFilter,l)):(u=new Sr(this._pt,e,t,+d||0,s-(d||0),"boolean"==typeof c?wr:br,0,h),l&&(u.fp=l),o&&u.modifier(o,this,e),this._pt=u)},lr=function(e,t,r,s,n,i){var o,a,l,u;if(ge[e]&&!1!==(o=new ge[e]).init(n,o.rawVars?t[e]:function(e,t,r,s,n){if(H(e)&&(e=dr(e,n,t,r,s)),!X(e)||e.style&&e.nodeType||$(e)||Q(e))return V(e)?dr(e,n,t,r,s):e;var i,o={};for(i in e)o[i]=dr(e[i],n,t,r,s);return o}(t[e],s,n,i,r),r,s,i)&&(r._pt=a=new Sr(r._pt,n,e,0,1,o.render,o,0,o.priority),r!==h))for(l=r._ptLookup[r._targets.indexOf(n)],u=o._props.length;u--;)l[o._props[u]]=a;return o},ur=function e(t,r){var s,n,a,l,u,c,d,h,p,f,m,g,_,v=t.vars,y=v.ease,b=v.startAt,w=v.immediateRender,x=v.lazy,j=v.onUpdate,E=v.onUpdateParams,A=v.callbackScope,T=v.runBackwards,M=v.yoyoEase,S=v.keyframes,k=v.autoRevert,C=t._dur,q=t._startAt,O=t._targets,L=t.parent,F=L&&"nested"===L.data?L.parent._targets:O,I="auto"===t._overwrite&&!i,U=t.timeline;if(U&&(!S||!y)&&(y="none"),t._ease=Kt(y,D.ease),t._yEase=M?Wt(Kt(!0===M?y:M,D.ease)):0,M&&t._yoyo&&!t._repeat&&(M=t._yEase,t._yEase=t._ease,t._ease=M),t._from=!U&&!!v.runBackwards,!U||S&&!v.stagger){if(g=(h=O[0]?xe(O[0]).harness:0)&&v[h.prop],s=Pe(v,pe),q&&(Ne(q.render(-1,!0)),q._lazy=0),b)if(Ne(t._startAt=fr.set(O,Le({data:"isStart",overwrite:!1,parent:L,immediateRender:!0,lazy:W(x),startAt:null,delay:0,onUpdate:j,onUpdateParams:E,callbackScope:A,stagger:0},b))),r<0&&!w&&!k&&t._startAt.render(-1,!0),w){if(r>0&&!k&&(t._startAt=0),C&&r<=0)return void(r&&(t._zTime=r))}else!1===k&&(t._startAt=0);else if(T&&C)if(q)!k&&(t._startAt=0);else if(r&&(w=!1),a=Le({overwrite:!1,data:"isFromStart",lazy:w&&W(x),immediateRender:w,stagger:0,parent:L},s),g&&(a[h.prop]=g),Ne(t._startAt=fr.set(O,a)),r<0&&t._startAt.render(-1,!0),t._zTime=r,w){if(!r)return}else e(t._startAt,P);for(t._pt=t._ptCache=0,x=C&&W(x)||x&&!C,n=0;n<O.length;n++){if(d=(u=O[n])._gsap||we(O)[n]._gsap,t._ptLookup[n]=f={},me[d.id]&&fe.length&&ke(),m=F===O?n:F.indexOf(u),h&&!1!==(p=new h).init(u,g||s,t,m,F)&&(t._pt=l=new Sr(t._pt,u,p.name,0,1,p.render,p,0,p.priority),p._props.forEach((function(e){f[e]=l})),p.priority&&(c=1)),!h||g)for(a in s)ge[a]&&(p=lr(a,s,t,m,u,F))?p.priority&&(c=1):f[a]=l=ar.call(t,u,a,"get",s[a],m,F,0,v.stringFilter);t._op&&t._op[n]&&t.kill(u,t._op[n]),I&&t._pt&&(nr=t,o.killTweensOf(u,f,t.globalTime(r)),_=!t.parent,nr=0),t._pt&&x&&(me[d.id]=1)}c&&Mr(t),t._onInit&&t._onInit(t)}t._onUpdate=j,t._initted=(!t._op||t._pt)&&!_,S&&r<=0&&U.render(R,!0,!0)},cr=function(e,t,r,s){var n,i,o=t.ease||s||"power1.inOut";if($(t))i=r[e]||(r[e]=[]),t.forEach((function(e,r){return i.push({t:r/(t.length-1)*100,v:e,e:o})}));else for(n in t)i=r[n]||(r[n]=[]),"ease"===n||i.push({t:parseFloat(e),v:t[n],e:o})},dr=function(e,t,r,s,n){return H(e)?e.call(t,r,s,n):V(e)&&~e.indexOf("random(")?Tt(e):e},hr=be+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",pr={};Ee(hr+",id,stagger,delay,duration,paused,scrollTrigger",(function(e){return pr[e]=1}));var fr=function(e){function t(t,r,n,a){var l;"number"==typeof r&&(n.duration=r,r=n,n=null);var u,c,d,h,p,f,m,g,_=(l=e.call(this,a?r:Fe(r))||this).vars,v=_.duration,y=_.delay,b=_.immediateRender,w=_.stagger,x=_.overwrite,j=_.keyframes,E=_.defaults,A=_.scrollTrigger,T=_.yoyoEase,M=r.parent||o,S=($(t)||Q(t)?G(t[0]):"length"in r)?[t]:pt(t);if(l._targets=S.length?we(S):ce("GSAP target "+t+" not found. https://greensock.com",!L.nullTargetWarn)||[],l._ptLookup=[],l._overwrite=x,j||w||K(v)||K(y)){if(r=l.vars,(u=l.timeline=new sr({data:"nested",defaults:E||{}})).kill(),u.parent=u._dp=s(l),u._start=0,w||K(v)||K(y)){if(h=S.length,m=w&&gt(w),X(w))for(p in w)~hr.indexOf(p)&&(g||(g={}),g[p]=w[p]);for(c=0;c<h;c++)(d=Pe(r,pr)).stagger=0,T&&(d.yoyoEase=T),g&&De(d,g),f=S[c],d.duration=+dr(v,s(l),c,f,S),d.delay=(+dr(y,s(l),c,f,S)||0)-l._delay,!w&&1===h&&d.delay&&(l._delay=y=d.delay,l._start+=y,d.delay=0),u.to(f,d,m?m(c,f,S):0),u._ease=Ht.none;u.duration()?v=y=0:l.timeline=0}else if(j){Fe(Le(u.vars.defaults,{ease:"none"})),u._ease=Kt(j.ease||r.ease||"none");var k,C,q,O=0;if($(j))j.forEach((function(e){return u.to(S,e,">")}));else{for(p in d={},j)"ease"===p||"easeEach"===p||cr(p,j[p],d,j.easeEach);for(p in d)for(k=d[p].sort((function(e,t){return e.t-t.t})),O=0,c=0;c<k.length;c++)(q={ease:(C=k[c]).e,duration:(C.t-(c?k[c-1].t:0))/100*v})[p]=C.v,u.to(S,q,O),O+=q.duration;u.duration()<v&&u.to({},{duration:v-u.duration()})}}v||l.duration(v=u.duration())}else l.timeline=0;return!0!==x||i||(nr=s(l),o.killTweensOf(S),nr=0),Ke(M,s(l),n),r.reversed&&l.reverse(),r.paused&&l.paused(!0),(b||!v&&!j&&l._start===Te(M._time)&&W(b)&&Ve(s(l))&&"nested"!==M.data)&&(l._tTime=-1e-8,l.render(Math.max(0,-y))),A&&Qe(s(l),A),l}n(t,e);var r=t.prototype;return r.render=function(e,t,r){var s,n,i,o,a,l,u,c,d,h=this._time,p=this._tDur,f=this._dur,m=e>p-P&&e>=0?p:e<P?0:e;if(f){if(m!==this._tTime||!e||r||!this._initted&&this._tTime||this._startAt&&this._zTime<0!=e<0){if(s=m,c=this.timeline,this._repeat){if(o=f+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*o+e,t,r);if(s=Te(m%o),m===p?(i=this._repeat,s=f):((i=~~(m/o))&&i===m/o&&(s=f,i--),s>f&&(s=f)),(l=this._yoyo&&1&i)&&(d=this._yEase,s=f-s),a=Ge(this._tTime,o),s===h&&!r&&this._initted)return this._tTime=m,this;i!==a&&(c&&this._yEase&&Zt(c,l),!this.vars.repeatRefresh||l||this._lock||(this._lock=r=1,this.render(Te(o*i),!0).invalidate()._lock=0))}if(!this._initted){if($e(this,e<0?e:s,r,t))return this._tTime=0,this;if(h!==this._time)return this;if(f!==this._dur)return this.render(e,t,r)}if(this._tTime=m,this._time=s,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=u=(d||this._ease)(s/f),this._from&&(this.ratio=u=1-u),s&&!h&&!t&&(Ct(this,"onStart"),this._tTime!==m))return this;for(n=this._pt;n;)n.r(u,n.d),n=n._next;c&&c.render(e<0?e:!s&&l?-1e-8:c._dur*c._ease(s/this._dur),t,r)||this._startAt&&(this._zTime=e),this._onUpdate&&!t&&(e<0&&this._startAt&&this._startAt.render(e,!0,r),Ct(this,"onUpdate")),this._repeat&&i!==a&&this.vars.onRepeat&&!t&&this.parent&&Ct(this,"onRepeat"),m!==this._tDur&&m||this._tTime!==m||(e<0&&this._startAt&&!this._onUpdate&&this._startAt.render(e,!0,!0),(e||!f)&&(m===this._tDur&&this._ts>0||!m&&this._ts<0)&&Ne(this,1),t||e<0&&!h||!m&&!h||(Ct(this,m===p?"onComplete":"onReverseComplete",!0),this._prom&&!(m<p&&this.timeScale()>0)&&this._prom()))}}else!function(e,t,r,s){var n,i,o,a=e.ratio,l=t<0||!t&&(!e._start&&Je(e)&&(e._initted||!et(e))||(e._ts<0||e._dp._ts<0)&&!et(e))?0:1,u=e._rDelay,c=0;if(u&&e._repeat&&(c=at(0,e._tDur,t),i=Ge(c,u),e._yoyo&&1&i&&(l=1-l),i!==Ge(e._tTime,u)&&(a=1-l,e.vars.repeatRefresh&&e._initted&&e.invalidate())),l!==a||s||e._zTime===P||!t&&e._zTime){if(!e._initted&&$e(e,t,s,r))return;for(o=e._zTime,e._zTime=t||(r?P:0),r||(r=t&&!o),e.ratio=l,e._from&&(l=1-l),e._time=0,e._tTime=c,n=e._pt;n;)n.r(l,n.d),n=n._next;e._startAt&&t<0&&e._startAt.render(t,!0,!0),e._onUpdate&&!r&&Ct(e,"onUpdate"),c&&e._repeat&&!r&&e.parent&&Ct(e,"onRepeat"),(t>=e._tDur||t<0)&&e.ratio===l&&(l&&Ne(e,1),r||(Ct(e,l?"onComplete":"onReverseComplete",!0),e._prom&&e._prom()))}else e._zTime||(e._zTime=t)}(this,e,t,r);return this},r.targets=function(){return this._targets},r.invalidate=function(){return this._pt=this._op=this._startAt=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(),e.prototype.invalidate.call(this)},r.resetTo=function(e,t,r,s){p||Bt.wake(),this._ts||this.play();var n=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||ur(this,n),function(e,t,r,s,n,i,o){var a,l,u,c=(e._pt&&e._ptCache||(e._ptCache={}))[t];if(!c)for(c=e._ptCache[t]=[],l=e._ptLookup,u=e._targets.length;u--;){if((a=l[u][t])&&a.d&&a.d._pt)for(a=a.d._pt;a&&a.p!==t;)a=a._next;if(!a)return ir=1,e.vars[t]="+=0",ur(e,o),ir=0,1;c.push(a)}for(u=c.length;u--;)(a=c[u]).s=!s&&0!==s||n?a.s+(s||0)+i*a.c:s,a.c=r-a.s,a.e&&(a.e=Ae(r)+lt(a.e)),a.b&&(a.b=a.s+lt(a.b))}(this,e,t,r,s,this._ease(n/this._dur),n)?this.resetTo(e,t,r,s):(We(this,0),this.parent||Ie(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},r.kill=function(e,t){if(void 0===t&&(t="all"),!(e||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?qt(this):this;if(this.timeline){var r=this.timeline.totalDuration();return this.timeline.killTweensOf(e,t,nr&&!0!==nr.vars.overwrite)._first||qt(this),this.parent&&r!==this.timeline.totalDuration()&&tt(this,this._dur*this.timeline._tDur/r,0,1),this}var s,n,i,o,a,l,u,c=this._targets,d=e?pt(e):c,h=this._ptLookup,p=this._pt;if((!t||"all"===t)&&function(e,t){for(var r=e.length,s=r===t.length;s&&r--&&e[r]===t[r];);return r<0}(c,d))return"all"===t&&(this._pt=0),qt(this);for(s=this._op=this._op||[],"all"!==t&&(V(t)&&(a={},Ee(t,(function(e){return a[e]=1})),t=a),t=function(e,t){var r,s,n,i,o=e[0]?xe(e[0]).harness:0,a=o&&o.aliases;if(!a)return t;for(s in r=De({},t),a)if(s in r)for(n=(i=a[s].split(",")).length;n--;)r[i[n]]=r[s];return r}(c,t)),u=c.length;u--;)if(~d.indexOf(c[u]))for(a in n=h[u],"all"===t?(s[u]=t,o=n,i={}):(i=s[u]=s[u]||{},o=t),o)(l=n&&n[a])&&("kill"in l.d&&!0!==l.d.kill(a)||Ue(this,l,"_pt"),delete n[a]),"all"!==i&&(i[a]=1);return this._initted&&!this._pt&&p&&qt(this),this},t.to=function(e,r){return new t(e,r,arguments[2])},t.from=function(e,t){return it(1,arguments)},t.delayedCall=function(e,r,s,n){return new t(r,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:e,onComplete:r,onReverseComplete:r,onCompleteParams:s,onReverseCompleteParams:s,callbackScope:n})},t.fromTo=function(e,t,r){return it(2,arguments)},t.set=function(e,r){return r.duration=0,r.repeatDelay||(r.repeat=0),new t(e,r)},t.killTweensOf=function(e,t,r){return o.killTweensOf(e,t,r)},t}(rr);Le(fr.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),Ee("staggerTo,staggerFrom,staggerFromTo",(function(e){fr[e]=function(){var t=new sr,r=ct.call(arguments,0);return r.splice("staggerFromTo"===e?5:4,0,0),t[e].apply(t,r)}}));var mr=function(e,t,r){return e[t]=r},gr=function(e,t,r){return e[t](r)},_r=function(e,t,r,s){return e[t](s.fp,r)},vr=function(e,t,r){return e.setAttribute(t,r)},yr=function(e,t){return H(e[t])?gr:Y(e[t])&&e.setAttribute?vr:mr},br=function(e,t){return t.set(t.t,t.p,Math.round(1e6*(t.s+t.c*e))/1e6,t)},wr=function(e,t){return t.set(t.t,t.p,!!(t.s+t.c*e),t)},xr=function(e,t){var r=t._pt,s="";if(!e&&t.b)s=t.b;else if(1===e&&t.e)s=t.e;else{for(;r;)s=r.p+(r.m?r.m(r.s+r.c*e):Math.round(1e4*(r.s+r.c*e))/1e4)+s,r=r._next;s+=t.c}t.set(t.t,t.p,s,t)},jr=function(e,t){for(var r=t._pt;r;)r.r(e,r.d),r=r._next},Er=function(e,t,r,s){for(var n,i=this._pt;i;)n=i._next,i.p===s&&i.modifier(e,t,r),i=n},Ar=function(e){for(var t,r,s=this._pt;s;)r=s._next,s.p===e&&!s.op||s.op===e?Ue(this,s,"_pt"):s.dep||(t=1),s=r;return!t},Tr=function(e,t,r,s){s.mSet(e,t,s.m.call(s.tween,r,s.mt),s)},Mr=function(e){for(var t,r,s,n,i=e._pt;i;){for(t=i._next,r=s;r&&r.pr>i.pr;)r=r._next;(i._prev=r?r._prev:n)?i._prev._next=i:s=i,(i._next=r)?r._prev=i:n=i,i=t}e._pt=s},Sr=function(){function e(e,t,r,s,n,i,o,a,l){this.t=t,this.s=s,this.c=n,this.p=r,this.r=i||br,this.d=o||this,this.set=a||mr,this.pr=l||0,this._next=e,e&&(e._prev=this)}return e.prototype.modifier=function(e,t,r){this.mSet=this.mSet||this.set,this.set=Tr,this.m=e,this.mt=r,this.tween=t},e}();Ee(be+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(e){return pe[e]=1})),oe.TweenMax=oe.TweenLite=fr,oe.TimelineLite=oe.TimelineMax=sr,o=new sr({sortChildren:!1,defaults:D,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),L.stringFilter=zt;var kr={registerPlugin:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];t.forEach((function(e){return Ot(e)}))},timeline:function(e){return new sr(e)},getTweensOf:function(e,t){return o.getTweensOf(e,t)},getProperty:function(e,t,r,s){V(e)&&(e=pt(e)[0]);var n=xe(e||{}).get,i=r?Oe:qe;return"native"===r&&(r=""),e?t?i((ge[t]&&ge[t].get||n)(e,t,r,s)):function(t,r,s){return i((ge[t]&&ge[t].get||n)(e,t,r,s))}:e},quickSetter:function(e,t,r){if((e=pt(e)).length>1){var s=e.map((function(e){return Or.quickSetter(e,t,r)})),n=s.length;return function(e){for(var t=n;t--;)s[t](e)}}e=e[0]||{};var i=ge[t],o=xe(e),a=o.harness&&(o.harness.aliases||{})[t]||t,l=i?function(t){var s=new i;h._pt=0,s.init(e,r?t+r:t,h,0,[e]),s.render(1,s),h._pt&&jr(1,h)}:o.set(e,a);return i?l:function(t){return l(e,a,r?t+r:t,o,1)}},quickTo:function(e,t,r){var s,n=Or.to(e,De(((s={})[t]="+=0.1",s.paused=!0,s),r||{})),i=function(e,r,s){return n.resetTo(t,e,r,s)};return i.tween=n,i},isTweening:function(e){return o.getTweensOf(e,!0).length>0},defaults:function(e){return e&&e.ease&&(e.ease=Kt(e.ease,D.ease)),Re(D,e||{})},config:function(e){return Re(L,e||{})},registerEffect:function(e){var t=e.name,r=e.effect,s=e.plugins,n=e.defaults,i=e.extendTimeline;(s||"").split(",").forEach((function(e){return e&&!ge[e]&&!oe[e]&&ce(t+" effect requires "+e+" plugin.")})),_e[t]=function(e,t,s){return r(pt(e),Le(t||{},n),s)},i&&(sr.prototype[t]=function(e,r,s){return this.add(_e[t](e,X(r)?r:(s=r)&&{},this),s)})},registerEase:function(e,t){Ht[e]=Kt(t)},parseEase:function(e,t){return arguments.length?Kt(e,t):Ht},getById:function(e){return o.getById(e)},exportRoot:function(e,t){void 0===e&&(e={});var r,s,n=new sr(e);for(n.smoothChildTiming=W(e.smoothChildTiming),o.remove(n),n._dp=0,n._time=n._tTime=o._time,r=o._first;r;)s=r._next,!t&&!r._dur&&r instanceof fr&&r.vars.onComplete===r._targets[0]||Ke(n,r,r._start-r._delay),r=s;return Ke(o,n,0),n},utils:{wrap:Et,wrapYoyo:At,distribute:gt,random:yt,snap:vt,normalize:xt,getUnit:lt,clamp:ut,splitColor:Pt,toArray:pt,selector:ft,mapRange:Mt,pipe:bt,unitize:wt,interpolate:St,shuffle:mt},install:le,effects:_e,ticker:Bt,updateRoot:sr.updateRoot,plugins:ge,globalTimeline:o,core:{PropTween:Sr,globals:de,Tween:fr,Timeline:sr,Animation:rr,getCache:xe,_removeLinkedListItem:Ue,suppressOverwrites:function(e){return i=e}}};Ee("to,from,fromTo,delayedCall,set,killTweensOf",(function(e){return kr[e]=fr[e]})),Bt.add(sr.updateRoot),h=kr.to({},{duration:0});var Cr=function(e,t){for(var r=e._pt;r&&r.p!==t&&r.op!==t&&r.fp!==t;)r=r._next;return r},qr=function(e,t){return{name:e,rawVars:1,init:function(e,r,s){s._onInit=function(e){var s,n;if(V(r)&&(s={},Ee(r,(function(e){return s[e]=1})),r=s),t){for(n in s={},r)s[n]=t(r[n]);r=s}!function(e,t){var r,s,n,i=e._targets;for(r in t)for(s=i.length;s--;)(n=e._ptLookup[s][r])&&(n=n.d)&&(n._pt&&(n=Cr(n,r)),n&&n.modifier&&n.modifier(t[r],e,i[s],r))}(e,r)}}}},Or=kr.registerPlugin({name:"attr",init:function(e,t,r,s,n){var i,o;for(i in t)(o=this.add(e,"setAttribute",(e.getAttribute(i)||0)+"",t[i],s,n,0,0,i))&&(o.op=i),this._props.push(i)}},{name:"endArray",init:function(e,t){for(var r=t.length;r--;)this.add(e,r,e[r]||0,t[r])}},qr("roundProps",_t),qr("modifiers"),qr("snap",vt))||kr;fr.version=sr.version=Or.version="3.10.4",c=1,Z()&&Vt();var Lr=Ht.Power0,Dr=Ht.Power1,Rr=Ht.Power2,Pr=Ht.Power3,Fr=Ht.Power4,Ir=Ht.Linear,Ur=Ht.Quad,Nr=Ht.Cubic,zr=Ht.Quart,Br=Ht.Quint,Vr=Ht.Strong,Hr=Ht.Elastic,Gr=Ht.Back,Yr=Ht.SteppedEase,Xr=Ht.Bounce,Wr=Ht.Sine,Zr=Ht.Expo,Kr=Ht.Circ},"./node_modules/gsap/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Back:()=>s.Back,Bounce:()=>s.Bounce,CSSPlugin:()=>n.CSSPlugin,Circ:()=>s.Circ,Cubic:()=>s.Cubic,Elastic:()=>s.Elastic,Expo:()=>s.Expo,Linear:()=>s.Linear,Power0:()=>s.Power0,Power1:()=>s.Power1,Power2:()=>s.Power2,Power3:()=>s.Power3,Power4:()=>s.Power4,Quad:()=>s.Quad,Quart:()=>s.Quart,Quint:()=>s.Quint,Sine:()=>s.Sine,SteppedEase:()=>s.SteppedEase,Strong:()=>s.Strong,TimelineLite:()=>s.TimelineLite,TimelineMax:()=>s.TimelineMax,TweenLite:()=>s.TweenLite,TweenMax:()=>o,default:()=>i,gsap:()=>i});var s=r("./node_modules/gsap/gsap-core.js"),n=r("./node_modules/gsap/CSSPlugin.js"),i=s.gsap.registerPlugin(n.CSSPlugin)||s.gsap,o=i.core.Tween},"./node_modules/html-entities/lib/index.js":function(e,t,r){"use strict";var s=this&&this.__assign||function(){return s=Object.assign||function(e){for(var t,r=1,s=arguments.length;r<s;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},s.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var n=r("./node_modules/html-entities/lib/named-references.js"),i=r("./node_modules/html-entities/lib/numeric-unicode-map.js"),o=r("./node_modules/html-entities/lib/surrogate-pairs.js"),a=s(s({},n.namedReferences),{all:n.namedReferences.html5}),l={specialChars:/[<>'"&]/g,nonAscii:/(?:[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,nonAsciiPrintable:/(?:[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,extensive:/(?:[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g},u={mode:"specialChars",level:"all",numeric:"decimal"};t.encode=function(e,t){var r=void 0===(c=(i=void 0===t?u:t).mode)?"specialChars":c,s=void 0===(f=i.numeric)?"decimal":f,n=i.level;if(!e)return"";var i,c,d=l[r],h=a[void 0===n?"all":n].characters,p="hexadecimal"===s;if(d.lastIndex=0,i=d.exec(e)){c="";var f=0;do{f!==i.index&&(c+=e.substring(f,i.index));var m=h[n=i[0]];if(!m){var g=n.length>1?o.getCodePoint(n,0):n.charCodeAt(0);m=(p?"&#x"+g.toString(16):"&#"+g)+";"}c+=m,f=i.index+n.length}while(i=d.exec(e));f!==e.length&&(c+=e.substring(f))}else c=e;return c};var c={scope:"body",level:"all"},d=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g,h=/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g,p={xml:{strict:d,attribute:h,body:n.bodyRegExps.xml},html4:{strict:d,attribute:h,body:n.bodyRegExps.html4},html5:{strict:d,attribute:h,body:n.bodyRegExps.html5}},f=s(s({},p),{all:p.html5}),m=String.fromCharCode,g=m(65533),_={level:"all"};t.decodeEntity=function(e,t){var r=void 0===(s=(void 0===t?_:t).level)?"all":s;if(!e)return"";var s=e,n=(e[e.length-1],a[r].entities[e]);if(n)s=n;else if("&"===e[0]&&"#"===e[1]){var l=e[2],u="x"==l||"X"==l?parseInt(e.substr(3),16):parseInt(e.substr(2));s=u>=1114111?g:u>65535?o.fromCodePoint(u):m(i.numericUnicodeMap[u]||u)}return s},t.decode=function(e,t){var r=void 0===t?c:t,s=r.level,n=void 0===s?"all":s,l=r.scope,u=void 0===l?"xml"===n?"strict":"body":l;if(!e)return"";var d=f[n][u],h=a[n].entities,p="attribute"===u,_="strict"===u;d.lastIndex=0;var v,y=d.exec(e);if(y){v="";var b=0;do{b!==y.index&&(v+=e.substring(b,y.index));var w=y[0],x=w,j=w[w.length-1];if(p&&"="===j)x=w;else if(_&&";"!==j)x=w;else{var E=h[w];if(E)x=E;else if("&"===w[0]&&"#"===w[1]){var A=w[2],T="x"==A||"X"==A?parseInt(w.substr(3),16):parseInt(w.substr(2));x=T>=1114111?g:T>65535?o.fromCodePoint(T):m(i.numericUnicodeMap[T]||T)}}v+=x,b=y.index+w.length}while(y=d.exec(e));b!==e.length&&(v+=e.substring(b))}else v=e;return v}},"./node_modules/html-entities/lib/named-references.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bodyRegExps={xml:/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html4:/&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html5:/&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g},t.namedReferences={xml:{entities:{"&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},characters:{"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"}},html4:{entities:{"&apos;":"'","&nbsp":" ","&nbsp;":" ","&iexcl":"¡","&iexcl;":"¡","&cent":"¢","&cent;":"¢","&pound":"£","&pound;":"£","&curren":"¤","&curren;":"¤","&yen":"¥","&yen;":"¥","&brvbar":"¦","&brvbar;":"¦","&sect":"§","&sect;":"§","&uml":"¨","&uml;":"¨","&copy":"©","&copy;":"©","&ordf":"ª","&ordf;":"ª","&laquo":"«","&laquo;":"«","&not":"¬","&not;":"¬","&shy":"­","&shy;":"­","&reg":"®","&reg;":"®","&macr":"¯","&macr;":"¯","&deg":"°","&deg;":"°","&plusmn":"±","&plusmn;":"±","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&acute":"´","&acute;":"´","&micro":"µ","&micro;":"µ","&para":"¶","&para;":"¶","&middot":"·","&middot;":"·","&cedil":"¸","&cedil;":"¸","&sup1":"¹","&sup1;":"¹","&ordm":"º","&ordm;":"º","&raquo":"»","&raquo;":"»","&frac14":"¼","&frac14;":"¼","&frac12":"½","&frac12;":"½","&frac34":"¾","&frac34;":"¾","&iquest":"¿","&iquest;":"¿","&Agrave":"À","&Agrave;":"À","&Aacute":"Á","&Aacute;":"Á","&Acirc":"Â","&Acirc;":"Â","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Aring":"Å","&Aring;":"Å","&AElig":"Æ","&AElig;":"Æ","&Ccedil":"Ç","&Ccedil;":"Ç","&Egrave":"È","&Egrave;":"È","&Eacute":"É","&Eacute;":"É","&Ecirc":"Ê","&Ecirc;":"Ê","&Euml":"Ë","&Euml;":"Ë","&Igrave":"Ì","&Igrave;":"Ì","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Iuml":"Ï","&Iuml;":"Ï","&ETH":"Ð","&ETH;":"Ð","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Ograve":"Ò","&Ograve;":"Ò","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Otilde":"Õ","&Otilde;":"Õ","&Ouml":"Ö","&Ouml;":"Ö","&times":"×","&times;":"×","&Oslash":"Ø","&Oslash;":"Ø","&Ugrave":"Ù","&Ugrave;":"Ù","&Uacute":"Ú","&Uacute;":"Ú","&Ucirc":"Û","&Ucirc;":"Û","&Uuml":"Ü","&Uuml;":"Ü","&Yacute":"Ý","&Yacute;":"Ý","&THORN":"Þ","&THORN;":"Þ","&szlig":"ß","&szlig;":"ß","&agrave":"à","&agrave;":"à","&aacute":"á","&aacute;":"á","&acirc":"â","&acirc;":"â","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&aring":"å","&aring;":"å","&aelig":"æ","&aelig;":"æ","&ccedil":"ç","&ccedil;":"ç","&egrave":"è","&egrave;":"è","&eacute":"é","&eacute;":"é","&ecirc":"ê","&ecirc;":"ê","&euml":"ë","&euml;":"ë","&igrave":"ì","&igrave;":"ì","&iacute":"í","&iacute;":"í","&icirc":"î","&icirc;":"î","&iuml":"ï","&iuml;":"ï","&eth":"ð","&eth;":"ð","&ntilde":"ñ","&ntilde;":"ñ","&ograve":"ò","&ograve;":"ò","&oacute":"ó","&oacute;":"ó","&ocirc":"ô","&ocirc;":"ô","&otilde":"õ","&otilde;":"õ","&ouml":"ö","&ouml;":"ö","&divide":"÷","&divide;":"÷","&oslash":"ø","&oslash;":"ø","&ugrave":"ù","&ugrave;":"ù","&uacute":"ú","&uacute;":"ú","&ucirc":"û","&ucirc;":"û","&uuml":"ü","&uuml;":"ü","&yacute":"ý","&yacute;":"ý","&thorn":"þ","&thorn;":"þ","&yuml":"ÿ","&yuml;":"ÿ","&quot":'"',"&quot;":'"',"&amp":"&","&amp;":"&","&lt":"<","&lt;":"<","&gt":">","&gt;":">","&OElig;":"Œ","&oelig;":"œ","&Scaron;":"Š","&scaron;":"š","&Yuml;":"Ÿ","&circ;":"ˆ","&tilde;":"˜","&ensp;":" ","&emsp;":" ","&thinsp;":" ","&zwnj;":"‌","&zwj;":"‍","&lrm;":"‎","&rlm;":"‏","&ndash;":"–","&mdash;":"—","&lsquo;":"‘","&rsquo;":"’","&sbquo;":"‚","&ldquo;":"“","&rdquo;":"”","&bdquo;":"„","&dagger;":"†","&Dagger;":"‡","&permil;":"‰","&lsaquo;":"‹","&rsaquo;":"›","&euro;":"€","&fnof;":"ƒ","&Alpha;":"Α","&Beta;":"Β","&Gamma;":"Γ","&Delta;":"Δ","&Epsilon;":"Ε","&Zeta;":"Ζ","&Eta;":"Η","&Theta;":"Θ","&Iota;":"Ι","&Kappa;":"Κ","&Lambda;":"Λ","&Mu;":"Μ","&Nu;":"Ν","&Xi;":"Ξ","&Omicron;":"Ο","&Pi;":"Π","&Rho;":"Ρ","&Sigma;":"Σ","&Tau;":"Τ","&Upsilon;":"Υ","&Phi;":"Φ","&Chi;":"Χ","&Psi;":"Ψ","&Omega;":"Ω","&alpha;":"α","&beta;":"β","&gamma;":"γ","&delta;":"δ","&epsilon;":"ε","&zeta;":"ζ","&eta;":"η","&theta;":"θ","&iota;":"ι","&kappa;":"κ","&lambda;":"λ","&mu;":"μ","&nu;":"ν","&xi;":"ξ","&omicron;":"ο","&pi;":"π","&rho;":"ρ","&sigmaf;":"ς","&sigma;":"σ","&tau;":"τ","&upsilon;":"υ","&phi;":"φ","&chi;":"χ","&psi;":"ψ","&omega;":"ω","&thetasym;":"ϑ","&upsih;":"ϒ","&piv;":"ϖ","&bull;":"•","&hellip;":"…","&prime;":"′","&Prime;":"″","&oline;":"‾","&frasl;":"⁄","&weierp;":"℘","&image;":"ℑ","&real;":"ℜ","&trade;":"™","&alefsym;":"ℵ","&larr;":"←","&uarr;":"↑","&rarr;":"→","&darr;":"↓","&harr;":"↔","&crarr;":"↵","&lArr;":"⇐","&uArr;":"⇑","&rArr;":"⇒","&dArr;":"⇓","&hArr;":"⇔","&forall;":"∀","&part;":"∂","&exist;":"∃","&empty;":"∅","&nabla;":"∇","&isin;":"∈","&notin;":"∉","&ni;":"∋","&prod;":"∏","&sum;":"∑","&minus;":"−","&lowast;":"∗","&radic;":"√","&prop;":"∝","&infin;":"∞","&ang;":"∠","&and;":"∧","&or;":"∨","&cap;":"∩","&cup;":"∪","&int;":"∫","&there4;":"∴","&sim;":"∼","&cong;":"≅","&asymp;":"≈","&ne;":"≠","&equiv;":"≡","&le;":"≤","&ge;":"≥","&sub;":"⊂","&sup;":"⊃","&nsub;":"⊄","&sube;":"⊆","&supe;":"⊇","&oplus;":"⊕","&otimes;":"⊗","&perp;":"⊥","&sdot;":"⋅","&lceil;":"⌈","&rceil;":"⌉","&lfloor;":"⌊","&rfloor;":"⌋","&lang;":"〈","&rang;":"〉","&loz;":"◊","&spades;":"♠","&clubs;":"♣","&hearts;":"♥","&diams;":"♦"},characters:{"'":"&apos;"," ":"&nbsp;","¡":"&iexcl;","¢":"&cent;","£":"&pound;","¤":"&curren;","¥":"&yen;","¦":"&brvbar;","§":"&sect;","¨":"&uml;","©":"&copy;",ª:"&ordf;","«":"&laquo;","¬":"&not;","­":"&shy;","®":"&reg;","¯":"&macr;","°":"&deg;","±":"&plusmn;","²":"&sup2;","³":"&sup3;","´":"&acute;",µ:"&micro;","¶":"&para;","·":"&middot;","¸":"&cedil;","¹":"&sup1;",º:"&ordm;","»":"&raquo;","¼":"&frac14;","½":"&frac12;","¾":"&frac34;","¿":"&iquest;",À:"&Agrave;",Á:"&Aacute;",Â:"&Acirc;",Ã:"&Atilde;",Ä:"&Auml;",Å:"&Aring;",Æ:"&AElig;",Ç:"&Ccedil;",È:"&Egrave;",É:"&Eacute;",Ê:"&Ecirc;",Ë:"&Euml;",Ì:"&Igrave;",Í:"&Iacute;",Î:"&Icirc;",Ï:"&Iuml;",Ð:"&ETH;",Ñ:"&Ntilde;",Ò:"&Ograve;",Ó:"&Oacute;",Ô:"&Ocirc;",Õ:"&Otilde;",Ö:"&Ouml;","×":"&times;",Ø:"&Oslash;",Ù:"&Ugrave;",Ú:"&Uacute;",Û:"&Ucirc;",Ü:"&Uuml;",Ý:"&Yacute;",Þ:"&THORN;",ß:"&szlig;",à:"&agrave;",á:"&aacute;",â:"&acirc;",ã:"&atilde;",ä:"&auml;",å:"&aring;",æ:"&aelig;",ç:"&ccedil;",è:"&egrave;",é:"&eacute;",ê:"&ecirc;",ë:"&euml;",ì:"&igrave;",í:"&iacute;",î:"&icirc;",ï:"&iuml;",ð:"&eth;",ñ:"&ntilde;",ò:"&ograve;",ó:"&oacute;",ô:"&ocirc;",õ:"&otilde;",ö:"&ouml;","÷":"&divide;",ø:"&oslash;",ù:"&ugrave;",ú:"&uacute;",û:"&ucirc;",ü:"&uuml;",ý:"&yacute;",þ:"&thorn;",ÿ:"&yuml;",'"':"&quot;","&":"&amp;","<":"&lt;",">":"&gt;",Œ:"&OElig;",œ:"&oelig;",Š:"&Scaron;",š:"&scaron;",Ÿ:"&Yuml;",ˆ:"&circ;","˜":"&tilde;"," ":"&ensp;"," ":"&emsp;"," ":"&thinsp;","‌":"&zwnj;","‍":"&zwj;","‎":"&lrm;","‏":"&rlm;","–":"&ndash;","—":"&mdash;","‘":"&lsquo;","’":"&rsquo;","‚":"&sbquo;","“":"&ldquo;","”":"&rdquo;","„":"&bdquo;","†":"&dagger;","‡":"&Dagger;","‰":"&permil;","‹":"&lsaquo;","›":"&rsaquo;","€":"&euro;",ƒ:"&fnof;",Α:"&Alpha;",Β:"&Beta;",Γ:"&Gamma;",Δ:"&Delta;",Ε:"&Epsilon;",Ζ:"&Zeta;",Η:"&Eta;",Θ:"&Theta;",Ι:"&Iota;",Κ:"&Kappa;",Λ:"&Lambda;",Μ:"&Mu;",Ν:"&Nu;",Ξ:"&Xi;",Ο:"&Omicron;",Π:"&Pi;",Ρ:"&Rho;",Σ:"&Sigma;",Τ:"&Tau;",Υ:"&Upsilon;",Φ:"&Phi;",Χ:"&Chi;",Ψ:"&Psi;",Ω:"&Omega;",α:"&alpha;",β:"&beta;",γ:"&gamma;",δ:"&delta;",ε:"&epsilon;",ζ:"&zeta;",η:"&eta;",θ:"&theta;",ι:"&iota;",κ:"&kappa;",λ:"&lambda;",μ:"&mu;",ν:"&nu;",ξ:"&xi;",ο:"&omicron;",π:"&pi;",ρ:"&rho;",ς:"&sigmaf;",σ:"&sigma;",τ:"&tau;",υ:"&upsilon;",φ:"&phi;",χ:"&chi;",ψ:"&psi;",ω:"&omega;",ϑ:"&thetasym;",ϒ:"&upsih;",ϖ:"&piv;","•":"&bull;","…":"&hellip;","′":"&prime;","″":"&Prime;","‾":"&oline;","⁄":"&frasl;",℘:"&weierp;",ℑ:"&image;",ℜ:"&real;","™":"&trade;",ℵ:"&alefsym;","←":"&larr;","↑":"&uarr;","→":"&rarr;","↓":"&darr;","↔":"&harr;","↵":"&crarr;","⇐":"&lArr;","⇑":"&uArr;","⇒":"&rArr;","⇓":"&dArr;","⇔":"&hArr;","∀":"&forall;","∂":"&part;","∃":"&exist;","∅":"&empty;","∇":"&nabla;","∈":"&isin;","∉":"&notin;","∋":"&ni;","∏":"&prod;","∑":"&sum;","−":"&minus;","∗":"&lowast;","√":"&radic;","∝":"&prop;","∞":"&infin;","∠":"&ang;","∧":"&and;","∨":"&or;","∩":"&cap;","∪":"&cup;","∫":"&int;","∴":"&there4;","∼":"&sim;","≅":"&cong;","≈":"&asymp;","≠":"&ne;","≡":"&equiv;","≤":"&le;","≥":"&ge;","⊂":"&sub;","⊃":"&sup;","⊄":"&nsub;","⊆":"&sube;","⊇":"&supe;","⊕":"&oplus;","⊗":"&otimes;","⊥":"&perp;","⋅":"&sdot;","⌈":"&lceil;","⌉":"&rceil;","⌊":"&lfloor;","⌋":"&rfloor;","〈":"&lang;","〉":"&rang;","◊":"&loz;","♠":"&spades;","♣":"&clubs;","♥":"&hearts;","♦":"&diams;"}},html5:{entities:{"&AElig":"Æ","&AElig;":"Æ","&AMP":"&","&AMP;":"&","&Aacute":"Á","&Aacute;":"Á","&Abreve;":"Ă","&Acirc":"Â","&Acirc;":"Â","&Acy;":"А","&Afr;":"𝔄","&Agrave":"À","&Agrave;":"À","&Alpha;":"Α","&Amacr;":"Ā","&And;":"⩓","&Aogon;":"Ą","&Aopf;":"𝔸","&ApplyFunction;":"⁡","&Aring":"Å","&Aring;":"Å","&Ascr;":"𝒜","&Assign;":"≔","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Backslash;":"∖","&Barv;":"⫧","&Barwed;":"⌆","&Bcy;":"Б","&Because;":"∵","&Bernoullis;":"ℬ","&Beta;":"Β","&Bfr;":"𝔅","&Bopf;":"𝔹","&Breve;":"˘","&Bscr;":"ℬ","&Bumpeq;":"≎","&CHcy;":"Ч","&COPY":"©","&COPY;":"©","&Cacute;":"Ć","&Cap;":"⋒","&CapitalDifferentialD;":"ⅅ","&Cayleys;":"ℭ","&Ccaron;":"Č","&Ccedil":"Ç","&Ccedil;":"Ç","&Ccirc;":"Ĉ","&Cconint;":"∰","&Cdot;":"Ċ","&Cedilla;":"¸","&CenterDot;":"·","&Cfr;":"ℭ","&Chi;":"Χ","&CircleDot;":"⊙","&CircleMinus;":"⊖","&CirclePlus;":"⊕","&CircleTimes;":"⊗","&ClockwiseContourIntegral;":"∲","&CloseCurlyDoubleQuote;":"”","&CloseCurlyQuote;":"’","&Colon;":"∷","&Colone;":"⩴","&Congruent;":"≡","&Conint;":"∯","&ContourIntegral;":"∮","&Copf;":"ℂ","&Coproduct;":"∐","&CounterClockwiseContourIntegral;":"∳","&Cross;":"⨯","&Cscr;":"𝒞","&Cup;":"⋓","&CupCap;":"≍","&DD;":"ⅅ","&DDotrahd;":"⤑","&DJcy;":"Ђ","&DScy;":"Ѕ","&DZcy;":"Џ","&Dagger;":"‡","&Darr;":"↡","&Dashv;":"⫤","&Dcaron;":"Ď","&Dcy;":"Д","&Del;":"∇","&Delta;":"Δ","&Dfr;":"𝔇","&DiacriticalAcute;":"´","&DiacriticalDot;":"˙","&DiacriticalDoubleAcute;":"˝","&DiacriticalGrave;":"`","&DiacriticalTilde;":"˜","&Diamond;":"⋄","&DifferentialD;":"ⅆ","&Dopf;":"𝔻","&Dot;":"¨","&DotDot;":"⃜","&DotEqual;":"≐","&DoubleContourIntegral;":"∯","&DoubleDot;":"¨","&DoubleDownArrow;":"⇓","&DoubleLeftArrow;":"⇐","&DoubleLeftRightArrow;":"⇔","&DoubleLeftTee;":"⫤","&DoubleLongLeftArrow;":"⟸","&DoubleLongLeftRightArrow;":"⟺","&DoubleLongRightArrow;":"⟹","&DoubleRightArrow;":"⇒","&DoubleRightTee;":"⊨","&DoubleUpArrow;":"⇑","&DoubleUpDownArrow;":"⇕","&DoubleVerticalBar;":"∥","&DownArrow;":"↓","&DownArrowBar;":"⤓","&DownArrowUpArrow;":"⇵","&DownBreve;":"̑","&DownLeftRightVector;":"⥐","&DownLeftTeeVector;":"⥞","&DownLeftVector;":"↽","&DownLeftVectorBar;":"⥖","&DownRightTeeVector;":"⥟","&DownRightVector;":"⇁","&DownRightVectorBar;":"⥗","&DownTee;":"⊤","&DownTeeArrow;":"↧","&Downarrow;":"⇓","&Dscr;":"𝒟","&Dstrok;":"Đ","&ENG;":"Ŋ","&ETH":"Ð","&ETH;":"Ð","&Eacute":"É","&Eacute;":"É","&Ecaron;":"Ě","&Ecirc":"Ê","&Ecirc;":"Ê","&Ecy;":"Э","&Edot;":"Ė","&Efr;":"𝔈","&Egrave":"È","&Egrave;":"È","&Element;":"∈","&Emacr;":"Ē","&EmptySmallSquare;":"◻","&EmptyVerySmallSquare;":"▫","&Eogon;":"Ę","&Eopf;":"𝔼","&Epsilon;":"Ε","&Equal;":"⩵","&EqualTilde;":"≂","&Equilibrium;":"⇌","&Escr;":"ℰ","&Esim;":"⩳","&Eta;":"Η","&Euml":"Ë","&Euml;":"Ë","&Exists;":"∃","&ExponentialE;":"ⅇ","&Fcy;":"Ф","&Ffr;":"𝔉","&FilledSmallSquare;":"◼","&FilledVerySmallSquare;":"▪","&Fopf;":"𝔽","&ForAll;":"∀","&Fouriertrf;":"ℱ","&Fscr;":"ℱ","&GJcy;":"Ѓ","&GT":">","&GT;":">","&Gamma;":"Γ","&Gammad;":"Ϝ","&Gbreve;":"Ğ","&Gcedil;":"Ģ","&Gcirc;":"Ĝ","&Gcy;":"Г","&Gdot;":"Ġ","&Gfr;":"𝔊","&Gg;":"⋙","&Gopf;":"𝔾","&GreaterEqual;":"≥","&GreaterEqualLess;":"⋛","&GreaterFullEqual;":"≧","&GreaterGreater;":"⪢","&GreaterLess;":"≷","&GreaterSlantEqual;":"⩾","&GreaterTilde;":"≳","&Gscr;":"𝒢","&Gt;":"≫","&HARDcy;":"Ъ","&Hacek;":"ˇ","&Hat;":"^","&Hcirc;":"Ĥ","&Hfr;":"ℌ","&HilbertSpace;":"ℋ","&Hopf;":"ℍ","&HorizontalLine;":"─","&Hscr;":"ℋ","&Hstrok;":"Ħ","&HumpDownHump;":"≎","&HumpEqual;":"≏","&IEcy;":"Е","&IJlig;":"Ĳ","&IOcy;":"Ё","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Icy;":"И","&Idot;":"İ","&Ifr;":"ℑ","&Igrave":"Ì","&Igrave;":"Ì","&Im;":"ℑ","&Imacr;":"Ī","&ImaginaryI;":"ⅈ","&Implies;":"⇒","&Int;":"∬","&Integral;":"∫","&Intersection;":"⋂","&InvisibleComma;":"⁣","&InvisibleTimes;":"⁢","&Iogon;":"Į","&Iopf;":"𝕀","&Iota;":"Ι","&Iscr;":"ℐ","&Itilde;":"Ĩ","&Iukcy;":"І","&Iuml":"Ï","&Iuml;":"Ï","&Jcirc;":"Ĵ","&Jcy;":"Й","&Jfr;":"𝔍","&Jopf;":"𝕁","&Jscr;":"𝒥","&Jsercy;":"Ј","&Jukcy;":"Є","&KHcy;":"Х","&KJcy;":"Ќ","&Kappa;":"Κ","&Kcedil;":"Ķ","&Kcy;":"К","&Kfr;":"𝔎","&Kopf;":"𝕂","&Kscr;":"𝒦","&LJcy;":"Љ","&LT":"<","&LT;":"<","&Lacute;":"Ĺ","&Lambda;":"Λ","&Lang;":"⟪","&Laplacetrf;":"ℒ","&Larr;":"↞","&Lcaron;":"Ľ","&Lcedil;":"Ļ","&Lcy;":"Л","&LeftAngleBracket;":"⟨","&LeftArrow;":"←","&LeftArrowBar;":"⇤","&LeftArrowRightArrow;":"⇆","&LeftCeiling;":"⌈","&LeftDoubleBracket;":"⟦","&LeftDownTeeVector;":"⥡","&LeftDownVector;":"⇃","&LeftDownVectorBar;":"⥙","&LeftFloor;":"⌊","&LeftRightArrow;":"↔","&LeftRightVector;":"⥎","&LeftTee;":"⊣","&LeftTeeArrow;":"↤","&LeftTeeVector;":"⥚","&LeftTriangle;":"⊲","&LeftTriangleBar;":"⧏","&LeftTriangleEqual;":"⊴","&LeftUpDownVector;":"⥑","&LeftUpTeeVector;":"⥠","&LeftUpVector;":"↿","&LeftUpVectorBar;":"⥘","&LeftVector;":"↼","&LeftVectorBar;":"⥒","&Leftarrow;":"⇐","&Leftrightarrow;":"⇔","&LessEqualGreater;":"⋚","&LessFullEqual;":"≦","&LessGreater;":"≶","&LessLess;":"⪡","&LessSlantEqual;":"⩽","&LessTilde;":"≲","&Lfr;":"𝔏","&Ll;":"⋘","&Lleftarrow;":"⇚","&Lmidot;":"Ŀ","&LongLeftArrow;":"⟵","&LongLeftRightArrow;":"⟷","&LongRightArrow;":"⟶","&Longleftarrow;":"⟸","&Longleftrightarrow;":"⟺","&Longrightarrow;":"⟹","&Lopf;":"𝕃","&LowerLeftArrow;":"↙","&LowerRightArrow;":"↘","&Lscr;":"ℒ","&Lsh;":"↰","&Lstrok;":"Ł","&Lt;":"≪","&Map;":"⤅","&Mcy;":"М","&MediumSpace;":" ","&Mellintrf;":"ℳ","&Mfr;":"𝔐","&MinusPlus;":"∓","&Mopf;":"𝕄","&Mscr;":"ℳ","&Mu;":"Μ","&NJcy;":"Њ","&Nacute;":"Ń","&Ncaron;":"Ň","&Ncedil;":"Ņ","&Ncy;":"Н","&NegativeMediumSpace;":"​","&NegativeThickSpace;":"​","&NegativeThinSpace;":"​","&NegativeVeryThinSpace;":"​","&NestedGreaterGreater;":"≫","&NestedLessLess;":"≪","&NewLine;":"\n","&Nfr;":"𝔑","&NoBreak;":"⁠","&NonBreakingSpace;":" ","&Nopf;":"ℕ","&Not;":"⫬","&NotCongruent;":"≢","&NotCupCap;":"≭","&NotDoubleVerticalBar;":"∦","&NotElement;":"∉","&NotEqual;":"≠","&NotEqualTilde;":"≂̸","&NotExists;":"∄","&NotGreater;":"≯","&NotGreaterEqual;":"≱","&NotGreaterFullEqual;":"≧̸","&NotGreaterGreater;":"≫̸","&NotGreaterLess;":"≹","&NotGreaterSlantEqual;":"⩾̸","&NotGreaterTilde;":"≵","&NotHumpDownHump;":"≎̸","&NotHumpEqual;":"≏̸","&NotLeftTriangle;":"⋪","&NotLeftTriangleBar;":"⧏̸","&NotLeftTriangleEqual;":"⋬","&NotLess;":"≮","&NotLessEqual;":"≰","&NotLessGreater;":"≸","&NotLessLess;":"≪̸","&NotLessSlantEqual;":"⩽̸","&NotLessTilde;":"≴","&NotNestedGreaterGreater;":"⪢̸","&NotNestedLessLess;":"⪡̸","&NotPrecedes;":"⊀","&NotPrecedesEqual;":"⪯̸","&NotPrecedesSlantEqual;":"⋠","&NotReverseElement;":"∌","&NotRightTriangle;":"⋫","&NotRightTriangleBar;":"⧐̸","&NotRightTriangleEqual;":"⋭","&NotSquareSubset;":"⊏̸","&NotSquareSubsetEqual;":"⋢","&NotSquareSuperset;":"⊐̸","&NotSquareSupersetEqual;":"⋣","&NotSubset;":"⊂⃒","&NotSubsetEqual;":"⊈","&NotSucceeds;":"⊁","&NotSucceedsEqual;":"⪰̸","&NotSucceedsSlantEqual;":"⋡","&NotSucceedsTilde;":"≿̸","&NotSuperset;":"⊃⃒","&NotSupersetEqual;":"⊉","&NotTilde;":"≁","&NotTildeEqual;":"≄","&NotTildeFullEqual;":"≇","&NotTildeTilde;":"≉","&NotVerticalBar;":"∤","&Nscr;":"𝒩","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Nu;":"Ν","&OElig;":"Œ","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Ocy;":"О","&Odblac;":"Ő","&Ofr;":"𝔒","&Ograve":"Ò","&Ograve;":"Ò","&Omacr;":"Ō","&Omega;":"Ω","&Omicron;":"Ο","&Oopf;":"𝕆","&OpenCurlyDoubleQuote;":"“","&OpenCurlyQuote;":"‘","&Or;":"⩔","&Oscr;":"𝒪","&Oslash":"Ø","&Oslash;":"Ø","&Otilde":"Õ","&Otilde;":"Õ","&Otimes;":"⨷","&Ouml":"Ö","&Ouml;":"Ö","&OverBar;":"‾","&OverBrace;":"⏞","&OverBracket;":"⎴","&OverParenthesis;":"⏜","&PartialD;":"∂","&Pcy;":"П","&Pfr;":"𝔓","&Phi;":"Φ","&Pi;":"Π","&PlusMinus;":"±","&Poincareplane;":"ℌ","&Popf;":"ℙ","&Pr;":"⪻","&Precedes;":"≺","&PrecedesEqual;":"⪯","&PrecedesSlantEqual;":"≼","&PrecedesTilde;":"≾","&Prime;":"″","&Product;":"∏","&Proportion;":"∷","&Proportional;":"∝","&Pscr;":"𝒫","&Psi;":"Ψ","&QUOT":'"',"&QUOT;":'"',"&Qfr;":"𝔔","&Qopf;":"ℚ","&Qscr;":"𝒬","&RBarr;":"⤐","&REG":"®","&REG;":"®","&Racute;":"Ŕ","&Rang;":"⟫","&Rarr;":"↠","&Rarrtl;":"⤖","&Rcaron;":"Ř","&Rcedil;":"Ŗ","&Rcy;":"Р","&Re;":"ℜ","&ReverseElement;":"∋","&ReverseEquilibrium;":"⇋","&ReverseUpEquilibrium;":"⥯","&Rfr;":"ℜ","&Rho;":"Ρ","&RightAngleBracket;":"⟩","&RightArrow;":"→","&RightArrowBar;":"⇥","&RightArrowLeftArrow;":"⇄","&RightCeiling;":"⌉","&RightDoubleBracket;":"⟧","&RightDownTeeVector;":"⥝","&RightDownVector;":"⇂","&RightDownVectorBar;":"⥕","&RightFloor;":"⌋","&RightTee;":"⊢","&RightTeeArrow;":"↦","&RightTeeVector;":"⥛","&RightTriangle;":"⊳","&RightTriangleBar;":"⧐","&RightTriangleEqual;":"⊵","&RightUpDownVector;":"⥏","&RightUpTeeVector;":"⥜","&RightUpVector;":"↾","&RightUpVectorBar;":"⥔","&RightVector;":"⇀","&RightVectorBar;":"⥓","&Rightarrow;":"⇒","&Ropf;":"ℝ","&RoundImplies;":"⥰","&Rrightarrow;":"⇛","&Rscr;":"ℛ","&Rsh;":"↱","&RuleDelayed;":"⧴","&SHCHcy;":"Щ","&SHcy;":"Ш","&SOFTcy;":"Ь","&Sacute;":"Ś","&Sc;":"⪼","&Scaron;":"Š","&Scedil;":"Ş","&Scirc;":"Ŝ","&Scy;":"С","&Sfr;":"𝔖","&ShortDownArrow;":"↓","&ShortLeftArrow;":"←","&ShortRightArrow;":"→","&ShortUpArrow;":"↑","&Sigma;":"Σ","&SmallCircle;":"∘","&Sopf;":"𝕊","&Sqrt;":"√","&Square;":"□","&SquareIntersection;":"⊓","&SquareSubset;":"⊏","&SquareSubsetEqual;":"⊑","&SquareSuperset;":"⊐","&SquareSupersetEqual;":"⊒","&SquareUnion;":"⊔","&Sscr;":"𝒮","&Star;":"⋆","&Sub;":"⋐","&Subset;":"⋐","&SubsetEqual;":"⊆","&Succeeds;":"≻","&SucceedsEqual;":"⪰","&SucceedsSlantEqual;":"≽","&SucceedsTilde;":"≿","&SuchThat;":"∋","&Sum;":"∑","&Sup;":"⋑","&Superset;":"⊃","&SupersetEqual;":"⊇","&Supset;":"⋑","&THORN":"Þ","&THORN;":"Þ","&TRADE;":"™","&TSHcy;":"Ћ","&TScy;":"Ц","&Tab;":"\t","&Tau;":"Τ","&Tcaron;":"Ť","&Tcedil;":"Ţ","&Tcy;":"Т","&Tfr;":"𝔗","&Therefore;":"∴","&Theta;":"Θ","&ThickSpace;":"  ","&ThinSpace;":" ","&Tilde;":"∼","&TildeEqual;":"≃","&TildeFullEqual;":"≅","&TildeTilde;":"≈","&Topf;":"𝕋","&TripleDot;":"⃛","&Tscr;":"𝒯","&Tstrok;":"Ŧ","&Uacute":"Ú","&Uacute;":"Ú","&Uarr;":"↟","&Uarrocir;":"⥉","&Ubrcy;":"Ў","&Ubreve;":"Ŭ","&Ucirc":"Û","&Ucirc;":"Û","&Ucy;":"У","&Udblac;":"Ű","&Ufr;":"𝔘","&Ugrave":"Ù","&Ugrave;":"Ù","&Umacr;":"Ū","&UnderBar;":"_","&UnderBrace;":"⏟","&UnderBracket;":"⎵","&UnderParenthesis;":"⏝","&Union;":"⋃","&UnionPlus;":"⊎","&Uogon;":"Ų","&Uopf;":"𝕌","&UpArrow;":"↑","&UpArrowBar;":"⤒","&UpArrowDownArrow;":"⇅","&UpDownArrow;":"↕","&UpEquilibrium;":"⥮","&UpTee;":"⊥","&UpTeeArrow;":"↥","&Uparrow;":"⇑","&Updownarrow;":"⇕","&UpperLeftArrow;":"↖","&UpperRightArrow;":"↗","&Upsi;":"ϒ","&Upsilon;":"Υ","&Uring;":"Ů","&Uscr;":"𝒰","&Utilde;":"Ũ","&Uuml":"Ü","&Uuml;":"Ü","&VDash;":"⊫","&Vbar;":"⫫","&Vcy;":"В","&Vdash;":"⊩","&Vdashl;":"⫦","&Vee;":"⋁","&Verbar;":"‖","&Vert;":"‖","&VerticalBar;":"∣","&VerticalLine;":"|","&VerticalSeparator;":"❘","&VerticalTilde;":"≀","&VeryThinSpace;":" ","&Vfr;":"𝔙","&Vopf;":"𝕍","&Vscr;":"𝒱","&Vvdash;":"⊪","&Wcirc;":"Ŵ","&Wedge;":"⋀","&Wfr;":"𝔚","&Wopf;":"𝕎","&Wscr;":"𝒲","&Xfr;":"𝔛","&Xi;":"Ξ","&Xopf;":"𝕏","&Xscr;":"𝒳","&YAcy;":"Я","&YIcy;":"Ї","&YUcy;":"Ю","&Yacute":"Ý","&Yacute;":"Ý","&Ycirc;":"Ŷ","&Ycy;":"Ы","&Yfr;":"𝔜","&Yopf;":"𝕐","&Yscr;":"𝒴","&Yuml;":"Ÿ","&ZHcy;":"Ж","&Zacute;":"Ź","&Zcaron;":"Ž","&Zcy;":"З","&Zdot;":"Ż","&ZeroWidthSpace;":"​","&Zeta;":"Ζ","&Zfr;":"ℨ","&Zopf;":"ℤ","&Zscr;":"𝒵","&aacute":"á","&aacute;":"á","&abreve;":"ă","&ac;":"∾","&acE;":"∾̳","&acd;":"∿","&acirc":"â","&acirc;":"â","&acute":"´","&acute;":"´","&acy;":"а","&aelig":"æ","&aelig;":"æ","&af;":"⁡","&afr;":"𝔞","&agrave":"à","&agrave;":"à","&alefsym;":"ℵ","&aleph;":"ℵ","&alpha;":"α","&amacr;":"ā","&amalg;":"⨿","&amp":"&","&amp;":"&","&and;":"∧","&andand;":"⩕","&andd;":"⩜","&andslope;":"⩘","&andv;":"⩚","&ang;":"∠","&ange;":"⦤","&angle;":"∠","&angmsd;":"∡","&angmsdaa;":"⦨","&angmsdab;":"⦩","&angmsdac;":"⦪","&angmsdad;":"⦫","&angmsdae;":"⦬","&angmsdaf;":"⦭","&angmsdag;":"⦮","&angmsdah;":"⦯","&angrt;":"∟","&angrtvb;":"⊾","&angrtvbd;":"⦝","&angsph;":"∢","&angst;":"Å","&angzarr;":"⍼","&aogon;":"ą","&aopf;":"𝕒","&ap;":"≈","&apE;":"⩰","&apacir;":"⩯","&ape;":"≊","&apid;":"≋","&apos;":"'","&approx;":"≈","&approxeq;":"≊","&aring":"å","&aring;":"å","&ascr;":"𝒶","&ast;":"*","&asymp;":"≈","&asympeq;":"≍","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&awconint;":"∳","&awint;":"⨑","&bNot;":"⫭","&backcong;":"≌","&backepsilon;":"϶","&backprime;":"‵","&backsim;":"∽","&backsimeq;":"⋍","&barvee;":"⊽","&barwed;":"⌅","&barwedge;":"⌅","&bbrk;":"⎵","&bbrktbrk;":"⎶","&bcong;":"≌","&bcy;":"б","&bdquo;":"„","&becaus;":"∵","&because;":"∵","&bemptyv;":"⦰","&bepsi;":"϶","&bernou;":"ℬ","&beta;":"β","&beth;":"ℶ","&between;":"≬","&bfr;":"𝔟","&bigcap;":"⋂","&bigcirc;":"◯","&bigcup;":"⋃","&bigodot;":"⨀","&bigoplus;":"⨁","&bigotimes;":"⨂","&bigsqcup;":"⨆","&bigstar;":"★","&bigtriangledown;":"▽","&bigtriangleup;":"△","&biguplus;":"⨄","&bigvee;":"⋁","&bigwedge;":"⋀","&bkarow;":"⤍","&blacklozenge;":"⧫","&blacksquare;":"▪","&blacktriangle;":"▴","&blacktriangledown;":"▾","&blacktriangleleft;":"◂","&blacktriangleright;":"▸","&blank;":"␣","&blk12;":"▒","&blk14;":"░","&blk34;":"▓","&block;":"█","&bne;":"=⃥","&bnequiv;":"≡⃥","&bnot;":"⌐","&bopf;":"𝕓","&bot;":"⊥","&bottom;":"⊥","&bowtie;":"⋈","&boxDL;":"╗","&boxDR;":"╔","&boxDl;":"╖","&boxDr;":"╓","&boxH;":"═","&boxHD;":"╦","&boxHU;":"╩","&boxHd;":"╤","&boxHu;":"╧","&boxUL;":"╝","&boxUR;":"╚","&boxUl;":"╜","&boxUr;":"╙","&boxV;":"║","&boxVH;":"╬","&boxVL;":"╣","&boxVR;":"╠","&boxVh;":"╫","&boxVl;":"╢","&boxVr;":"╟","&boxbox;":"⧉","&boxdL;":"╕","&boxdR;":"╒","&boxdl;":"┐","&boxdr;":"┌","&boxh;":"─","&boxhD;":"╥","&boxhU;":"╨","&boxhd;":"┬","&boxhu;":"┴","&boxminus;":"⊟","&boxplus;":"⊞","&boxtimes;":"⊠","&boxuL;":"╛","&boxuR;":"╘","&boxul;":"┘","&boxur;":"└","&boxv;":"│","&boxvH;":"╪","&boxvL;":"╡","&boxvR;":"╞","&boxvh;":"┼","&boxvl;":"┤","&boxvr;":"├","&bprime;":"‵","&breve;":"˘","&brvbar":"¦","&brvbar;":"¦","&bscr;":"𝒷","&bsemi;":"⁏","&bsim;":"∽","&bsime;":"⋍","&bsol;":"\\","&bsolb;":"⧅","&bsolhsub;":"⟈","&bull;":"•","&bullet;":"•","&bump;":"≎","&bumpE;":"⪮","&bumpe;":"≏","&bumpeq;":"≏","&cacute;":"ć","&cap;":"∩","&capand;":"⩄","&capbrcup;":"⩉","&capcap;":"⩋","&capcup;":"⩇","&capdot;":"⩀","&caps;":"∩︀","&caret;":"⁁","&caron;":"ˇ","&ccaps;":"⩍","&ccaron;":"č","&ccedil":"ç","&ccedil;":"ç","&ccirc;":"ĉ","&ccups;":"⩌","&ccupssm;":"⩐","&cdot;":"ċ","&cedil":"¸","&cedil;":"¸","&cemptyv;":"⦲","&cent":"¢","&cent;":"¢","&centerdot;":"·","&cfr;":"𝔠","&chcy;":"ч","&check;":"✓","&checkmark;":"✓","&chi;":"χ","&cir;":"○","&cirE;":"⧃","&circ;":"ˆ","&circeq;":"≗","&circlearrowleft;":"↺","&circlearrowright;":"↻","&circledR;":"®","&circledS;":"Ⓢ","&circledast;":"⊛","&circledcirc;":"⊚","&circleddash;":"⊝","&cire;":"≗","&cirfnint;":"⨐","&cirmid;":"⫯","&cirscir;":"⧂","&clubs;":"♣","&clubsuit;":"♣","&colon;":":","&colone;":"≔","&coloneq;":"≔","&comma;":",","&commat;":"@","&comp;":"∁","&compfn;":"∘","&complement;":"∁","&complexes;":"ℂ","&cong;":"≅","&congdot;":"⩭","&conint;":"∮","&copf;":"𝕔","&coprod;":"∐","&copy":"©","&copy;":"©","&copysr;":"℗","&crarr;":"↵","&cross;":"✗","&cscr;":"𝒸","&csub;":"⫏","&csube;":"⫑","&csup;":"⫐","&csupe;":"⫒","&ctdot;":"⋯","&cudarrl;":"⤸","&cudarrr;":"⤵","&cuepr;":"⋞","&cuesc;":"⋟","&cularr;":"↶","&cularrp;":"⤽","&cup;":"∪","&cupbrcap;":"⩈","&cupcap;":"⩆","&cupcup;":"⩊","&cupdot;":"⊍","&cupor;":"⩅","&cups;":"∪︀","&curarr;":"↷","&curarrm;":"⤼","&curlyeqprec;":"⋞","&curlyeqsucc;":"⋟","&curlyvee;":"⋎","&curlywedge;":"⋏","&curren":"¤","&curren;":"¤","&curvearrowleft;":"↶","&curvearrowright;":"↷","&cuvee;":"⋎","&cuwed;":"⋏","&cwconint;":"∲","&cwint;":"∱","&cylcty;":"⌭","&dArr;":"⇓","&dHar;":"⥥","&dagger;":"†","&daleth;":"ℸ","&darr;":"↓","&dash;":"‐","&dashv;":"⊣","&dbkarow;":"⤏","&dblac;":"˝","&dcaron;":"ď","&dcy;":"д","&dd;":"ⅆ","&ddagger;":"‡","&ddarr;":"⇊","&ddotseq;":"⩷","&deg":"°","&deg;":"°","&delta;":"δ","&demptyv;":"⦱","&dfisht;":"⥿","&dfr;":"𝔡","&dharl;":"⇃","&dharr;":"⇂","&diam;":"⋄","&diamond;":"⋄","&diamondsuit;":"♦","&diams;":"♦","&die;":"¨","&digamma;":"ϝ","&disin;":"⋲","&div;":"÷","&divide":"÷","&divide;":"÷","&divideontimes;":"⋇","&divonx;":"⋇","&djcy;":"ђ","&dlcorn;":"⌞","&dlcrop;":"⌍","&dollar;":"$","&dopf;":"𝕕","&dot;":"˙","&doteq;":"≐","&doteqdot;":"≑","&dotminus;":"∸","&dotplus;":"∔","&dotsquare;":"⊡","&doublebarwedge;":"⌆","&downarrow;":"↓","&downdownarrows;":"⇊","&downharpoonleft;":"⇃","&downharpoonright;":"⇂","&drbkarow;":"⤐","&drcorn;":"⌟","&drcrop;":"⌌","&dscr;":"𝒹","&dscy;":"ѕ","&dsol;":"⧶","&dstrok;":"đ","&dtdot;":"⋱","&dtri;":"▿","&dtrif;":"▾","&duarr;":"⇵","&duhar;":"⥯","&dwangle;":"⦦","&dzcy;":"џ","&dzigrarr;":"⟿","&eDDot;":"⩷","&eDot;":"≑","&eacute":"é","&eacute;":"é","&easter;":"⩮","&ecaron;":"ě","&ecir;":"≖","&ecirc":"ê","&ecirc;":"ê","&ecolon;":"≕","&ecy;":"э","&edot;":"ė","&ee;":"ⅇ","&efDot;":"≒","&efr;":"𝔢","&eg;":"⪚","&egrave":"è","&egrave;":"è","&egs;":"⪖","&egsdot;":"⪘","&el;":"⪙","&elinters;":"⏧","&ell;":"ℓ","&els;":"⪕","&elsdot;":"⪗","&emacr;":"ē","&empty;":"∅","&emptyset;":"∅","&emptyv;":"∅","&emsp13;":" ","&emsp14;":" ","&emsp;":" ","&eng;":"ŋ","&ensp;":" ","&eogon;":"ę","&eopf;":"𝕖","&epar;":"⋕","&eparsl;":"⧣","&eplus;":"⩱","&epsi;":"ε","&epsilon;":"ε","&epsiv;":"ϵ","&eqcirc;":"≖","&eqcolon;":"≕","&eqsim;":"≂","&eqslantgtr;":"⪖","&eqslantless;":"⪕","&equals;":"=","&equest;":"≟","&equiv;":"≡","&equivDD;":"⩸","&eqvparsl;":"⧥","&erDot;":"≓","&erarr;":"⥱","&escr;":"ℯ","&esdot;":"≐","&esim;":"≂","&eta;":"η","&eth":"ð","&eth;":"ð","&euml":"ë","&euml;":"ë","&euro;":"€","&excl;":"!","&exist;":"∃","&expectation;":"ℰ","&exponentiale;":"ⅇ","&fallingdotseq;":"≒","&fcy;":"ф","&female;":"♀","&ffilig;":"ﬃ","&fflig;":"ﬀ","&ffllig;":"ﬄ","&ffr;":"𝔣","&filig;":"ﬁ","&fjlig;":"fj","&flat;":"♭","&fllig;":"ﬂ","&fltns;":"▱","&fnof;":"ƒ","&fopf;":"𝕗","&forall;":"∀","&fork;":"⋔","&forkv;":"⫙","&fpartint;":"⨍","&frac12":"½","&frac12;":"½","&frac13;":"⅓","&frac14":"¼","&frac14;":"¼","&frac15;":"⅕","&frac16;":"⅙","&frac18;":"⅛","&frac23;":"⅔","&frac25;":"⅖","&frac34":"¾","&frac34;":"¾","&frac35;":"⅗","&frac38;":"⅜","&frac45;":"⅘","&frac56;":"⅚","&frac58;":"⅝","&frac78;":"⅞","&frasl;":"⁄","&frown;":"⌢","&fscr;":"𝒻","&gE;":"≧","&gEl;":"⪌","&gacute;":"ǵ","&gamma;":"γ","&gammad;":"ϝ","&gap;":"⪆","&gbreve;":"ğ","&gcirc;":"ĝ","&gcy;":"г","&gdot;":"ġ","&ge;":"≥","&gel;":"⋛","&geq;":"≥","&geqq;":"≧","&geqslant;":"⩾","&ges;":"⩾","&gescc;":"⪩","&gesdot;":"⪀","&gesdoto;":"⪂","&gesdotol;":"⪄","&gesl;":"⋛︀","&gesles;":"⪔","&gfr;":"𝔤","&gg;":"≫","&ggg;":"⋙","&gimel;":"ℷ","&gjcy;":"ѓ","&gl;":"≷","&glE;":"⪒","&gla;":"⪥","&glj;":"⪤","&gnE;":"≩","&gnap;":"⪊","&gnapprox;":"⪊","&gne;":"⪈","&gneq;":"⪈","&gneqq;":"≩","&gnsim;":"⋧","&gopf;":"𝕘","&grave;":"`","&gscr;":"ℊ","&gsim;":"≳","&gsime;":"⪎","&gsiml;":"⪐","&gt":">","&gt;":">","&gtcc;":"⪧","&gtcir;":"⩺","&gtdot;":"⋗","&gtlPar;":"⦕","&gtquest;":"⩼","&gtrapprox;":"⪆","&gtrarr;":"⥸","&gtrdot;":"⋗","&gtreqless;":"⋛","&gtreqqless;":"⪌","&gtrless;":"≷","&gtrsim;":"≳","&gvertneqq;":"≩︀","&gvnE;":"≩︀","&hArr;":"⇔","&hairsp;":" ","&half;":"½","&hamilt;":"ℋ","&hardcy;":"ъ","&harr;":"↔","&harrcir;":"⥈","&harrw;":"↭","&hbar;":"ℏ","&hcirc;":"ĥ","&hearts;":"♥","&heartsuit;":"♥","&hellip;":"…","&hercon;":"⊹","&hfr;":"𝔥","&hksearow;":"⤥","&hkswarow;":"⤦","&hoarr;":"⇿","&homtht;":"∻","&hookleftarrow;":"↩","&hookrightarrow;":"↪","&hopf;":"𝕙","&horbar;":"―","&hscr;":"𝒽","&hslash;":"ℏ","&hstrok;":"ħ","&hybull;":"⁃","&hyphen;":"‐","&iacute":"í","&iacute;":"í","&ic;":"⁣","&icirc":"î","&icirc;":"î","&icy;":"и","&iecy;":"е","&iexcl":"¡","&iexcl;":"¡","&iff;":"⇔","&ifr;":"𝔦","&igrave":"ì","&igrave;":"ì","&ii;":"ⅈ","&iiiint;":"⨌","&iiint;":"∭","&iinfin;":"⧜","&iiota;":"℩","&ijlig;":"ĳ","&imacr;":"ī","&image;":"ℑ","&imagline;":"ℐ","&imagpart;":"ℑ","&imath;":"ı","&imof;":"⊷","&imped;":"Ƶ","&in;":"∈","&incare;":"℅","&infin;":"∞","&infintie;":"⧝","&inodot;":"ı","&int;":"∫","&intcal;":"⊺","&integers;":"ℤ","&intercal;":"⊺","&intlarhk;":"⨗","&intprod;":"⨼","&iocy;":"ё","&iogon;":"į","&iopf;":"𝕚","&iota;":"ι","&iprod;":"⨼","&iquest":"¿","&iquest;":"¿","&iscr;":"𝒾","&isin;":"∈","&isinE;":"⋹","&isindot;":"⋵","&isins;":"⋴","&isinsv;":"⋳","&isinv;":"∈","&it;":"⁢","&itilde;":"ĩ","&iukcy;":"і","&iuml":"ï","&iuml;":"ï","&jcirc;":"ĵ","&jcy;":"й","&jfr;":"𝔧","&jmath;":"ȷ","&jopf;":"𝕛","&jscr;":"𝒿","&jsercy;":"ј","&jukcy;":"є","&kappa;":"κ","&kappav;":"ϰ","&kcedil;":"ķ","&kcy;":"к","&kfr;":"𝔨","&kgreen;":"ĸ","&khcy;":"х","&kjcy;":"ќ","&kopf;":"𝕜","&kscr;":"𝓀","&lAarr;":"⇚","&lArr;":"⇐","&lAtail;":"⤛","&lBarr;":"⤎","&lE;":"≦","&lEg;":"⪋","&lHar;":"⥢","&lacute;":"ĺ","&laemptyv;":"⦴","&lagran;":"ℒ","&lambda;":"λ","&lang;":"⟨","&langd;":"⦑","&langle;":"⟨","&lap;":"⪅","&laquo":"«","&laquo;":"«","&larr;":"←","&larrb;":"⇤","&larrbfs;":"⤟","&larrfs;":"⤝","&larrhk;":"↩","&larrlp;":"↫","&larrpl;":"⤹","&larrsim;":"⥳","&larrtl;":"↢","&lat;":"⪫","&latail;":"⤙","&late;":"⪭","&lates;":"⪭︀","&lbarr;":"⤌","&lbbrk;":"❲","&lbrace;":"{","&lbrack;":"[","&lbrke;":"⦋","&lbrksld;":"⦏","&lbrkslu;":"⦍","&lcaron;":"ľ","&lcedil;":"ļ","&lceil;":"⌈","&lcub;":"{","&lcy;":"л","&ldca;":"⤶","&ldquo;":"“","&ldquor;":"„","&ldrdhar;":"⥧","&ldrushar;":"⥋","&ldsh;":"↲","&le;":"≤","&leftarrow;":"←","&leftarrowtail;":"↢","&leftharpoondown;":"↽","&leftharpoonup;":"↼","&leftleftarrows;":"⇇","&leftrightarrow;":"↔","&leftrightarrows;":"⇆","&leftrightharpoons;":"⇋","&leftrightsquigarrow;":"↭","&leftthreetimes;":"⋋","&leg;":"⋚","&leq;":"≤","&leqq;":"≦","&leqslant;":"⩽","&les;":"⩽","&lescc;":"⪨","&lesdot;":"⩿","&lesdoto;":"⪁","&lesdotor;":"⪃","&lesg;":"⋚︀","&lesges;":"⪓","&lessapprox;":"⪅","&lessdot;":"⋖","&lesseqgtr;":"⋚","&lesseqqgtr;":"⪋","&lessgtr;":"≶","&lesssim;":"≲","&lfisht;":"⥼","&lfloor;":"⌊","&lfr;":"𝔩","&lg;":"≶","&lgE;":"⪑","&lhard;":"↽","&lharu;":"↼","&lharul;":"⥪","&lhblk;":"▄","&ljcy;":"љ","&ll;":"≪","&llarr;":"⇇","&llcorner;":"⌞","&llhard;":"⥫","&lltri;":"◺","&lmidot;":"ŀ","&lmoust;":"⎰","&lmoustache;":"⎰","&lnE;":"≨","&lnap;":"⪉","&lnapprox;":"⪉","&lne;":"⪇","&lneq;":"⪇","&lneqq;":"≨","&lnsim;":"⋦","&loang;":"⟬","&loarr;":"⇽","&lobrk;":"⟦","&longleftarrow;":"⟵","&longleftrightarrow;":"⟷","&longmapsto;":"⟼","&longrightarrow;":"⟶","&looparrowleft;":"↫","&looparrowright;":"↬","&lopar;":"⦅","&lopf;":"𝕝","&loplus;":"⨭","&lotimes;":"⨴","&lowast;":"∗","&lowbar;":"_","&loz;":"◊","&lozenge;":"◊","&lozf;":"⧫","&lpar;":"(","&lparlt;":"⦓","&lrarr;":"⇆","&lrcorner;":"⌟","&lrhar;":"⇋","&lrhard;":"⥭","&lrm;":"‎","&lrtri;":"⊿","&lsaquo;":"‹","&lscr;":"𝓁","&lsh;":"↰","&lsim;":"≲","&lsime;":"⪍","&lsimg;":"⪏","&lsqb;":"[","&lsquo;":"‘","&lsquor;":"‚","&lstrok;":"ł","&lt":"<","&lt;":"<","&ltcc;":"⪦","&ltcir;":"⩹","&ltdot;":"⋖","&lthree;":"⋋","&ltimes;":"⋉","&ltlarr;":"⥶","&ltquest;":"⩻","&ltrPar;":"⦖","&ltri;":"◃","&ltrie;":"⊴","&ltrif;":"◂","&lurdshar;":"⥊","&luruhar;":"⥦","&lvertneqq;":"≨︀","&lvnE;":"≨︀","&mDDot;":"∺","&macr":"¯","&macr;":"¯","&male;":"♂","&malt;":"✠","&maltese;":"✠","&map;":"↦","&mapsto;":"↦","&mapstodown;":"↧","&mapstoleft;":"↤","&mapstoup;":"↥","&marker;":"▮","&mcomma;":"⨩","&mcy;":"м","&mdash;":"—","&measuredangle;":"∡","&mfr;":"𝔪","&mho;":"℧","&micro":"µ","&micro;":"µ","&mid;":"∣","&midast;":"*","&midcir;":"⫰","&middot":"·","&middot;":"·","&minus;":"−","&minusb;":"⊟","&minusd;":"∸","&minusdu;":"⨪","&mlcp;":"⫛","&mldr;":"…","&mnplus;":"∓","&models;":"⊧","&mopf;":"𝕞","&mp;":"∓","&mscr;":"𝓂","&mstpos;":"∾","&mu;":"μ","&multimap;":"⊸","&mumap;":"⊸","&nGg;":"⋙̸","&nGt;":"≫⃒","&nGtv;":"≫̸","&nLeftarrow;":"⇍","&nLeftrightarrow;":"⇎","&nLl;":"⋘̸","&nLt;":"≪⃒","&nLtv;":"≪̸","&nRightarrow;":"⇏","&nVDash;":"⊯","&nVdash;":"⊮","&nabla;":"∇","&nacute;":"ń","&nang;":"∠⃒","&nap;":"≉","&napE;":"⩰̸","&napid;":"≋̸","&napos;":"ŉ","&napprox;":"≉","&natur;":"♮","&natural;":"♮","&naturals;":"ℕ","&nbsp":" ","&nbsp;":" ","&nbump;":"≎̸","&nbumpe;":"≏̸","&ncap;":"⩃","&ncaron;":"ň","&ncedil;":"ņ","&ncong;":"≇","&ncongdot;":"⩭̸","&ncup;":"⩂","&ncy;":"н","&ndash;":"–","&ne;":"≠","&neArr;":"⇗","&nearhk;":"⤤","&nearr;":"↗","&nearrow;":"↗","&nedot;":"≐̸","&nequiv;":"≢","&nesear;":"⤨","&nesim;":"≂̸","&nexist;":"∄","&nexists;":"∄","&nfr;":"𝔫","&ngE;":"≧̸","&nge;":"≱","&ngeq;":"≱","&ngeqq;":"≧̸","&ngeqslant;":"⩾̸","&nges;":"⩾̸","&ngsim;":"≵","&ngt;":"≯","&ngtr;":"≯","&nhArr;":"⇎","&nharr;":"↮","&nhpar;":"⫲","&ni;":"∋","&nis;":"⋼","&nisd;":"⋺","&niv;":"∋","&njcy;":"њ","&nlArr;":"⇍","&nlE;":"≦̸","&nlarr;":"↚","&nldr;":"‥","&nle;":"≰","&nleftarrow;":"↚","&nleftrightarrow;":"↮","&nleq;":"≰","&nleqq;":"≦̸","&nleqslant;":"⩽̸","&nles;":"⩽̸","&nless;":"≮","&nlsim;":"≴","&nlt;":"≮","&nltri;":"⋪","&nltrie;":"⋬","&nmid;":"∤","&nopf;":"𝕟","&not":"¬","&not;":"¬","&notin;":"∉","&notinE;":"⋹̸","&notindot;":"⋵̸","&notinva;":"∉","&notinvb;":"⋷","&notinvc;":"⋶","&notni;":"∌","&notniva;":"∌","&notnivb;":"⋾","&notnivc;":"⋽","&npar;":"∦","&nparallel;":"∦","&nparsl;":"⫽⃥","&npart;":"∂̸","&npolint;":"⨔","&npr;":"⊀","&nprcue;":"⋠","&npre;":"⪯̸","&nprec;":"⊀","&npreceq;":"⪯̸","&nrArr;":"⇏","&nrarr;":"↛","&nrarrc;":"⤳̸","&nrarrw;":"↝̸","&nrightarrow;":"↛","&nrtri;":"⋫","&nrtrie;":"⋭","&nsc;":"⊁","&nsccue;":"⋡","&nsce;":"⪰̸","&nscr;":"𝓃","&nshortmid;":"∤","&nshortparallel;":"∦","&nsim;":"≁","&nsime;":"≄","&nsimeq;":"≄","&nsmid;":"∤","&nspar;":"∦","&nsqsube;":"⋢","&nsqsupe;":"⋣","&nsub;":"⊄","&nsubE;":"⫅̸","&nsube;":"⊈","&nsubset;":"⊂⃒","&nsubseteq;":"⊈","&nsubseteqq;":"⫅̸","&nsucc;":"⊁","&nsucceq;":"⪰̸","&nsup;":"⊅","&nsupE;":"⫆̸","&nsupe;":"⊉","&nsupset;":"⊃⃒","&nsupseteq;":"⊉","&nsupseteqq;":"⫆̸","&ntgl;":"≹","&ntilde":"ñ","&ntilde;":"ñ","&ntlg;":"≸","&ntriangleleft;":"⋪","&ntrianglelefteq;":"⋬","&ntriangleright;":"⋫","&ntrianglerighteq;":"⋭","&nu;":"ν","&num;":"#","&numero;":"№","&numsp;":" ","&nvDash;":"⊭","&nvHarr;":"⤄","&nvap;":"≍⃒","&nvdash;":"⊬","&nvge;":"≥⃒","&nvgt;":">⃒","&nvinfin;":"⧞","&nvlArr;":"⤂","&nvle;":"≤⃒","&nvlt;":"<⃒","&nvltrie;":"⊴⃒","&nvrArr;":"⤃","&nvrtrie;":"⊵⃒","&nvsim;":"∼⃒","&nwArr;":"⇖","&nwarhk;":"⤣","&nwarr;":"↖","&nwarrow;":"↖","&nwnear;":"⤧","&oS;":"Ⓢ","&oacute":"ó","&oacute;":"ó","&oast;":"⊛","&ocir;":"⊚","&ocirc":"ô","&ocirc;":"ô","&ocy;":"о","&odash;":"⊝","&odblac;":"ő","&odiv;":"⨸","&odot;":"⊙","&odsold;":"⦼","&oelig;":"œ","&ofcir;":"⦿","&ofr;":"𝔬","&ogon;":"˛","&ograve":"ò","&ograve;":"ò","&ogt;":"⧁","&ohbar;":"⦵","&ohm;":"Ω","&oint;":"∮","&olarr;":"↺","&olcir;":"⦾","&olcross;":"⦻","&oline;":"‾","&olt;":"⧀","&omacr;":"ō","&omega;":"ω","&omicron;":"ο","&omid;":"⦶","&ominus;":"⊖","&oopf;":"𝕠","&opar;":"⦷","&operp;":"⦹","&oplus;":"⊕","&or;":"∨","&orarr;":"↻","&ord;":"⩝","&order;":"ℴ","&orderof;":"ℴ","&ordf":"ª","&ordf;":"ª","&ordm":"º","&ordm;":"º","&origof;":"⊶","&oror;":"⩖","&orslope;":"⩗","&orv;":"⩛","&oscr;":"ℴ","&oslash":"ø","&oslash;":"ø","&osol;":"⊘","&otilde":"õ","&otilde;":"õ","&otimes;":"⊗","&otimesas;":"⨶","&ouml":"ö","&ouml;":"ö","&ovbar;":"⌽","&par;":"∥","&para":"¶","&para;":"¶","&parallel;":"∥","&parsim;":"⫳","&parsl;":"⫽","&part;":"∂","&pcy;":"п","&percnt;":"%","&period;":".","&permil;":"‰","&perp;":"⊥","&pertenk;":"‱","&pfr;":"𝔭","&phi;":"φ","&phiv;":"ϕ","&phmmat;":"ℳ","&phone;":"☎","&pi;":"π","&pitchfork;":"⋔","&piv;":"ϖ","&planck;":"ℏ","&planckh;":"ℎ","&plankv;":"ℏ","&plus;":"+","&plusacir;":"⨣","&plusb;":"⊞","&pluscir;":"⨢","&plusdo;":"∔","&plusdu;":"⨥","&pluse;":"⩲","&plusmn":"±","&plusmn;":"±","&plussim;":"⨦","&plustwo;":"⨧","&pm;":"±","&pointint;":"⨕","&popf;":"𝕡","&pound":"£","&pound;":"£","&pr;":"≺","&prE;":"⪳","&prap;":"⪷","&prcue;":"≼","&pre;":"⪯","&prec;":"≺","&precapprox;":"⪷","&preccurlyeq;":"≼","&preceq;":"⪯","&precnapprox;":"⪹","&precneqq;":"⪵","&precnsim;":"⋨","&precsim;":"≾","&prime;":"′","&primes;":"ℙ","&prnE;":"⪵","&prnap;":"⪹","&prnsim;":"⋨","&prod;":"∏","&profalar;":"⌮","&profline;":"⌒","&profsurf;":"⌓","&prop;":"∝","&propto;":"∝","&prsim;":"≾","&prurel;":"⊰","&pscr;":"𝓅","&psi;":"ψ","&puncsp;":" ","&qfr;":"𝔮","&qint;":"⨌","&qopf;":"𝕢","&qprime;":"⁗","&qscr;":"𝓆","&quaternions;":"ℍ","&quatint;":"⨖","&quest;":"?","&questeq;":"≟","&quot":'"',"&quot;":'"',"&rAarr;":"⇛","&rArr;":"⇒","&rAtail;":"⤜","&rBarr;":"⤏","&rHar;":"⥤","&race;":"∽̱","&racute;":"ŕ","&radic;":"√","&raemptyv;":"⦳","&rang;":"⟩","&rangd;":"⦒","&range;":"⦥","&rangle;":"⟩","&raquo":"»","&raquo;":"»","&rarr;":"→","&rarrap;":"⥵","&rarrb;":"⇥","&rarrbfs;":"⤠","&rarrc;":"⤳","&rarrfs;":"⤞","&rarrhk;":"↪","&rarrlp;":"↬","&rarrpl;":"⥅","&rarrsim;":"⥴","&rarrtl;":"↣","&rarrw;":"↝","&ratail;":"⤚","&ratio;":"∶","&rationals;":"ℚ","&rbarr;":"⤍","&rbbrk;":"❳","&rbrace;":"}","&rbrack;":"]","&rbrke;":"⦌","&rbrksld;":"⦎","&rbrkslu;":"⦐","&rcaron;":"ř","&rcedil;":"ŗ","&rceil;":"⌉","&rcub;":"}","&rcy;":"р","&rdca;":"⤷","&rdldhar;":"⥩","&rdquo;":"”","&rdquor;":"”","&rdsh;":"↳","&real;":"ℜ","&realine;":"ℛ","&realpart;":"ℜ","&reals;":"ℝ","&rect;":"▭","&reg":"®","&reg;":"®","&rfisht;":"⥽","&rfloor;":"⌋","&rfr;":"𝔯","&rhard;":"⇁","&rharu;":"⇀","&rharul;":"⥬","&rho;":"ρ","&rhov;":"ϱ","&rightarrow;":"→","&rightarrowtail;":"↣","&rightharpoondown;":"⇁","&rightharpoonup;":"⇀","&rightleftarrows;":"⇄","&rightleftharpoons;":"⇌","&rightrightarrows;":"⇉","&rightsquigarrow;":"↝","&rightthreetimes;":"⋌","&ring;":"˚","&risingdotseq;":"≓","&rlarr;":"⇄","&rlhar;":"⇌","&rlm;":"‏","&rmoust;":"⎱","&rmoustache;":"⎱","&rnmid;":"⫮","&roang;":"⟭","&roarr;":"⇾","&robrk;":"⟧","&ropar;":"⦆","&ropf;":"𝕣","&roplus;":"⨮","&rotimes;":"⨵","&rpar;":")","&rpargt;":"⦔","&rppolint;":"⨒","&rrarr;":"⇉","&rsaquo;":"›","&rscr;":"𝓇","&rsh;":"↱","&rsqb;":"]","&rsquo;":"’","&rsquor;":"’","&rthree;":"⋌","&rtimes;":"⋊","&rtri;":"▹","&rtrie;":"⊵","&rtrif;":"▸","&rtriltri;":"⧎","&ruluhar;":"⥨","&rx;":"℞","&sacute;":"ś","&sbquo;":"‚","&sc;":"≻","&scE;":"⪴","&scap;":"⪸","&scaron;":"š","&sccue;":"≽","&sce;":"⪰","&scedil;":"ş","&scirc;":"ŝ","&scnE;":"⪶","&scnap;":"⪺","&scnsim;":"⋩","&scpolint;":"⨓","&scsim;":"≿","&scy;":"с","&sdot;":"⋅","&sdotb;":"⊡","&sdote;":"⩦","&seArr;":"⇘","&searhk;":"⤥","&searr;":"↘","&searrow;":"↘","&sect":"§","&sect;":"§","&semi;":";","&seswar;":"⤩","&setminus;":"∖","&setmn;":"∖","&sext;":"✶","&sfr;":"𝔰","&sfrown;":"⌢","&sharp;":"♯","&shchcy;":"щ","&shcy;":"ш","&shortmid;":"∣","&shortparallel;":"∥","&shy":"­","&shy;":"­","&sigma;":"σ","&sigmaf;":"ς","&sigmav;":"ς","&sim;":"∼","&simdot;":"⩪","&sime;":"≃","&simeq;":"≃","&simg;":"⪞","&simgE;":"⪠","&siml;":"⪝","&simlE;":"⪟","&simne;":"≆","&simplus;":"⨤","&simrarr;":"⥲","&slarr;":"←","&smallsetminus;":"∖","&smashp;":"⨳","&smeparsl;":"⧤","&smid;":"∣","&smile;":"⌣","&smt;":"⪪","&smte;":"⪬","&smtes;":"⪬︀","&softcy;":"ь","&sol;":"/","&solb;":"⧄","&solbar;":"⌿","&sopf;":"𝕤","&spades;":"♠","&spadesuit;":"♠","&spar;":"∥","&sqcap;":"⊓","&sqcaps;":"⊓︀","&sqcup;":"⊔","&sqcups;":"⊔︀","&sqsub;":"⊏","&sqsube;":"⊑","&sqsubset;":"⊏","&sqsubseteq;":"⊑","&sqsup;":"⊐","&sqsupe;":"⊒","&sqsupset;":"⊐","&sqsupseteq;":"⊒","&squ;":"□","&square;":"□","&squarf;":"▪","&squf;":"▪","&srarr;":"→","&sscr;":"𝓈","&ssetmn;":"∖","&ssmile;":"⌣","&sstarf;":"⋆","&star;":"☆","&starf;":"★","&straightepsilon;":"ϵ","&straightphi;":"ϕ","&strns;":"¯","&sub;":"⊂","&subE;":"⫅","&subdot;":"⪽","&sube;":"⊆","&subedot;":"⫃","&submult;":"⫁","&subnE;":"⫋","&subne;":"⊊","&subplus;":"⪿","&subrarr;":"⥹","&subset;":"⊂","&subseteq;":"⊆","&subseteqq;":"⫅","&subsetneq;":"⊊","&subsetneqq;":"⫋","&subsim;":"⫇","&subsub;":"⫕","&subsup;":"⫓","&succ;":"≻","&succapprox;":"⪸","&succcurlyeq;":"≽","&succeq;":"⪰","&succnapprox;":"⪺","&succneqq;":"⪶","&succnsim;":"⋩","&succsim;":"≿","&sum;":"∑","&sung;":"♪","&sup1":"¹","&sup1;":"¹","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&sup;":"⊃","&supE;":"⫆","&supdot;":"⪾","&supdsub;":"⫘","&supe;":"⊇","&supedot;":"⫄","&suphsol;":"⟉","&suphsub;":"⫗","&suplarr;":"⥻","&supmult;":"⫂","&supnE;":"⫌","&supne;":"⊋","&supplus;":"⫀","&supset;":"⊃","&supseteq;":"⊇","&supseteqq;":"⫆","&supsetneq;":"⊋","&supsetneqq;":"⫌","&supsim;":"⫈","&supsub;":"⫔","&supsup;":"⫖","&swArr;":"⇙","&swarhk;":"⤦","&swarr;":"↙","&swarrow;":"↙","&swnwar;":"⤪","&szlig":"ß","&szlig;":"ß","&target;":"⌖","&tau;":"τ","&tbrk;":"⎴","&tcaron;":"ť","&tcedil;":"ţ","&tcy;":"т","&tdot;":"⃛","&telrec;":"⌕","&tfr;":"𝔱","&there4;":"∴","&therefore;":"∴","&theta;":"θ","&thetasym;":"ϑ","&thetav;":"ϑ","&thickapprox;":"≈","&thicksim;":"∼","&thinsp;":" ","&thkap;":"≈","&thksim;":"∼","&thorn":"þ","&thorn;":"þ","&tilde;":"˜","&times":"×","&times;":"×","&timesb;":"⊠","&timesbar;":"⨱","&timesd;":"⨰","&tint;":"∭","&toea;":"⤨","&top;":"⊤","&topbot;":"⌶","&topcir;":"⫱","&topf;":"𝕥","&topfork;":"⫚","&tosa;":"⤩","&tprime;":"‴","&trade;":"™","&triangle;":"▵","&triangledown;":"▿","&triangleleft;":"◃","&trianglelefteq;":"⊴","&triangleq;":"≜","&triangleright;":"▹","&trianglerighteq;":"⊵","&tridot;":"◬","&trie;":"≜","&triminus;":"⨺","&triplus;":"⨹","&trisb;":"⧍","&tritime;":"⨻","&trpezium;":"⏢","&tscr;":"𝓉","&tscy;":"ц","&tshcy;":"ћ","&tstrok;":"ŧ","&twixt;":"≬","&twoheadleftarrow;":"↞","&twoheadrightarrow;":"↠","&uArr;":"⇑","&uHar;":"⥣","&uacute":"ú","&uacute;":"ú","&uarr;":"↑","&ubrcy;":"ў","&ubreve;":"ŭ","&ucirc":"û","&ucirc;":"û","&ucy;":"у","&udarr;":"⇅","&udblac;":"ű","&udhar;":"⥮","&ufisht;":"⥾","&ufr;":"𝔲","&ugrave":"ù","&ugrave;":"ù","&uharl;":"↿","&uharr;":"↾","&uhblk;":"▀","&ulcorn;":"⌜","&ulcorner;":"⌜","&ulcrop;":"⌏","&ultri;":"◸","&umacr;":"ū","&uml":"¨","&uml;":"¨","&uogon;":"ų","&uopf;":"𝕦","&uparrow;":"↑","&updownarrow;":"↕","&upharpoonleft;":"↿","&upharpoonright;":"↾","&uplus;":"⊎","&upsi;":"υ","&upsih;":"ϒ","&upsilon;":"υ","&upuparrows;":"⇈","&urcorn;":"⌝","&urcorner;":"⌝","&urcrop;":"⌎","&uring;":"ů","&urtri;":"◹","&uscr;":"𝓊","&utdot;":"⋰","&utilde;":"ũ","&utri;":"▵","&utrif;":"▴","&uuarr;":"⇈","&uuml":"ü","&uuml;":"ü","&uwangle;":"⦧","&vArr;":"⇕","&vBar;":"⫨","&vBarv;":"⫩","&vDash;":"⊨","&vangrt;":"⦜","&varepsilon;":"ϵ","&varkappa;":"ϰ","&varnothing;":"∅","&varphi;":"ϕ","&varpi;":"ϖ","&varpropto;":"∝","&varr;":"↕","&varrho;":"ϱ","&varsigma;":"ς","&varsubsetneq;":"⊊︀","&varsubsetneqq;":"⫋︀","&varsupsetneq;":"⊋︀","&varsupsetneqq;":"⫌︀","&vartheta;":"ϑ","&vartriangleleft;":"⊲","&vartriangleright;":"⊳","&vcy;":"в","&vdash;":"⊢","&vee;":"∨","&veebar;":"⊻","&veeeq;":"≚","&vellip;":"⋮","&verbar;":"|","&vert;":"|","&vfr;":"𝔳","&vltri;":"⊲","&vnsub;":"⊂⃒","&vnsup;":"⊃⃒","&vopf;":"𝕧","&vprop;":"∝","&vrtri;":"⊳","&vscr;":"𝓋","&vsubnE;":"⫋︀","&vsubne;":"⊊︀","&vsupnE;":"⫌︀","&vsupne;":"⊋︀","&vzigzag;":"⦚","&wcirc;":"ŵ","&wedbar;":"⩟","&wedge;":"∧","&wedgeq;":"≙","&weierp;":"℘","&wfr;":"𝔴","&wopf;":"𝕨","&wp;":"℘","&wr;":"≀","&wreath;":"≀","&wscr;":"𝓌","&xcap;":"⋂","&xcirc;":"◯","&xcup;":"⋃","&xdtri;":"▽","&xfr;":"𝔵","&xhArr;":"⟺","&xharr;":"⟷","&xi;":"ξ","&xlArr;":"⟸","&xlarr;":"⟵","&xmap;":"⟼","&xnis;":"⋻","&xodot;":"⨀","&xopf;":"𝕩","&xoplus;":"⨁","&xotime;":"⨂","&xrArr;":"⟹","&xrarr;":"⟶","&xscr;":"𝓍","&xsqcup;":"⨆","&xuplus;":"⨄","&xutri;":"△","&xvee;":"⋁","&xwedge;":"⋀","&yacute":"ý","&yacute;":"ý","&yacy;":"я","&ycirc;":"ŷ","&ycy;":"ы","&yen":"¥","&yen;":"¥","&yfr;":"𝔶","&yicy;":"ї","&yopf;":"𝕪","&yscr;":"𝓎","&yucy;":"ю","&yuml":"ÿ","&yuml;":"ÿ","&zacute;":"ź","&zcaron;":"ž","&zcy;":"з","&zdot;":"ż","&zeetrf;":"ℨ","&zeta;":"ζ","&zfr;":"𝔷","&zhcy;":"ж","&zigrarr;":"⇝","&zopf;":"𝕫","&zscr;":"𝓏","&zwj;":"‍","&zwnj;":"‌"},characters:{Æ:"&AElig;","&":"&amp;",Á:"&Aacute;",Ă:"&Abreve;",Â:"&Acirc;",А:"&Acy;",𝔄:"&Afr;",À:"&Agrave;",Α:"&Alpha;",Ā:"&Amacr;","⩓":"&And;",Ą:"&Aogon;",𝔸:"&Aopf;","⁡":"&af;",Å:"&angst;",𝒜:"&Ascr;","≔":"&coloneq;",Ã:"&Atilde;",Ä:"&Auml;","∖":"&ssetmn;","⫧":"&Barv;","⌆":"&doublebarwedge;",Б:"&Bcy;","∵":"&because;",ℬ:"&bernou;",Β:"&Beta;",𝔅:"&Bfr;",𝔹:"&Bopf;","˘":"&breve;","≎":"&bump;",Ч:"&CHcy;","©":"&copy;",Ć:"&Cacute;","⋒":"&Cap;",ⅅ:"&DD;",ℭ:"&Cfr;",Č:"&Ccaron;",Ç:"&Ccedil;",Ĉ:"&Ccirc;","∰":"&Cconint;",Ċ:"&Cdot;","¸":"&cedil;","·":"&middot;",Χ:"&Chi;","⊙":"&odot;","⊖":"&ominus;","⊕":"&oplus;","⊗":"&otimes;","∲":"&cwconint;","”":"&rdquor;","’":"&rsquor;","∷":"&Proportion;","⩴":"&Colone;","≡":"&equiv;","∯":"&DoubleContourIntegral;","∮":"&oint;",ℂ:"&complexes;","∐":"&coprod;","∳":"&awconint;","⨯":"&Cross;",𝒞:"&Cscr;","⋓":"&Cup;","≍":"&asympeq;","⤑":"&DDotrahd;",Ђ:"&DJcy;",Ѕ:"&DScy;",Џ:"&DZcy;","‡":"&ddagger;","↡":"&Darr;","⫤":"&DoubleLeftTee;",Ď:"&Dcaron;",Д:"&Dcy;","∇":"&nabla;",Δ:"&Delta;",𝔇:"&Dfr;","´":"&acute;","˙":"&dot;","˝":"&dblac;","`":"&grave;","˜":"&tilde;","⋄":"&diamond;",ⅆ:"&dd;",𝔻:"&Dopf;","¨":"&uml;","⃜":"&DotDot;","≐":"&esdot;","⇓":"&dArr;","⇐":"&lArr;","⇔":"&iff;","⟸":"&xlArr;","⟺":"&xhArr;","⟹":"&xrArr;","⇒":"&rArr;","⊨":"&vDash;","⇑":"&uArr;","⇕":"&vArr;","∥":"&spar;","↓":"&downarrow;","⤓":"&DownArrowBar;","⇵":"&duarr;","̑":"&DownBreve;","⥐":"&DownLeftRightVector;","⥞":"&DownLeftTeeVector;","↽":"&lhard;","⥖":"&DownLeftVectorBar;","⥟":"&DownRightTeeVector;","⇁":"&rightharpoondown;","⥗":"&DownRightVectorBar;","⊤":"&top;","↧":"&mapstodown;",𝒟:"&Dscr;",Đ:"&Dstrok;",Ŋ:"&ENG;",Ð:"&ETH;",É:"&Eacute;",Ě:"&Ecaron;",Ê:"&Ecirc;",Э:"&Ecy;",Ė:"&Edot;",𝔈:"&Efr;",È:"&Egrave;","∈":"&isinv;",Ē:"&Emacr;","◻":"&EmptySmallSquare;","▫":"&EmptyVerySmallSquare;",Ę:"&Eogon;",𝔼:"&Eopf;",Ε:"&Epsilon;","⩵":"&Equal;","≂":"&esim;","⇌":"&rlhar;",ℰ:"&expectation;","⩳":"&Esim;",Η:"&Eta;",Ë:"&Euml;","∃":"&exist;",ⅇ:"&exponentiale;",Ф:"&Fcy;",𝔉:"&Ffr;","◼":"&FilledSmallSquare;","▪":"&squf;",𝔽:"&Fopf;","∀":"&forall;",ℱ:"&Fscr;",Ѓ:"&GJcy;",">":"&gt;",Γ:"&Gamma;",Ϝ:"&Gammad;",Ğ:"&Gbreve;",Ģ:"&Gcedil;",Ĝ:"&Gcirc;",Г:"&Gcy;",Ġ:"&Gdot;",𝔊:"&Gfr;","⋙":"&ggg;",𝔾:"&Gopf;","≥":"&geq;","⋛":"&gtreqless;","≧":"&geqq;","⪢":"&GreaterGreater;","≷":"&gtrless;","⩾":"&ges;","≳":"&gtrsim;",𝒢:"&Gscr;","≫":"&gg;",Ъ:"&HARDcy;",ˇ:"&caron;","^":"&Hat;",Ĥ:"&Hcirc;",ℌ:"&Poincareplane;",ℋ:"&hamilt;",ℍ:"&quaternions;","─":"&boxh;",Ħ:"&Hstrok;","≏":"&bumpeq;",Е:"&IEcy;",Ĳ:"&IJlig;",Ё:"&IOcy;",Í:"&Iacute;",Î:"&Icirc;",И:"&Icy;",İ:"&Idot;",ℑ:"&imagpart;",Ì:"&Igrave;",Ī:"&Imacr;",ⅈ:"&ii;","∬":"&Int;","∫":"&int;","⋂":"&xcap;","⁣":"&ic;","⁢":"&it;",Į:"&Iogon;",𝕀:"&Iopf;",Ι:"&Iota;",ℐ:"&imagline;",Ĩ:"&Itilde;",І:"&Iukcy;",Ï:"&Iuml;",Ĵ:"&Jcirc;",Й:"&Jcy;",𝔍:"&Jfr;",𝕁:"&Jopf;",𝒥:"&Jscr;",Ј:"&Jsercy;",Є:"&Jukcy;",Х:"&KHcy;",Ќ:"&KJcy;",Κ:"&Kappa;",Ķ:"&Kcedil;",К:"&Kcy;",𝔎:"&Kfr;",𝕂:"&Kopf;",𝒦:"&Kscr;",Љ:"&LJcy;","<":"&lt;",Ĺ:"&Lacute;",Λ:"&Lambda;","⟪":"&Lang;",ℒ:"&lagran;","↞":"&twoheadleftarrow;",Ľ:"&Lcaron;",Ļ:"&Lcedil;",Л:"&Lcy;","⟨":"&langle;","←":"&slarr;","⇤":"&larrb;","⇆":"&lrarr;","⌈":"&lceil;","⟦":"&lobrk;","⥡":"&LeftDownTeeVector;","⇃":"&downharpoonleft;","⥙":"&LeftDownVectorBar;","⌊":"&lfloor;","↔":"&leftrightarrow;","⥎":"&LeftRightVector;","⊣":"&dashv;","↤":"&mapstoleft;","⥚":"&LeftTeeVector;","⊲":"&vltri;","⧏":"&LeftTriangleBar;","⊴":"&trianglelefteq;","⥑":"&LeftUpDownVector;","⥠":"&LeftUpTeeVector;","↿":"&upharpoonleft;","⥘":"&LeftUpVectorBar;","↼":"&lharu;","⥒":"&LeftVectorBar;","⋚":"&lesseqgtr;","≦":"&leqq;","≶":"&lg;","⪡":"&LessLess;","⩽":"&les;","≲":"&lsim;",𝔏:"&Lfr;","⋘":"&Ll;","⇚":"&lAarr;",Ŀ:"&Lmidot;","⟵":"&xlarr;","⟷":"&xharr;","⟶":"&xrarr;",𝕃:"&Lopf;","↙":"&swarrow;","↘":"&searrow;","↰":"&lsh;",Ł:"&Lstrok;","≪":"&ll;","⤅":"&Map;",М:"&Mcy;"," ":"&MediumSpace;",ℳ:"&phmmat;",𝔐:"&Mfr;","∓":"&mp;",𝕄:"&Mopf;",Μ:"&Mu;",Њ:"&NJcy;",Ń:"&Nacute;",Ň:"&Ncaron;",Ņ:"&Ncedil;",Н:"&Ncy;","​":"&ZeroWidthSpace;","\n":"&NewLine;",𝔑:"&Nfr;","⁠":"&NoBreak;"," ":"&nbsp;",ℕ:"&naturals;","⫬":"&Not;","≢":"&nequiv;","≭":"&NotCupCap;","∦":"&nspar;","∉":"&notinva;","≠":"&ne;","≂̸":"&nesim;","∄":"&nexists;","≯":"&ngtr;","≱":"&ngeq;","≧̸":"&ngeqq;","≫̸":"&nGtv;","≹":"&ntgl;","⩾̸":"&nges;","≵":"&ngsim;","≎̸":"&nbump;","≏̸":"&nbumpe;","⋪":"&ntriangleleft;","⧏̸":"&NotLeftTriangleBar;","⋬":"&ntrianglelefteq;","≮":"&nlt;","≰":"&nleq;","≸":"&ntlg;","≪̸":"&nLtv;","⩽̸":"&nles;","≴":"&nlsim;","⪢̸":"&NotNestedGreaterGreater;","⪡̸":"&NotNestedLessLess;","⊀":"&nprec;","⪯̸":"&npreceq;","⋠":"&nprcue;","∌":"&notniva;","⋫":"&ntriangleright;","⧐̸":"&NotRightTriangleBar;","⋭":"&ntrianglerighteq;","⊏̸":"&NotSquareSubset;","⋢":"&nsqsube;","⊐̸":"&NotSquareSuperset;","⋣":"&nsqsupe;","⊂⃒":"&vnsub;","⊈":"&nsubseteq;","⊁":"&nsucc;","⪰̸":"&nsucceq;","⋡":"&nsccue;","≿̸":"&NotSucceedsTilde;","⊃⃒":"&vnsup;","⊉":"&nsupseteq;","≁":"&nsim;","≄":"&nsimeq;","≇":"&ncong;","≉":"&napprox;","∤":"&nsmid;",𝒩:"&Nscr;",Ñ:"&Ntilde;",Ν:"&Nu;",Œ:"&OElig;",Ó:"&Oacute;",Ô:"&Ocirc;",О:"&Ocy;",Ő:"&Odblac;",𝔒:"&Ofr;",Ò:"&Ograve;",Ō:"&Omacr;",Ω:"&ohm;",Ο:"&Omicron;",𝕆:"&Oopf;","“":"&ldquo;","‘":"&lsquo;","⩔":"&Or;",𝒪:"&Oscr;",Ø:"&Oslash;",Õ:"&Otilde;","⨷":"&Otimes;",Ö:"&Ouml;","‾":"&oline;","⏞":"&OverBrace;","⎴":"&tbrk;","⏜":"&OverParenthesis;","∂":"&part;",П:"&Pcy;",𝔓:"&Pfr;",Φ:"&Phi;",Π:"&Pi;","±":"&pm;",ℙ:"&primes;","⪻":"&Pr;","≺":"&prec;","⪯":"&preceq;","≼":"&preccurlyeq;","≾":"&prsim;","″":"&Prime;","∏":"&prod;","∝":"&vprop;",𝒫:"&Pscr;",Ψ:"&Psi;",'"':"&quot;",𝔔:"&Qfr;",ℚ:"&rationals;",𝒬:"&Qscr;","⤐":"&drbkarow;","®":"&reg;",Ŕ:"&Racute;","⟫":"&Rang;","↠":"&twoheadrightarrow;","⤖":"&Rarrtl;",Ř:"&Rcaron;",Ŗ:"&Rcedil;",Р:"&Rcy;",ℜ:"&realpart;","∋":"&niv;","⇋":"&lrhar;","⥯":"&duhar;",Ρ:"&Rho;","⟩":"&rangle;","→":"&srarr;","⇥":"&rarrb;","⇄":"&rlarr;","⌉":"&rceil;","⟧":"&robrk;","⥝":"&RightDownTeeVector;","⇂":"&downharpoonright;","⥕":"&RightDownVectorBar;","⌋":"&rfloor;","⊢":"&vdash;","↦":"&mapsto;","⥛":"&RightTeeVector;","⊳":"&vrtri;","⧐":"&RightTriangleBar;","⊵":"&trianglerighteq;","⥏":"&RightUpDownVector;","⥜":"&RightUpTeeVector;","↾":"&upharpoonright;","⥔":"&RightUpVectorBar;","⇀":"&rightharpoonup;","⥓":"&RightVectorBar;",ℝ:"&reals;","⥰":"&RoundImplies;","⇛":"&rAarr;",ℛ:"&realine;","↱":"&rsh;","⧴":"&RuleDelayed;",Щ:"&SHCHcy;",Ш:"&SHcy;",Ь:"&SOFTcy;",Ś:"&Sacute;","⪼":"&Sc;",Š:"&Scaron;",Ş:"&Scedil;",Ŝ:"&Scirc;",С:"&Scy;",𝔖:"&Sfr;","↑":"&uparrow;",Σ:"&Sigma;","∘":"&compfn;",𝕊:"&Sopf;","√":"&radic;","□":"&square;","⊓":"&sqcap;","⊏":"&sqsubset;","⊑":"&sqsubseteq;","⊐":"&sqsupset;","⊒":"&sqsupseteq;","⊔":"&sqcup;",𝒮:"&Sscr;","⋆":"&sstarf;","⋐":"&Subset;","⊆":"&subseteq;","≻":"&succ;","⪰":"&succeq;","≽":"&succcurlyeq;","≿":"&succsim;","∑":"&sum;","⋑":"&Supset;","⊃":"&supset;","⊇":"&supseteq;",Þ:"&THORN;","™":"&trade;",Ћ:"&TSHcy;",Ц:"&TScy;","\t":"&Tab;",Τ:"&Tau;",Ť:"&Tcaron;",Ţ:"&Tcedil;",Т:"&Tcy;",𝔗:"&Tfr;","∴":"&therefore;",Θ:"&Theta;","  ":"&ThickSpace;"," ":"&thinsp;","∼":"&thksim;","≃":"&simeq;","≅":"&cong;","≈":"&thkap;",𝕋:"&Topf;","⃛":"&tdot;",𝒯:"&Tscr;",Ŧ:"&Tstrok;",Ú:"&Uacute;","↟":"&Uarr;","⥉":"&Uarrocir;",Ў:"&Ubrcy;",Ŭ:"&Ubreve;",Û:"&Ucirc;",У:"&Ucy;",Ű:"&Udblac;",𝔘:"&Ufr;",Ù:"&Ugrave;",Ū:"&Umacr;",_:"&lowbar;","⏟":"&UnderBrace;","⎵":"&bbrk;","⏝":"&UnderParenthesis;","⋃":"&xcup;","⊎":"&uplus;",Ų:"&Uogon;",𝕌:"&Uopf;","⤒":"&UpArrowBar;","⇅":"&udarr;","↕":"&varr;","⥮":"&udhar;","⊥":"&perp;","↥":"&mapstoup;","↖":"&nwarrow;","↗":"&nearrow;",ϒ:"&upsih;",Υ:"&Upsilon;",Ů:"&Uring;",𝒰:"&Uscr;",Ũ:"&Utilde;",Ü:"&Uuml;","⊫":"&VDash;","⫫":"&Vbar;",В:"&Vcy;","⊩":"&Vdash;","⫦":"&Vdashl;","⋁":"&xvee;","‖":"&Vert;","∣":"&smid;","|":"&vert;","❘":"&VerticalSeparator;","≀":"&wreath;"," ":"&hairsp;",𝔙:"&Vfr;",𝕍:"&Vopf;",𝒱:"&Vscr;","⊪":"&Vvdash;",Ŵ:"&Wcirc;","⋀":"&xwedge;",𝔚:"&Wfr;",𝕎:"&Wopf;",𝒲:"&Wscr;",𝔛:"&Xfr;",Ξ:"&Xi;",𝕏:"&Xopf;",𝒳:"&Xscr;",Я:"&YAcy;",Ї:"&YIcy;",Ю:"&YUcy;",Ý:"&Yacute;",Ŷ:"&Ycirc;",Ы:"&Ycy;",𝔜:"&Yfr;",𝕐:"&Yopf;",𝒴:"&Yscr;",Ÿ:"&Yuml;",Ж:"&ZHcy;",Ź:"&Zacute;",Ž:"&Zcaron;",З:"&Zcy;",Ż:"&Zdot;",Ζ:"&Zeta;",ℨ:"&zeetrf;",ℤ:"&integers;",𝒵:"&Zscr;",á:"&aacute;",ă:"&abreve;","∾":"&mstpos;","∾̳":"&acE;","∿":"&acd;",â:"&acirc;",а:"&acy;",æ:"&aelig;",𝔞:"&afr;",à:"&agrave;",ℵ:"&aleph;",α:"&alpha;",ā:"&amacr;","⨿":"&amalg;","∧":"&wedge;","⩕":"&andand;","⩜":"&andd;","⩘":"&andslope;","⩚":"&andv;","∠":"&angle;","⦤":"&ange;","∡":"&measuredangle;","⦨":"&angmsdaa;","⦩":"&angmsdab;","⦪":"&angmsdac;","⦫":"&angmsdad;","⦬":"&angmsdae;","⦭":"&angmsdaf;","⦮":"&angmsdag;","⦯":"&angmsdah;","∟":"&angrt;","⊾":"&angrtvb;","⦝":"&angrtvbd;","∢":"&angsph;","⍼":"&angzarr;",ą:"&aogon;",𝕒:"&aopf;","⩰":"&apE;","⩯":"&apacir;","≊":"&approxeq;","≋":"&apid;","'":"&apos;",å:"&aring;",𝒶:"&ascr;","*":"&midast;",ã:"&atilde;",ä:"&auml;","⨑":"&awint;","⫭":"&bNot;","≌":"&bcong;","϶":"&bepsi;","‵":"&bprime;","∽":"&bsim;","⋍":"&bsime;","⊽":"&barvee;","⌅":"&barwedge;","⎶":"&bbrktbrk;",б:"&bcy;","„":"&ldquor;","⦰":"&bemptyv;",β:"&beta;",ℶ:"&beth;","≬":"&twixt;",𝔟:"&bfr;","◯":"&xcirc;","⨀":"&xodot;","⨁":"&xoplus;","⨂":"&xotime;","⨆":"&xsqcup;","★":"&starf;","▽":"&xdtri;","△":"&xutri;","⨄":"&xuplus;","⤍":"&rbarr;","⧫":"&lozf;","▴":"&utrif;","▾":"&dtrif;","◂":"&ltrif;","▸":"&rtrif;","␣":"&blank;","▒":"&blk12;","░":"&blk14;","▓":"&blk34;","█":"&block;","=⃥":"&bne;","≡⃥":"&bnequiv;","⌐":"&bnot;",𝕓:"&bopf;","⋈":"&bowtie;","╗":"&boxDL;","╔":"&boxDR;","╖":"&boxDl;","╓":"&boxDr;","═":"&boxH;","╦":"&boxHD;","╩":"&boxHU;","╤":"&boxHd;","╧":"&boxHu;","╝":"&boxUL;","╚":"&boxUR;","╜":"&boxUl;","╙":"&boxUr;","║":"&boxV;","╬":"&boxVH;","╣":"&boxVL;","╠":"&boxVR;","╫":"&boxVh;","╢":"&boxVl;","╟":"&boxVr;","⧉":"&boxbox;","╕":"&boxdL;","╒":"&boxdR;","┐":"&boxdl;","┌":"&boxdr;","╥":"&boxhD;","╨":"&boxhU;","┬":"&boxhd;","┴":"&boxhu;","⊟":"&minusb;","⊞":"&plusb;","⊠":"&timesb;","╛":"&boxuL;","╘":"&boxuR;","┘":"&boxul;","└":"&boxur;","│":"&boxv;","╪":"&boxvH;","╡":"&boxvL;","╞":"&boxvR;","┼":"&boxvh;","┤":"&boxvl;","├":"&boxvr;","¦":"&brvbar;",𝒷:"&bscr;","⁏":"&bsemi;","\\":"&bsol;","⧅":"&bsolb;","⟈":"&bsolhsub;","•":"&bullet;","⪮":"&bumpE;",ć:"&cacute;","∩":"&cap;","⩄":"&capand;","⩉":"&capbrcup;","⩋":"&capcap;","⩇":"&capcup;","⩀":"&capdot;","∩︀":"&caps;","⁁":"&caret;","⩍":"&ccaps;",č:"&ccaron;",ç:"&ccedil;",ĉ:"&ccirc;","⩌":"&ccups;","⩐":"&ccupssm;",ċ:"&cdot;","⦲":"&cemptyv;","¢":"&cent;",𝔠:"&cfr;",ч:"&chcy;","✓":"&checkmark;",χ:"&chi;","○":"&cir;","⧃":"&cirE;",ˆ:"&circ;","≗":"&cire;","↺":"&olarr;","↻":"&orarr;","Ⓢ":"&oS;","⊛":"&oast;","⊚":"&ocir;","⊝":"&odash;","⨐":"&cirfnint;","⫯":"&cirmid;","⧂":"&cirscir;","♣":"&clubsuit;",":":"&colon;",",":"&comma;","@":"&commat;","∁":"&complement;","⩭":"&congdot;",𝕔:"&copf;","℗":"&copysr;","↵":"&crarr;","✗":"&cross;",𝒸:"&cscr;","⫏":"&csub;","⫑":"&csube;","⫐":"&csup;","⫒":"&csupe;","⋯":"&ctdot;","⤸":"&cudarrl;","⤵":"&cudarrr;","⋞":"&curlyeqprec;","⋟":"&curlyeqsucc;","↶":"&curvearrowleft;","⤽":"&cularrp;","∪":"&cup;","⩈":"&cupbrcap;","⩆":"&cupcap;","⩊":"&cupcup;","⊍":"&cupdot;","⩅":"&cupor;","∪︀":"&cups;","↷":"&curvearrowright;","⤼":"&curarrm;","⋎":"&cuvee;","⋏":"&cuwed;","¤":"&curren;","∱":"&cwint;","⌭":"&cylcty;","⥥":"&dHar;","†":"&dagger;",ℸ:"&daleth;","‐":"&hyphen;","⤏":"&rBarr;",ď:"&dcaron;",д:"&dcy;","⇊":"&downdownarrows;","⩷":"&eDDot;","°":"&deg;",δ:"&delta;","⦱":"&demptyv;","⥿":"&dfisht;",𝔡:"&dfr;","♦":"&diams;",ϝ:"&gammad;","⋲":"&disin;","÷":"&divide;","⋇":"&divonx;",ђ:"&djcy;","⌞":"&llcorner;","⌍":"&dlcrop;",$:"&dollar;",𝕕:"&dopf;","≑":"&eDot;","∸":"&minusd;","∔":"&plusdo;","⊡":"&sdotb;","⌟":"&lrcorner;","⌌":"&drcrop;",𝒹:"&dscr;",ѕ:"&dscy;","⧶":"&dsol;",đ:"&dstrok;","⋱":"&dtdot;","▿":"&triangledown;","⦦":"&dwangle;",џ:"&dzcy;","⟿":"&dzigrarr;",é:"&eacute;","⩮":"&easter;",ě:"&ecaron;","≖":"&eqcirc;",ê:"&ecirc;","≕":"&eqcolon;",э:"&ecy;",ė:"&edot;","≒":"&fallingdotseq;",𝔢:"&efr;","⪚":"&eg;",è:"&egrave;","⪖":"&eqslantgtr;","⪘":"&egsdot;","⪙":"&el;","⏧":"&elinters;",ℓ:"&ell;","⪕":"&eqslantless;","⪗":"&elsdot;",ē:"&emacr;","∅":"&varnothing;"," ":"&emsp13;"," ":"&emsp14;"," ":"&emsp;",ŋ:"&eng;"," ":"&ensp;",ę:"&eogon;",𝕖:"&eopf;","⋕":"&epar;","⧣":"&eparsl;","⩱":"&eplus;",ε:"&epsilon;",ϵ:"&varepsilon;","=":"&equals;","≟":"&questeq;","⩸":"&equivDD;","⧥":"&eqvparsl;","≓":"&risingdotseq;","⥱":"&erarr;",ℯ:"&escr;",η:"&eta;",ð:"&eth;",ë:"&euml;","€":"&euro;","!":"&excl;",ф:"&fcy;","♀":"&female;",ﬃ:"&ffilig;",ﬀ:"&fflig;",ﬄ:"&ffllig;",𝔣:"&ffr;",ﬁ:"&filig;",fj:"&fjlig;","♭":"&flat;",ﬂ:"&fllig;","▱":"&fltns;",ƒ:"&fnof;",𝕗:"&fopf;","⋔":"&pitchfork;","⫙":"&forkv;","⨍":"&fpartint;","½":"&half;","⅓":"&frac13;","¼":"&frac14;","⅕":"&frac15;","⅙":"&frac16;","⅛":"&frac18;","⅔":"&frac23;","⅖":"&frac25;","¾":"&frac34;","⅗":"&frac35;","⅜":"&frac38;","⅘":"&frac45;","⅚":"&frac56;","⅝":"&frac58;","⅞":"&frac78;","⁄":"&frasl;","⌢":"&sfrown;",𝒻:"&fscr;","⪌":"&gtreqqless;",ǵ:"&gacute;",γ:"&gamma;","⪆":"&gtrapprox;",ğ:"&gbreve;",ĝ:"&gcirc;",г:"&gcy;",ġ:"&gdot;","⪩":"&gescc;","⪀":"&gesdot;","⪂":"&gesdoto;","⪄":"&gesdotol;","⋛︀":"&gesl;","⪔":"&gesles;",𝔤:"&gfr;",ℷ:"&gimel;",ѓ:"&gjcy;","⪒":"&glE;","⪥":"&gla;","⪤":"&glj;","≩":"&gneqq;","⪊":"&gnapprox;","⪈":"&gneq;","⋧":"&gnsim;",𝕘:"&gopf;",ℊ:"&gscr;","⪎":"&gsime;","⪐":"&gsiml;","⪧":"&gtcc;","⩺":"&gtcir;","⋗":"&gtrdot;","⦕":"&gtlPar;","⩼":"&gtquest;","⥸":"&gtrarr;","≩︀":"&gvnE;",ъ:"&hardcy;","⥈":"&harrcir;","↭":"&leftrightsquigarrow;",ℏ:"&plankv;",ĥ:"&hcirc;","♥":"&heartsuit;","…":"&mldr;","⊹":"&hercon;",𝔥:"&hfr;","⤥":"&searhk;","⤦":"&swarhk;","⇿":"&hoarr;","∻":"&homtht;","↩":"&larrhk;","↪":"&rarrhk;",𝕙:"&hopf;","―":"&horbar;",𝒽:"&hscr;",ħ:"&hstrok;","⁃":"&hybull;",í:"&iacute;",î:"&icirc;",и:"&icy;",е:"&iecy;","¡":"&iexcl;",𝔦:"&ifr;",ì:"&igrave;","⨌":"&qint;","∭":"&tint;","⧜":"&iinfin;","℩":"&iiota;",ĳ:"&ijlig;",ī:"&imacr;",ı:"&inodot;","⊷":"&imof;",Ƶ:"&imped;","℅":"&incare;","∞":"&infin;","⧝":"&infintie;","⊺":"&intercal;","⨗":"&intlarhk;","⨼":"&iprod;",ё:"&iocy;",į:"&iogon;",𝕚:"&iopf;",ι:"&iota;","¿":"&iquest;",𝒾:"&iscr;","⋹":"&isinE;","⋵":"&isindot;","⋴":"&isins;","⋳":"&isinsv;",ĩ:"&itilde;",і:"&iukcy;",ï:"&iuml;",ĵ:"&jcirc;",й:"&jcy;",𝔧:"&jfr;",ȷ:"&jmath;",𝕛:"&jopf;",𝒿:"&jscr;",ј:"&jsercy;",є:"&jukcy;",κ:"&kappa;",ϰ:"&varkappa;",ķ:"&kcedil;",к:"&kcy;",𝔨:"&kfr;",ĸ:"&kgreen;",х:"&khcy;",ќ:"&kjcy;",𝕜:"&kopf;",𝓀:"&kscr;","⤛":"&lAtail;","⤎":"&lBarr;","⪋":"&lesseqqgtr;","⥢":"&lHar;",ĺ:"&lacute;","⦴":"&laemptyv;",λ:"&lambda;","⦑":"&langd;","⪅":"&lessapprox;","«":"&laquo;","⤟":"&larrbfs;","⤝":"&larrfs;","↫":"&looparrowleft;","⤹":"&larrpl;","⥳":"&larrsim;","↢":"&leftarrowtail;","⪫":"&lat;","⤙":"&latail;","⪭":"&late;","⪭︀":"&lates;","⤌":"&lbarr;","❲":"&lbbrk;","{":"&lcub;","[":"&lsqb;","⦋":"&lbrke;","⦏":"&lbrksld;","⦍":"&lbrkslu;",ľ:"&lcaron;",ļ:"&lcedil;",л:"&lcy;","⤶":"&ldca;","⥧":"&ldrdhar;","⥋":"&ldrushar;","↲":"&ldsh;","≤":"&leq;","⇇":"&llarr;","⋋":"&lthree;","⪨":"&lescc;","⩿":"&lesdot;","⪁":"&lesdoto;","⪃":"&lesdotor;","⋚︀":"&lesg;","⪓":"&lesges;","⋖":"&ltdot;","⥼":"&lfisht;",𝔩:"&lfr;","⪑":"&lgE;","⥪":"&lharul;","▄":"&lhblk;",љ:"&ljcy;","⥫":"&llhard;","◺":"&lltri;",ŀ:"&lmidot;","⎰":"&lmoustache;","≨":"&lneqq;","⪉":"&lnapprox;","⪇":"&lneq;","⋦":"&lnsim;","⟬":"&loang;","⇽":"&loarr;","⟼":"&xmap;","↬":"&rarrlp;","⦅":"&lopar;",𝕝:"&lopf;","⨭":"&loplus;","⨴":"&lotimes;","∗":"&lowast;","◊":"&lozenge;","(":"&lpar;","⦓":"&lparlt;","⥭":"&lrhard;","‎":"&lrm;","⊿":"&lrtri;","‹":"&lsaquo;",𝓁:"&lscr;","⪍":"&lsime;","⪏":"&lsimg;","‚":"&sbquo;",ł:"&lstrok;","⪦":"&ltcc;","⩹":"&ltcir;","⋉":"&ltimes;","⥶":"&ltlarr;","⩻":"&ltquest;","⦖":"&ltrPar;","◃":"&triangleleft;","⥊":"&lurdshar;","⥦":"&luruhar;","≨︀":"&lvnE;","∺":"&mDDot;","¯":"&strns;","♂":"&male;","✠":"&maltese;","▮":"&marker;","⨩":"&mcomma;",м:"&mcy;","—":"&mdash;",𝔪:"&mfr;","℧":"&mho;",µ:"&micro;","⫰":"&midcir;","−":"&minus;","⨪":"&minusdu;","⫛":"&mlcp;","⊧":"&models;",𝕞:"&mopf;",𝓂:"&mscr;",μ:"&mu;","⊸":"&mumap;","⋙̸":"&nGg;","≫⃒":"&nGt;","⇍":"&nlArr;","⇎":"&nhArr;","⋘̸":"&nLl;","≪⃒":"&nLt;","⇏":"&nrArr;","⊯":"&nVDash;","⊮":"&nVdash;",ń:"&nacute;","∠⃒":"&nang;","⩰̸":"&napE;","≋̸":"&napid;",ŉ:"&napos;","♮":"&natural;","⩃":"&ncap;",ň:"&ncaron;",ņ:"&ncedil;","⩭̸":"&ncongdot;","⩂":"&ncup;",н:"&ncy;","–":"&ndash;","⇗":"&neArr;","⤤":"&nearhk;","≐̸":"&nedot;","⤨":"&toea;",𝔫:"&nfr;","↮":"&nleftrightarrow;","⫲":"&nhpar;","⋼":"&nis;","⋺":"&nisd;",њ:"&njcy;","≦̸":"&nleqq;","↚":"&nleftarrow;","‥":"&nldr;",𝕟:"&nopf;","¬":"&not;","⋹̸":"&notinE;","⋵̸":"&notindot;","⋷":"&notinvb;","⋶":"&notinvc;","⋾":"&notnivb;","⋽":"&notnivc;","⫽⃥":"&nparsl;","∂̸":"&npart;","⨔":"&npolint;","↛":"&nrightarrow;","⤳̸":"&nrarrc;","↝̸":"&nrarrw;",𝓃:"&nscr;","⊄":"&nsub;","⫅̸":"&nsubseteqq;","⊅":"&nsup;","⫆̸":"&nsupseteqq;",ñ:"&ntilde;",ν:"&nu;","#":"&num;","№":"&numero;"," ":"&numsp;","⊭":"&nvDash;","⤄":"&nvHarr;","≍⃒":"&nvap;","⊬":"&nvdash;","≥⃒":"&nvge;",">⃒":"&nvgt;","⧞":"&nvinfin;","⤂":"&nvlArr;","≤⃒":"&nvle;","<⃒":"&nvlt;","⊴⃒":"&nvltrie;","⤃":"&nvrArr;","⊵⃒":"&nvrtrie;","∼⃒":"&nvsim;","⇖":"&nwArr;","⤣":"&nwarhk;","⤧":"&nwnear;",ó:"&oacute;",ô:"&ocirc;",о:"&ocy;",ő:"&odblac;","⨸":"&odiv;","⦼":"&odsold;",œ:"&oelig;","⦿":"&ofcir;",𝔬:"&ofr;","˛":"&ogon;",ò:"&ograve;","⧁":"&ogt;","⦵":"&ohbar;","⦾":"&olcir;","⦻":"&olcross;","⧀":"&olt;",ō:"&omacr;",ω:"&omega;",ο:"&omicron;","⦶":"&omid;",𝕠:"&oopf;","⦷":"&opar;","⦹":"&operp;","∨":"&vee;","⩝":"&ord;",ℴ:"&oscr;",ª:"&ordf;",º:"&ordm;","⊶":"&origof;","⩖":"&oror;","⩗":"&orslope;","⩛":"&orv;",ø:"&oslash;","⊘":"&osol;",õ:"&otilde;","⨶":"&otimesas;",ö:"&ouml;","⌽":"&ovbar;","¶":"&para;","⫳":"&parsim;","⫽":"&parsl;",п:"&pcy;","%":"&percnt;",".":"&period;","‰":"&permil;","‱":"&pertenk;",𝔭:"&pfr;",φ:"&phi;",ϕ:"&varphi;","☎":"&phone;",π:"&pi;",ϖ:"&varpi;",ℎ:"&planckh;","+":"&plus;","⨣":"&plusacir;","⨢":"&pluscir;","⨥":"&plusdu;","⩲":"&pluse;","⨦":"&plussim;","⨧":"&plustwo;","⨕":"&pointint;",𝕡:"&popf;","£":"&pound;","⪳":"&prE;","⪷":"&precapprox;","⪹":"&prnap;","⪵":"&prnE;","⋨":"&prnsim;","′":"&prime;","⌮":"&profalar;","⌒":"&profline;","⌓":"&profsurf;","⊰":"&prurel;",𝓅:"&pscr;",ψ:"&psi;"," ":"&puncsp;",𝔮:"&qfr;",𝕢:"&qopf;","⁗":"&qprime;",𝓆:"&qscr;","⨖":"&quatint;","?":"&quest;","⤜":"&rAtail;","⥤":"&rHar;","∽̱":"&race;",ŕ:"&racute;","⦳":"&raemptyv;","⦒":"&rangd;","⦥":"&range;","»":"&raquo;","⥵":"&rarrap;","⤠":"&rarrbfs;","⤳":"&rarrc;","⤞":"&rarrfs;","⥅":"&rarrpl;","⥴":"&rarrsim;","↣":"&rightarrowtail;","↝":"&rightsquigarrow;","⤚":"&ratail;","∶":"&ratio;","❳":"&rbbrk;","}":"&rcub;","]":"&rsqb;","⦌":"&rbrke;","⦎":"&rbrksld;","⦐":"&rbrkslu;",ř:"&rcaron;",ŗ:"&rcedil;",р:"&rcy;","⤷":"&rdca;","⥩":"&rdldhar;","↳":"&rdsh;","▭":"&rect;","⥽":"&rfisht;",𝔯:"&rfr;","⥬":"&rharul;",ρ:"&rho;",ϱ:"&varrho;","⇉":"&rrarr;","⋌":"&rthree;","˚":"&ring;","‏":"&rlm;","⎱":"&rmoustache;","⫮":"&rnmid;","⟭":"&roang;","⇾":"&roarr;","⦆":"&ropar;",𝕣:"&ropf;","⨮":"&roplus;","⨵":"&rotimes;",")":"&rpar;","⦔":"&rpargt;","⨒":"&rppolint;","›":"&rsaquo;",𝓇:"&rscr;","⋊":"&rtimes;","▹":"&triangleright;","⧎":"&rtriltri;","⥨":"&ruluhar;","℞":"&rx;",ś:"&sacute;","⪴":"&scE;","⪸":"&succapprox;",š:"&scaron;",ş:"&scedil;",ŝ:"&scirc;","⪶":"&succneqq;","⪺":"&succnapprox;","⋩":"&succnsim;","⨓":"&scpolint;",с:"&scy;","⋅":"&sdot;","⩦":"&sdote;","⇘":"&seArr;","§":"&sect;",";":"&semi;","⤩":"&tosa;","✶":"&sext;",𝔰:"&sfr;","♯":"&sharp;",щ:"&shchcy;",ш:"&shcy;","­":"&shy;",σ:"&sigma;",ς:"&varsigma;","⩪":"&simdot;","⪞":"&simg;","⪠":"&simgE;","⪝":"&siml;","⪟":"&simlE;","≆":"&simne;","⨤":"&simplus;","⥲":"&simrarr;","⨳":"&smashp;","⧤":"&smeparsl;","⌣":"&ssmile;","⪪":"&smt;","⪬":"&smte;","⪬︀":"&smtes;",ь:"&softcy;","/":"&sol;","⧄":"&solb;","⌿":"&solbar;",𝕤:"&sopf;","♠":"&spadesuit;","⊓︀":"&sqcaps;","⊔︀":"&sqcups;",𝓈:"&sscr;","☆":"&star;","⊂":"&subset;","⫅":"&subseteqq;","⪽":"&subdot;","⫃":"&subedot;","⫁":"&submult;","⫋":"&subsetneqq;","⊊":"&subsetneq;","⪿":"&subplus;","⥹":"&subrarr;","⫇":"&subsim;","⫕":"&subsub;","⫓":"&subsup;","♪":"&sung;","¹":"&sup1;","²":"&sup2;","³":"&sup3;","⫆":"&supseteqq;","⪾":"&supdot;","⫘":"&supdsub;","⫄":"&supedot;","⟉":"&suphsol;","⫗":"&suphsub;","⥻":"&suplarr;","⫂":"&supmult;","⫌":"&supsetneqq;","⊋":"&supsetneq;","⫀":"&supplus;","⫈":"&supsim;","⫔":"&supsub;","⫖":"&supsup;","⇙":"&swArr;","⤪":"&swnwar;",ß:"&szlig;","⌖":"&target;",τ:"&tau;",ť:"&tcaron;",ţ:"&tcedil;",т:"&tcy;","⌕":"&telrec;",𝔱:"&tfr;",θ:"&theta;",ϑ:"&vartheta;",þ:"&thorn;","×":"&times;","⨱":"&timesbar;","⨰":"&timesd;","⌶":"&topbot;","⫱":"&topcir;",𝕥:"&topf;","⫚":"&topfork;","‴":"&tprime;","▵":"&utri;","≜":"&trie;","◬":"&tridot;","⨺":"&triminus;","⨹":"&triplus;","⧍":"&trisb;","⨻":"&tritime;","⏢":"&trpezium;",𝓉:"&tscr;",ц:"&tscy;",ћ:"&tshcy;",ŧ:"&tstrok;","⥣":"&uHar;",ú:"&uacute;",ў:"&ubrcy;",ŭ:"&ubreve;",û:"&ucirc;",у:"&ucy;",ű:"&udblac;","⥾":"&ufisht;",𝔲:"&ufr;",ù:"&ugrave;","▀":"&uhblk;","⌜":"&ulcorner;","⌏":"&ulcrop;","◸":"&ultri;",ū:"&umacr;",ų:"&uogon;",𝕦:"&uopf;",υ:"&upsilon;","⇈":"&uuarr;","⌝":"&urcorner;","⌎":"&urcrop;",ů:"&uring;","◹":"&urtri;",𝓊:"&uscr;","⋰":"&utdot;",ũ:"&utilde;",ü:"&uuml;","⦧":"&uwangle;","⫨":"&vBar;","⫩":"&vBarv;","⦜":"&vangrt;","⊊︀":"&vsubne;","⫋︀":"&vsubnE;","⊋︀":"&vsupne;","⫌︀":"&vsupnE;",в:"&vcy;","⊻":"&veebar;","≚":"&veeeq;","⋮":"&vellip;",𝔳:"&vfr;",𝕧:"&vopf;",𝓋:"&vscr;","⦚":"&vzigzag;",ŵ:"&wcirc;","⩟":"&wedbar;","≙":"&wedgeq;",℘:"&wp;",𝔴:"&wfr;",𝕨:"&wopf;",𝓌:"&wscr;",𝔵:"&xfr;",ξ:"&xi;","⋻":"&xnis;",𝕩:"&xopf;",𝓍:"&xscr;",ý:"&yacute;",я:"&yacy;",ŷ:"&ycirc;",ы:"&ycy;","¥":"&yen;",𝔶:"&yfr;",ї:"&yicy;",𝕪:"&yopf;",𝓎:"&yscr;",ю:"&yucy;",ÿ:"&yuml;",ź:"&zacute;",ž:"&zcaron;",з:"&zcy;",ż:"&zdot;",ζ:"&zeta;",𝔷:"&zfr;",ж:"&zhcy;","⇝":"&zigrarr;",𝕫:"&zopf;",𝓏:"&zscr;","‍":"&zwj;","‌":"&zwnj;"}}}},"./node_modules/html-entities/lib/numeric-unicode-map.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.numericUnicodeMap={0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376}},"./node_modules/html-entities/lib/surrogate-pairs.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromCodePoint=String.fromCodePoint||function(e){return String.fromCharCode(Math.floor((e-65536)/1024)+55296,(e-65536)%1024+56320)},t.getCodePoint=String.prototype.codePointAt?function(e,t){return e.codePointAt(t)}:function(e,t){return 1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536},t.highSurrogateFrom=55296,t.highSurrogateTo=56319},"./node_modules/lodash/_DataView.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"DataView");e.exports=s},"./node_modules/lodash/_Hash.js":(e,t,r)=>{var s=r("./node_modules/lodash/_hashClear.js"),n=r("./node_modules/lodash/_hashDelete.js"),i=r("./node_modules/lodash/_hashGet.js"),o=r("./node_modules/lodash/_hashHas.js"),a=r("./node_modules/lodash/_hashSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var s=e[t];this.set(s[0],s[1])}}l.prototype.clear=s,l.prototype.delete=n,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_ListCache.js":(e,t,r)=>{var s=r("./node_modules/lodash/_listCacheClear.js"),n=r("./node_modules/lodash/_listCacheDelete.js"),i=r("./node_modules/lodash/_listCacheGet.js"),o=r("./node_modules/lodash/_listCacheHas.js"),a=r("./node_modules/lodash/_listCacheSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var s=e[t];this.set(s[0],s[1])}}l.prototype.clear=s,l.prototype.delete=n,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_Map.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Map");e.exports=s},"./node_modules/lodash/_MapCache.js":(e,t,r)=>{var s=r("./node_modules/lodash/_mapCacheClear.js"),n=r("./node_modules/lodash/_mapCacheDelete.js"),i=r("./node_modules/lodash/_mapCacheGet.js"),o=r("./node_modules/lodash/_mapCacheHas.js"),a=r("./node_modules/lodash/_mapCacheSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var s=e[t];this.set(s[0],s[1])}}l.prototype.clear=s,l.prototype.delete=n,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_Promise.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Promise");e.exports=s},"./node_modules/lodash/_Set.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Set");e.exports=s},"./node_modules/lodash/_SetCache.js":(e,t,r)=>{var s=r("./node_modules/lodash/_MapCache.js"),n=r("./node_modules/lodash/_setCacheAdd.js"),i=r("./node_modules/lodash/_setCacheHas.js");function o(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new s;++t<r;)this.add(e[t])}o.prototype.add=o.prototype.push=n,o.prototype.has=i,e.exports=o},"./node_modules/lodash/_Stack.js":(e,t,r)=>{var s=r("./node_modules/lodash/_ListCache.js"),n=r("./node_modules/lodash/_stackClear.js"),i=r("./node_modules/lodash/_stackDelete.js"),o=r("./node_modules/lodash/_stackGet.js"),a=r("./node_modules/lodash/_stackHas.js"),l=r("./node_modules/lodash/_stackSet.js");function u(e){var t=this.__data__=new s(e);this.size=t.size}u.prototype.clear=n,u.prototype.delete=i,u.prototype.get=o,u.prototype.has=a,u.prototype.set=l,e.exports=u},"./node_modules/lodash/_Symbol.js":(e,t,r)=>{var s=r("./node_modules/lodash/_root.js").Symbol;e.exports=s},"./node_modules/lodash/_Uint8Array.js":(e,t,r)=>{var s=r("./node_modules/lodash/_root.js").Uint8Array;e.exports=s},"./node_modules/lodash/_WeakMap.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"WeakMap");e.exports=s},"./node_modules/lodash/_arrayEach.js":e=>{e.exports=function(e,t){for(var r=-1,s=null==e?0:e.length;++r<s&&!1!==t(e[r],r,e););return e}},"./node_modules/lodash/_arrayFilter.js":e=>{e.exports=function(e,t){for(var r=-1,s=null==e?0:e.length,n=0,i=[];++r<s;){var o=e[r];t(o,r,e)&&(i[n++]=o)}return i}},"./node_modules/lodash/_arrayLikeKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseTimes.js"),n=r("./node_modules/lodash/isArguments.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/isBuffer.js"),a=r("./node_modules/lodash/_isIndex.js"),l=r("./node_modules/lodash/isTypedArray.js"),u=Object.prototype.hasOwnProperty;e.exports=function(e,t){var r=i(e),c=!r&&n(e),d=!r&&!c&&o(e),h=!r&&!c&&!d&&l(e),p=r||c||d||h,f=p?s(e.length,String):[],m=f.length;for(var g in e)!t&&!u.call(e,g)||p&&("length"==g||d&&("offset"==g||"parent"==g)||h&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||a(g,m))||f.push(g);return f}},"./node_modules/lodash/_arrayMap.js":e=>{e.exports=function(e,t){for(var r=-1,s=null==e?0:e.length,n=Array(s);++r<s;)n[r]=t(e[r],r,e);return n}},"./node_modules/lodash/_arrayPush.js":e=>{e.exports=function(e,t){for(var r=-1,s=t.length,n=e.length;++r<s;)e[n+r]=t[r];return e}},"./node_modules/lodash/_arraySome.js":e=>{e.exports=function(e,t){for(var r=-1,s=null==e?0:e.length;++r<s;)if(t(e[r],r,e))return!0;return!1}},"./node_modules/lodash/_assocIndexOf.js":(e,t,r)=>{var s=r("./node_modules/lodash/eq.js");e.exports=function(e,t){for(var r=e.length;r--;)if(s(e[r][0],t))return r;return-1}},"./node_modules/lodash/_baseEach.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseForOwn.js"),n=r("./node_modules/lodash/_createBaseEach.js")(s);e.exports=n},"./node_modules/lodash/_baseFor.js":(e,t,r)=>{var s=r("./node_modules/lodash/_createBaseFor.js")();e.exports=s},"./node_modules/lodash/_baseForOwn.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseFor.js"),n=r("./node_modules/lodash/keys.js");e.exports=function(e,t){return e&&s(e,t,n)}},"./node_modules/lodash/_baseGet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_castPath.js"),n=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t){for(var r=0,i=(t=s(t,e)).length;null!=e&&r<i;)e=e[n(t[r++])];return r&&r==i?e:void 0}},"./node_modules/lodash/_baseGetAllKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayPush.js"),n=r("./node_modules/lodash/isArray.js");e.exports=function(e,t,r){var i=t(e);return n(e)?i:s(i,r(e))}},"./node_modules/lodash/_baseGetTag.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=r("./node_modules/lodash/_getRawTag.js"),i=r("./node_modules/lodash/_objectToString.js"),o=s?s.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":o&&o in Object(e)?n(e):i(e)}},"./node_modules/lodash/_baseHasIn.js":e=>{e.exports=function(e,t){return null!=e&&t in Object(e)}},"./node_modules/lodash/_baseIsArguments.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isObjectLike.js");e.exports=function(e){return n(e)&&"[object Arguments]"==s(e)}},"./node_modules/lodash/_baseIsEqual.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsEqualDeep.js"),n=r("./node_modules/lodash/isObjectLike.js");e.exports=function e(t,r,i,o,a){return t===r||(null==t||null==r||!n(t)&&!n(r)?t!=t&&r!=r:s(t,r,i,o,e,a))}},"./node_modules/lodash/_baseIsEqualDeep.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Stack.js"),n=r("./node_modules/lodash/_equalArrays.js"),i=r("./node_modules/lodash/_equalByTag.js"),o=r("./node_modules/lodash/_equalObjects.js"),a=r("./node_modules/lodash/_getTag.js"),l=r("./node_modules/lodash/isArray.js"),u=r("./node_modules/lodash/isBuffer.js"),c=r("./node_modules/lodash/isTypedArray.js"),d="[object Arguments]",h="[object Array]",p="[object Object]",f=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,m,g,_){var v=l(e),y=l(t),b=v?h:a(e),w=y?h:a(t),x=(b=b==d?p:b)==p,j=(w=w==d?p:w)==p,E=b==w;if(E&&u(e)){if(!u(t))return!1;v=!0,x=!1}if(E&&!x)return _||(_=new s),v||c(e)?n(e,t,r,m,g,_):i(e,t,b,r,m,g,_);if(!(1&r)){var A=x&&f.call(e,"__wrapped__"),T=j&&f.call(t,"__wrapped__");if(A||T){var M=A?e.value():e,S=T?t.value():t;return _||(_=new s),g(M,S,r,m,_)}}return!!E&&(_||(_=new s),o(e,t,r,m,g,_))}},"./node_modules/lodash/_baseIsMatch.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Stack.js"),n=r("./node_modules/lodash/_baseIsEqual.js");e.exports=function(e,t,r,i){var o=r.length,a=o,l=!i;if(null==e)return!a;for(e=Object(e);o--;){var u=r[o];if(l&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++o<a;){var c=(u=r[o])[0],d=e[c],h=u[1];if(l&&u[2]){if(void 0===d&&!(c in e))return!1}else{var p=new s;if(i)var f=i(d,h,c,e,t,p);if(!(void 0===f?n(h,d,3,i,p):f))return!1}}return!0}},"./node_modules/lodash/_baseIsNative.js":(e,t,r)=>{var s=r("./node_modules/lodash/isFunction.js"),n=r("./node_modules/lodash/_isMasked.js"),i=r("./node_modules/lodash/isObject.js"),o=r("./node_modules/lodash/_toSource.js"),a=/^\[object .+?Constructor\]$/,l=Function.prototype,u=Object.prototype,c=l.toString,d=u.hasOwnProperty,h=RegExp("^"+c.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||n(e))&&(s(e)?h:a).test(o(e))}},"./node_modules/lodash/_baseIsTypedArray.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isLength.js"),i=r("./node_modules/lodash/isObjectLike.js"),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&n(e.length)&&!!o[s(e)]}},"./node_modules/lodash/_baseIteratee.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseMatches.js"),n=r("./node_modules/lodash/_baseMatchesProperty.js"),i=r("./node_modules/lodash/identity.js"),o=r("./node_modules/lodash/isArray.js"),a=r("./node_modules/lodash/property.js");e.exports=function(e){return"function"==typeof e?e:null==e?i:"object"==typeof e?o(e)?n(e[0],e[1]):s(e):a(e)}},"./node_modules/lodash/_baseKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_isPrototype.js"),n=r("./node_modules/lodash/_nativeKeys.js"),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!s(e))return n(e);var t=[];for(var r in Object(e))i.call(e,r)&&"constructor"!=r&&t.push(r);return t}},"./node_modules/lodash/_baseMap.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseEach.js"),n=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){var r=-1,i=n(e)?Array(e.length):[];return s(e,(function(e,s,n){i[++r]=t(e,s,n)})),i}},"./node_modules/lodash/_baseMatches.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsMatch.js"),n=r("./node_modules/lodash/_getMatchData.js"),i=r("./node_modules/lodash/_matchesStrictComparable.js");e.exports=function(e){var t=n(e);return 1==t.length&&t[0][2]?i(t[0][0],t[0][1]):function(r){return r===e||s(r,e,t)}}},"./node_modules/lodash/_baseMatchesProperty.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsEqual.js"),n=r("./node_modules/lodash/get.js"),i=r("./node_modules/lodash/hasIn.js"),o=r("./node_modules/lodash/_isKey.js"),a=r("./node_modules/lodash/_isStrictComparable.js"),l=r("./node_modules/lodash/_matchesStrictComparable.js"),u=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t){return o(e)&&a(t)?l(u(e),t):function(r){var o=n(r,e);return void 0===o&&o===t?i(r,e):s(t,o,3)}}},"./node_modules/lodash/_baseProperty.js":e=>{e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},"./node_modules/lodash/_basePropertyDeep.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGet.js");e.exports=function(e){return function(t){return s(t,e)}}},"./node_modules/lodash/_baseTimes.js":e=>{e.exports=function(e,t){for(var r=-1,s=Array(e);++r<e;)s[r]=t(r);return s}},"./node_modules/lodash/_baseToString.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=r("./node_modules/lodash/_arrayMap.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/isSymbol.js"),a=s?s.prototype:void 0,l=a?a.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(i(t))return n(t,e)+"";if(o(t))return l?l.call(t):"";var r=t+"";return"0"==r&&1/t==-Infinity?"-0":r}},"./node_modules/lodash/_baseUnary.js":e=>{e.exports=function(e){return function(t){return e(t)}}},"./node_modules/lodash/_cacheHas.js":e=>{e.exports=function(e,t){return e.has(t)}},"./node_modules/lodash/_castFunction.js":(e,t,r)=>{var s=r("./node_modules/lodash/identity.js");e.exports=function(e){return"function"==typeof e?e:s}},"./node_modules/lodash/_castPath.js":(e,t,r)=>{var s=r("./node_modules/lodash/isArray.js"),n=r("./node_modules/lodash/_isKey.js"),i=r("./node_modules/lodash/_stringToPath.js"),o=r("./node_modules/lodash/toString.js");e.exports=function(e,t){return s(e)?e:n(e,t)?[e]:i(o(e))}},"./node_modules/lodash/_coreJsData.js":(e,t,r)=>{var s=r("./node_modules/lodash/_root.js")["__core-js_shared__"];e.exports=s},"./node_modules/lodash/_createBaseEach.js":(e,t,r)=>{var s=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){return function(r,n){if(null==r)return r;if(!s(r))return e(r,n);for(var i=r.length,o=t?i:-1,a=Object(r);(t?o--:++o<i)&&!1!==n(a[o],o,a););return r}}},"./node_modules/lodash/_createBaseFor.js":e=>{e.exports=function(e){return function(t,r,s){for(var n=-1,i=Object(t),o=s(t),a=o.length;a--;){var l=o[e?a:++n];if(!1===r(i[l],l,i))break}return t}}},"./node_modules/lodash/_equalArrays.js":(e,t,r)=>{var s=r("./node_modules/lodash/_SetCache.js"),n=r("./node_modules/lodash/_arraySome.js"),i=r("./node_modules/lodash/_cacheHas.js");e.exports=function(e,t,r,o,a,l){var u=1&r,c=e.length,d=t.length;if(c!=d&&!(u&&d>c))return!1;var h=l.get(e),p=l.get(t);if(h&&p)return h==t&&p==e;var f=-1,m=!0,g=2&r?new s:void 0;for(l.set(e,t),l.set(t,e);++f<c;){var _=e[f],v=t[f];if(o)var y=u?o(v,_,f,t,e,l):o(_,v,f,e,t,l);if(void 0!==y){if(y)continue;m=!1;break}if(g){if(!n(t,(function(e,t){if(!i(g,t)&&(_===e||a(_,e,r,o,l)))return g.push(t)}))){m=!1;break}}else if(_!==v&&!a(_,v,r,o,l)){m=!1;break}}return l.delete(e),l.delete(t),m}},"./node_modules/lodash/_equalByTag.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=r("./node_modules/lodash/_Uint8Array.js"),i=r("./node_modules/lodash/eq.js"),o=r("./node_modules/lodash/_equalArrays.js"),a=r("./node_modules/lodash/_mapToArray.js"),l=r("./node_modules/lodash/_setToArray.js"),u=s?s.prototype:void 0,c=u?u.valueOf:void 0;e.exports=function(e,t,r,s,u,d,h){switch(r){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!d(new n(e),new n(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var p=a;case"[object Set]":var f=1&s;if(p||(p=l),e.size!=t.size&&!f)return!1;var m=h.get(e);if(m)return m==t;s|=2,h.set(e,t);var g=o(p(e),p(t),s,u,d,h);return h.delete(e),g;case"[object Symbol]":if(c)return c.call(e)==c.call(t)}return!1}},"./node_modules/lodash/_equalObjects.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getAllKeys.js"),n=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,i,o,a){var l=1&r,u=s(e),c=u.length;if(c!=s(t).length&&!l)return!1;for(var d=c;d--;){var h=u[d];if(!(l?h in t:n.call(t,h)))return!1}var p=a.get(e),f=a.get(t);if(p&&f)return p==t&&f==e;var m=!0;a.set(e,t),a.set(t,e);for(var g=l;++d<c;){var _=e[h=u[d]],v=t[h];if(i)var y=l?i(v,_,h,t,e,a):i(_,v,h,e,t,a);if(!(void 0===y?_===v||o(_,v,r,i,a):y)){m=!1;break}g||(g="constructor"==h)}if(m&&!g){var b=e.constructor,w=t.constructor;b==w||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof w&&w instanceof w||(m=!1)}return a.delete(e),a.delete(t),m}},"./node_modules/lodash/_freeGlobal.js":(e,t,r)=>{var s="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g;e.exports=s},"./node_modules/lodash/_getAllKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetAllKeys.js"),n=r("./node_modules/lodash/_getSymbols.js"),i=r("./node_modules/lodash/keys.js");e.exports=function(e){return s(e,i,n)}},"./node_modules/lodash/_getMapData.js":(e,t,r)=>{var s=r("./node_modules/lodash/_isKeyable.js");e.exports=function(e,t){var r=e.__data__;return s(t)?r["string"==typeof t?"string":"hash"]:r.map}},"./node_modules/lodash/_getMatchData.js":(e,t,r)=>{var s=r("./node_modules/lodash/_isStrictComparable.js"),n=r("./node_modules/lodash/keys.js");e.exports=function(e){for(var t=n(e),r=t.length;r--;){var i=t[r],o=e[i];t[r]=[i,o,s(o)]}return t}},"./node_modules/lodash/_getNative.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsNative.js"),n=r("./node_modules/lodash/_getValue.js");e.exports=function(e,t){var r=n(e,t);return s(r)?r:void 0}},"./node_modules/lodash/_getRawTag.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Symbol.js"),n=Object.prototype,i=n.hasOwnProperty,o=n.toString,a=s?s.toStringTag:void 0;e.exports=function(e){var t=i.call(e,a),r=e[a];try{e[a]=void 0;var s=!0}catch(e){}var n=o.call(e);return s&&(t?e[a]=r:delete e[a]),n}},"./node_modules/lodash/_getSymbols.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayFilter.js"),n=r("./node_modules/lodash/stubArray.js"),i=Object.prototype.propertyIsEnumerable,o=Object.getOwnPropertySymbols,a=o?function(e){return null==e?[]:(e=Object(e),s(o(e),(function(t){return i.call(e,t)})))}:n;e.exports=a},"./node_modules/lodash/_getTag.js":(e,t,r)=>{var s=r("./node_modules/lodash/_DataView.js"),n=r("./node_modules/lodash/_Map.js"),i=r("./node_modules/lodash/_Promise.js"),o=r("./node_modules/lodash/_Set.js"),a=r("./node_modules/lodash/_WeakMap.js"),l=r("./node_modules/lodash/_baseGetTag.js"),u=r("./node_modules/lodash/_toSource.js"),c="[object Map]",d="[object Promise]",h="[object Set]",p="[object WeakMap]",f="[object DataView]",m=u(s),g=u(n),_=u(i),v=u(o),y=u(a),b=l;(s&&b(new s(new ArrayBuffer(1)))!=f||n&&b(new n)!=c||i&&b(i.resolve())!=d||o&&b(new o)!=h||a&&b(new a)!=p)&&(b=function(e){var t=l(e),r="[object Object]"==t?e.constructor:void 0,s=r?u(r):"";if(s)switch(s){case m:return f;case g:return c;case _:return d;case v:return h;case y:return p}return t}),e.exports=b},"./node_modules/lodash/_getValue.js":e=>{e.exports=function(e,t){return null==e?void 0:e[t]}},"./node_modules/lodash/_hasPath.js":(e,t,r)=>{var s=r("./node_modules/lodash/_castPath.js"),n=r("./node_modules/lodash/isArguments.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/_isIndex.js"),a=r("./node_modules/lodash/isLength.js"),l=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t,r){for(var u=-1,c=(t=s(t,e)).length,d=!1;++u<c;){var h=l(t[u]);if(!(d=null!=e&&r(e,h)))break;e=e[h]}return d||++u!=c?d:!!(c=null==e?0:e.length)&&a(c)&&o(h,c)&&(i(e)||n(e))}},"./node_modules/lodash/_hashClear.js":(e,t,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js");e.exports=function(){this.__data__=s?s(null):{},this.size=0}},"./node_modules/lodash/_hashDelete.js":e=>{e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},"./node_modules/lodash/_hashGet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js"),n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(s){var r=t[e];return"__lodash_hash_undefined__"===r?void 0:r}return n.call(t,e)?t[e]:void 0}},"./node_modules/lodash/_hashHas.js":(e,t,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js"),n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return s?void 0!==t[e]:n.call(t,e)}},"./node_modules/lodash/_hashSet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_nativeCreate.js");e.exports=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=s&&void 0===t?"__lodash_hash_undefined__":t,this}},"./node_modules/lodash/_isIndex.js":e=>{var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,r){var s=typeof e;return!!(r=null==r?9007199254740991:r)&&("number"==s||"symbol"!=s&&t.test(e))&&e>-1&&e%1==0&&e<r}},"./node_modules/lodash/_isKey.js":(e,t,r)=>{var s=r("./node_modules/lodash/isArray.js"),n=r("./node_modules/lodash/isSymbol.js"),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/;e.exports=function(e,t){if(s(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!n(e))||(o.test(e)||!i.test(e)||null!=t&&e in Object(t))}},"./node_modules/lodash/_isKeyable.js":e=>{e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},"./node_modules/lodash/_isMasked.js":(e,t,r)=>{var s,n=r("./node_modules/lodash/_coreJsData.js"),i=(s=/[^.]+$/.exec(n&&n.keys&&n.keys.IE_PROTO||""))?"Symbol(src)_1."+s:"";e.exports=function(e){return!!i&&i in e}},"./node_modules/lodash/_isPrototype.js":e=>{var t=Object.prototype;e.exports=function(e){var r=e&&e.constructor;return e===("function"==typeof r&&r.prototype||t)}},"./node_modules/lodash/_isStrictComparable.js":(e,t,r)=>{var s=r("./node_modules/lodash/isObject.js");e.exports=function(e){return e==e&&!s(e)}},"./node_modules/lodash/_listCacheClear.js":e=>{e.exports=function(){this.__data__=[],this.size=0}},"./node_modules/lodash/_listCacheDelete.js":(e,t,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js"),n=Array.prototype.splice;e.exports=function(e){var t=this.__data__,r=s(t,e);return!(r<0)&&(r==t.length-1?t.pop():n.call(t,r,1),--this.size,!0)}},"./node_modules/lodash/_listCacheGet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){var t=this.__data__,r=s(t,e);return r<0?void 0:t[r][1]}},"./node_modules/lodash/_listCacheHas.js":(e,t,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){return s(this.__data__,e)>-1}},"./node_modules/lodash/_listCacheSet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e,t){var r=this.__data__,n=s(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this}},"./node_modules/lodash/_mapCacheClear.js":(e,t,r)=>{var s=r("./node_modules/lodash/_Hash.js"),n=r("./node_modules/lodash/_ListCache.js"),i=r("./node_modules/lodash/_Map.js");e.exports=function(){this.size=0,this.__data__={hash:new s,map:new(i||n),string:new s}}},"./node_modules/lodash/_mapCacheDelete.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){var t=s(this,e).delete(e);return this.size-=t?1:0,t}},"./node_modules/lodash/_mapCacheGet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){return s(this,e).get(e)}},"./node_modules/lodash/_mapCacheHas.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){return s(this,e).has(e)}},"./node_modules/lodash/_mapCacheSet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getMapData.js");e.exports=function(e,t){var r=s(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this}},"./node_modules/lodash/_mapToArray.js":e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e,s){r[++t]=[s,e]})),r}},"./node_modules/lodash/_matchesStrictComparable.js":e=>{e.exports=function(e,t){return function(r){return null!=r&&(r[e]===t&&(void 0!==t||e in Object(r)))}}},"./node_modules/lodash/_memoizeCapped.js":(e,t,r)=>{var s=r("./node_modules/lodash/memoize.js");e.exports=function(e){var t=s(e,(function(e){return 500===r.size&&r.clear(),e})),r=t.cache;return t}},"./node_modules/lodash/_nativeCreate.js":(e,t,r)=>{var s=r("./node_modules/lodash/_getNative.js")(Object,"create");e.exports=s},"./node_modules/lodash/_nativeKeys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_overArg.js")(Object.keys,Object);e.exports=s},"./node_modules/lodash/_nodeUtil.js":(e,t,r)=>{e=r.nmd(e);var s=r("./node_modules/lodash/_freeGlobal.js"),n=t&&!t.nodeType&&t,i=n&&e&&!e.nodeType&&e,o=i&&i.exports===n&&s.process,a=function(){try{var e=i&&i.require&&i.require("util").types;return e||o&&o.binding&&o.binding("util")}catch(e){}}();e.exports=a},"./node_modules/lodash/_objectToString.js":e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},"./node_modules/lodash/_overArg.js":e=>{e.exports=function(e,t){return function(r){return e(t(r))}}},"./node_modules/lodash/_root.js":(e,t,r)=>{var s=r("./node_modules/lodash/_freeGlobal.js"),n="object"==typeof self&&self&&self.Object===Object&&self,i=s||n||Function("return this")();e.exports=i},"./node_modules/lodash/_setCacheAdd.js":e=>{e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},"./node_modules/lodash/_setCacheHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_setToArray.js":e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e){r[++t]=e})),r}},"./node_modules/lodash/_stackClear.js":(e,t,r)=>{var s=r("./node_modules/lodash/_ListCache.js");e.exports=function(){this.__data__=new s,this.size=0}},"./node_modules/lodash/_stackDelete.js":e=>{e.exports=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r}},"./node_modules/lodash/_stackGet.js":e=>{e.exports=function(e){return this.__data__.get(e)}},"./node_modules/lodash/_stackHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_stackSet.js":(e,t,r)=>{var s=r("./node_modules/lodash/_ListCache.js"),n=r("./node_modules/lodash/_Map.js"),i=r("./node_modules/lodash/_MapCache.js");e.exports=function(e,t){var r=this.__data__;if(r instanceof s){var o=r.__data__;if(!n||o.length<199)return o.push([e,t]),this.size=++r.size,this;r=this.__data__=new i(o)}return r.set(e,t),this.size=r.size,this}},"./node_modules/lodash/_stringToPath.js":(e,t,r)=>{var s=r("./node_modules/lodash/_memoizeCapped.js"),n=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,o=s((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(n,(function(e,r,s,n){t.push(s?n.replace(i,"$1"):r||e)})),t}));e.exports=o},"./node_modules/lodash/_toKey.js":(e,t,r)=>{var s=r("./node_modules/lodash/isSymbol.js");e.exports=function(e){if("string"==typeof e||s(e))return e;var t=e+"";return"0"==t&&1/e==-Infinity?"-0":t}},"./node_modules/lodash/_toSource.js":e=>{var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},"./node_modules/lodash/each.js":(e,t,r)=>{e.exports=r("./node_modules/lodash/forEach.js")},"./node_modules/lodash/eq.js":e=>{e.exports=function(e,t){return e===t||e!=e&&t!=t}},"./node_modules/lodash/forEach.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayEach.js"),n=r("./node_modules/lodash/_baseEach.js"),i=r("./node_modules/lodash/_castFunction.js"),o=r("./node_modules/lodash/isArray.js");e.exports=function(e,t){return(o(e)?s:n)(e,i(t))}},"./node_modules/lodash/get.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGet.js");e.exports=function(e,t,r){var n=null==e?void 0:s(e,t);return void 0===n?r:n}},"./node_modules/lodash/hasIn.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseHasIn.js"),n=r("./node_modules/lodash/_hasPath.js");e.exports=function(e,t){return null!=e&&n(e,t,s)}},"./node_modules/lodash/identity.js":e=>{e.exports=function(e){return e}},"./node_modules/lodash/isArguments.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsArguments.js"),n=r("./node_modules/lodash/isObjectLike.js"),i=Object.prototype,o=i.hasOwnProperty,a=i.propertyIsEnumerable,l=s(function(){return arguments}())?s:function(e){return n(e)&&o.call(e,"callee")&&!a.call(e,"callee")};e.exports=l},"./node_modules/lodash/isArray.js":e=>{var t=Array.isArray;e.exports=t},"./node_modules/lodash/isArrayLike.js":(e,t,r)=>{var s=r("./node_modules/lodash/isFunction.js"),n=r("./node_modules/lodash/isLength.js");e.exports=function(e){return null!=e&&n(e.length)&&!s(e)}},"./node_modules/lodash/isBuffer.js":(e,t,r)=>{e=r.nmd(e);var s=r("./node_modules/lodash/_root.js"),n=r("./node_modules/lodash/stubFalse.js"),i=t&&!t.nodeType&&t,o=i&&e&&!e.nodeType&&e,a=o&&o.exports===i?s.Buffer:void 0,l=(a?a.isBuffer:void 0)||n;e.exports=l},"./node_modules/lodash/isFunction.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isObject.js");e.exports=function(e){if(!n(e))return!1;var t=s(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},"./node_modules/lodash/isLength.js":e=>{e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},"./node_modules/lodash/isObject.js":e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},"./node_modules/lodash/isObjectLike.js":e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},"./node_modules/lodash/isSymbol.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseGetTag.js"),n=r("./node_modules/lodash/isObjectLike.js");e.exports=function(e){return"symbol"==typeof e||n(e)&&"[object Symbol]"==s(e)}},"./node_modules/lodash/isTypedArray.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseIsTypedArray.js"),n=r("./node_modules/lodash/_baseUnary.js"),i=r("./node_modules/lodash/_nodeUtil.js"),o=i&&i.isTypedArray,a=o?n(o):s;e.exports=a},"./node_modules/lodash/keys.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayLikeKeys.js"),n=r("./node_modules/lodash/_baseKeys.js"),i=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e){return i(e)?s(e):n(e)}},"./node_modules/lodash/map.js":(e,t,r)=>{var s=r("./node_modules/lodash/_arrayMap.js"),n=r("./node_modules/lodash/_baseIteratee.js"),i=r("./node_modules/lodash/_baseMap.js"),o=r("./node_modules/lodash/isArray.js");e.exports=function(e,t){return(o(e)?s:i)(e,n(t,3))}},"./node_modules/lodash/memoize.js":(e,t,r)=>{var s=r("./node_modules/lodash/_MapCache.js");function n(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var r=function(){var s=arguments,n=t?t.apply(this,s):s[0],i=r.cache;if(i.has(n))return i.get(n);var o=e.apply(this,s);return r.cache=i.set(n,o)||i,o};return r.cache=new(n.Cache||s),r}n.Cache=s,e.exports=n},"./node_modules/lodash/property.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseProperty.js"),n=r("./node_modules/lodash/_basePropertyDeep.js"),i=r("./node_modules/lodash/_isKey.js"),o=r("./node_modules/lodash/_toKey.js");e.exports=function(e){return i(e)?s(o(e)):n(e)}},"./node_modules/lodash/stubArray.js":e=>{e.exports=function(){return[]}},"./node_modules/lodash/stubFalse.js":e=>{e.exports=function(){return!1}},"./node_modules/lodash/toString.js":(e,t,r)=>{var s=r("./node_modules/lodash/_baseToString.js");e.exports=function(e){return null==e?"":s(e)}},"./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js":(e,t,r)=>{"use strict";var s=r("./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js"),n=Object.create(null),i="undefined"==typeof document,o=Array.prototype.forEach;function a(){}function l(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(d(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.addEventListener("error",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function u(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return o.call(t,(function(t){if(t.href){var n=function(e,t){var r;return e=s(e),t.some((function(s){e.indexOf(t)>-1&&(r=s)})),r}(t.href,e);d(n)&&!0!==t.visited&&n&&(l(t,n),r=!0)}})),r}function c(){var e=document.querySelectorAll("link");o.call(e,(function(e){!0!==e.visited&&l(e)}))}function d(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,t){if(i)return console.log("no window.document found, will not HMR CSS"),a;var r,o,l,d=function(e){var t=n[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),i=r[r.length-1];i&&(t=i.src)}n[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),n=r&&r[1];return n&&e?e.split(",").map((function(e){var r=new RegExp("".concat(n,"\\.js$"),"g");return s(t.replace(r,"".concat(e.replace(/{fileName}/g,n),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=d(t.filename),r=u(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void c();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),c())},o=50,l=0,function(){var e=this,t=arguments,s=function(){return r.apply(e,t)};clearTimeout(l),l=setTimeout(s,o)}}},"./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js":e=>{"use strict";e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),s=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+s+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},"./node_modules/normalize-wheel/index.js":(e,t,r)=>{e.exports=r("./node_modules/normalize-wheel/src/normalizeWheel.js")},"./node_modules/normalize-wheel/src/ExecutionEnvironment.js":e=>{"use strict";var t=!("undefined"==typeof window||!window.document||!window.document.createElement),r={canUseDOM:t,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:t&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:t&&!!window.screen,isInWorker:!t};e.exports=r},"./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":e=>{var t,r,s,n,i,o,a,l,u,c,d,h,p,f,m,g=!1;function _(){if(!g){g=!0;var e=navigator.userAgent,_=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(e),v=/(Mac OS X)|(Windows)|(Linux)/.exec(e);if(h=/\b(iPhone|iP[ao]d)/.exec(e),p=/\b(iP[ao]d)/.exec(e),c=/Android/i.exec(e),f=/FBAN\/\w+;/i.exec(e),m=/Mobile/i.exec(e),d=!!/Win64/.exec(e),_){(t=_[1]?parseFloat(_[1]):_[5]?parseFloat(_[5]):NaN)&&document&&document.documentMode&&(t=document.documentMode);var y=/(?:Trident\/(\d+.\d+))/.exec(e);o=y?parseFloat(y[1])+4:t,r=_[2]?parseFloat(_[2]):NaN,s=_[3]?parseFloat(_[3]):NaN,(n=_[4]?parseFloat(_[4]):NaN)?(_=/(?:Chrome\/(\d+\.\d+))/.exec(e),i=_&&_[1]?parseFloat(_[1]):NaN):i=NaN}else t=r=s=i=n=NaN;if(v){if(v[1]){var b=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(e);a=!b||parseFloat(b[1].replace("_","."))}else a=!1;l=!!v[2],u=!!v[3]}else a=l=u=!1}}var v={ie:function(){return _()||t},ieCompatibilityMode:function(){return _()||o>t},ie64:function(){return v.ie()&&d},firefox:function(){return _()||r},opera:function(){return _()||s},webkit:function(){return _()||n},safari:function(){return v.webkit()},chrome:function(){return _()||i},windows:function(){return _()||l},osx:function(){return _()||a},linux:function(){return _()||u},iphone:function(){return _()||h},mobile:function(){return _()||h||p||c||m},nativeApp:function(){return _()||f},android:function(){return _()||c},ipad:function(){return _()||p}};e.exports=v},"./node_modules/normalize-wheel/src/isEventSupported.js":(e,t,r)=>{"use strict";var s,n=r("./node_modules/normalize-wheel/src/ExecutionEnvironment.js");n.canUseDOM&&(s=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),e.exports=function(e,t){if(!n.canUseDOM||t&&!("addEventListener"in document))return!1;var r="on"+e,i=r in document;if(!i){var o=document.createElement("div");o.setAttribute(r,"return;"),i="function"==typeof o[r]}return!i&&s&&"wheel"===e&&(i=document.implementation.hasFeature("Events.wheel","3.0")),i}},"./node_modules/normalize-wheel/src/normalizeWheel.js":(e,t,r)=>{"use strict";var s=r("./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js"),n=r("./node_modules/normalize-wheel/src/isEventSupported.js");function i(e){var t=0,r=0,s=0,n=0;return"detail"in e&&(r=e.detail),"wheelDelta"in e&&(r=-e.wheelDelta/120),"wheelDeltaY"in e&&(r=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=r,r=0),s=10*t,n=10*r,"deltaY"in e&&(n=e.deltaY),"deltaX"in e&&(s=e.deltaX),(s||n)&&e.deltaMode&&(1==e.deltaMode?(s*=40,n*=40):(s*=800,n*=800)),s&&!t&&(t=s<1?-1:1),n&&!r&&(r=n<1?-1:1),{spinX:t,spinY:r,pixelX:s,pixelY:n}}i.getEventType=function(){return s.firefox()?"DOMMouseScroll":n("wheel")?"wheel":"mousewheel"},e.exports=i},"./node_modules/ogl/src/core/Camera.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Camera:()=>u});var s=r("./node_modules/ogl/src/core/Transform.js"),n=r("./node_modules/ogl/src/math/Mat4.js"),i=r("./node_modules/ogl/src/math/Vec3.js");const o=new n.Mat4,a=new i.Vec3,l=new i.Vec3;class u extends s.Transform{constructor(e,{near:t=.1,far:r=100,fov:s=45,aspect:o=1,left:a,right:l,bottom:u,top:c,zoom:d=1}={}){super(),Object.assign(this,{near:t,far:r,fov:s,aspect:o,left:a,right:l,bottom:u,top:c,zoom:d}),this.projectionMatrix=new n.Mat4,this.viewMatrix=new n.Mat4,this.projectionViewMatrix=new n.Mat4,this.worldPosition=new i.Vec3,this.type=a||l?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:e=this.near,far:t=this.far,fov:r=this.fov,aspect:s=this.aspect}={}){return Object.assign(this,{near:e,far:t,fov:r,aspect:s}),this.projectionMatrix.fromPerspective({fov:r*(Math.PI/180),aspect:s,near:e,far:t}),this.type="perspective",this}orthographic({near:e=this.near,far:t=this.far,left:r=this.left,right:s=this.right,bottom:n=this.bottom,top:i=this.top,zoom:o=this.zoom}={}){return Object.assign(this,{near:e,far:t,left:r,right:s,bottom:n,top:i,zoom:o}),r/=o,s/=o,n/=o,i/=o,this.projectionMatrix.fromOrthogonal({left:r,right:s,bottom:n,top:i,near:e,far:t}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}lookAt(e){return super.lookAt(e,!0),this}project(e){return e.applyMatrix4(this.viewMatrix),e.applyMatrix4(this.projectionMatrix),this}unproject(e){return e.applyMatrix4(o.inverse(this.projectionMatrix)),e.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3]);const e=this.projectionViewMatrix;this.frustum[0].set(e[3]-e[0],e[7]-e[4],e[11]-e[8]).constant=e[15]-e[12],this.frustum[1].set(e[3]+e[0],e[7]+e[4],e[11]+e[8]).constant=e[15]+e[12],this.frustum[2].set(e[3]+e[1],e[7]+e[5],e[11]+e[9]).constant=e[15]+e[13],this.frustum[3].set(e[3]-e[1],e[7]-e[5],e[11]-e[9]).constant=e[15]-e[13],this.frustum[4].set(e[3]-e[2],e[7]-e[6],e[11]-e[10]).constant=e[15]-e[14],this.frustum[5].set(e[3]+e[2],e[7]+e[6],e[11]+e[10]).constant=e[15]+e[14];for(let e=0;e<6;e++){const t=1/this.frustum[e].distance();this.frustum[e].multiply(t),this.frustum[e].constant*=t}}frustumIntersectsMesh(e){if(!e.geometry.attributes.position)return!0;if(e.geometry.bounds&&e.geometry.bounds.radius!==1/0||e.geometry.computeBoundingSphere(),!e.geometry.bounds)return!0;const t=a;t.copy(e.geometry.bounds.center),t.applyMatrix4(e.worldMatrix);const r=e.geometry.bounds.radius*e.worldMatrix.getMaxScaleOnAxis();return this.frustumIntersectsSphere(t,r)}frustumIntersectsSphere(e,t){const r=l;for(let s=0;s<6;s++){const n=this.frustum[s];if(r.copy(n).dot(e)+n.constant<-t)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Geometry:()=>l});var s=r("./node_modules/ogl/src/math/Vec3.js");const n=new s.Vec3;let i=1,o=1,a=!1;class l{constructor(e,t={}){e.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=e,this.attributes=t,this.id=i++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let e in t)this.addAttribute(e,t[e])}addAttribute(e,t){if(this.attributes[e]=t,t.id=o++,t.size=t.size||1,t.type=t.type||(t.data.constructor===Float32Array?this.gl.FLOAT:t.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),t.target="index"===e?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,t.normalized=t.normalized||!1,t.stride=t.stride||0,t.offset=t.offset||0,t.count=t.count||(t.stride?t.data.byteLength/t.stride:t.data.length/t.size),t.divisor=t.instanced||0,t.needsUpdate=!1,t.usage=t.usage||this.gl.STATIC_DRAW,t.buffer||this.updateAttribute(t),t.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==t.count*t.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,t.count*t.divisor);this.instancedCount=t.count*t.divisor}else"index"===e?this.drawRange.count=t.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,t.count))}updateAttribute(e){const t=!e.buffer;t&&(e.buffer=this.gl.createBuffer()),this.glState.boundBuffer!==e.buffer&&(this.gl.bindBuffer(e.target,e.buffer),this.glState.boundBuffer=e.buffer),t?this.gl.bufferData(e.target,e.data,e.usage):this.gl.bufferSubData(e.target,0,e.data),e.needsUpdate=!1}setIndex(e){this.addAttribute("index",e)}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}setInstancedCount(e){this.instancedCount=e}createVAO(e){this.VAOs[e.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[e.attributeOrder]),this.bindAttributes(e)}bindAttributes(e){e.attributeLocations.forEach(((e,{name:t,type:r})=>{if(!this.attributes[t])return void console.warn(`active attribute ${t} not being supplied`);const s=this.attributes[t];this.gl.bindBuffer(s.target,s.buffer),this.glState.boundBuffer=s.buffer;let n=1;35674===r&&(n=2),35675===r&&(n=3),35676===r&&(n=4);const i=s.size/n,o=1===n?0:n*n*n,a=1===n?0:n*n;for(let t=0;t<n;t++)this.gl.vertexAttribPointer(e+t,i,s.type,s.normalized,s.stride+o,s.offset+t*a),this.gl.enableVertexAttribArray(e+t),this.gl.renderer.vertexAttribDivisor(e+t,s.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:e,mode:t=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${e.attributeOrder}`&&(this.VAOs[e.attributeOrder]||this.createVAO(e),this.gl.renderer.bindVertexArray(this.VAOs[e.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${e.attributeOrder}`),e.attributeLocations.forEach(((e,{name:t})=>{const r=this.attributes[t];r.needsUpdate&&this.updateAttribute(r)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(t,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(t,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(t,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(t,this.drawRange.start,this.drawRange.count)}getPosition(){const e=this.attributes.position;return e.data?e:a?void 0:(console.warn("No position buffer data found to compute bounds"),a=!0)}computeBoundingBox(e){e||(e=this.getPosition());const t=e.data,r=e.stride?e.stride/t.BYTES_PER_ELEMENT:e.size;this.bounds||(this.bounds={min:new s.Vec3,max:new s.Vec3,center:new s.Vec3,scale:new s.Vec3,radius:1/0});const n=this.bounds.min,i=this.bounds.max,o=this.bounds.center,a=this.bounds.scale;n.set(1/0),i.set(-1/0);for(let e=0,s=t.length;e<s;e+=r){const r=t[e],s=t[e+1],o=t[e+2];n.x=Math.min(r,n.x),n.y=Math.min(s,n.y),n.z=Math.min(o,n.z),i.x=Math.max(r,i.x),i.y=Math.max(s,i.y),i.z=Math.max(o,i.z)}a.sub(i,n),o.add(n,i).divide(2)}computeBoundingSphere(e){e||(e=this.getPosition());const t=e.data,r=e.stride?e.stride/t.BYTES_PER_ELEMENT:e.size;this.bounds||this.computeBoundingBox(e);let s=0;for(let e=0,i=t.length;e<i;e+=r)n.fromArray(t,e),s=Math.max(s,this.bounds.center.squaredDistance(n));this.bounds.radius=Math.sqrt(s)}remove(){for(let e in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[e]),delete this.VAOs[e];for(let e in this.attributes)this.gl.deleteBuffer(this.attributes[e].buffer),delete this.attributes[e]}}},"./node_modules/ogl/src/core/Mesh.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mesh:()=>a});var s=r("./node_modules/ogl/src/core/Transform.js"),n=r("./node_modules/ogl/src/math/Mat3.js"),i=r("./node_modules/ogl/src/math/Mat4.js");let o=0;class a extends s.Transform{constructor(e,{geometry:t,program:r,mode:s=e.TRIANGLES,frustumCulled:a=!0,renderOrder:l=0}={}){super(),e.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=e,this.id=o++,this.geometry=t,this.program=r,this.mode=s,this.frustumCulled=a,this.renderOrder=l,this.modelViewMatrix=new i.Mat4,this.normalMatrix=new n.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(e){return this.beforeRenderCallbacks.push(e),this}onAfterRender(e){return this.afterRenderCallbacks.push(e),this}draw({camera:e}={}){this.beforeRenderCallbacks.forEach((t=>t&&t({mesh:this,camera:e}))),e&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=e.projectionMatrix,this.program.uniforms.cameraPosition.value=e.worldPosition,this.program.uniforms.viewMatrix.value=e.viewMatrix,this.modelViewMatrix.multiply(e.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let t=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:t}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((t=>t&&t({mesh:this,camera:e})))}}},"./node_modules/ogl/src/core/Program.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Program:()=>i});let s=1;const n={};class i{constructor(e,{vertex:t,fragment:r,uniforms:n={},transparent:i=!1,cullFace:o=e.BACK,frontFace:l=e.CCW,depthTest:u=!0,depthWrite:c=!0,depthFunc:d=e.LESS}={}){e.canvas||console.error("gl not passed as fist argument to Program"),this.gl=e,this.uniforms=n,this.id=s++,t||console.warn("vertex shader not supplied"),r||console.warn("fragment shader not supplied"),this.transparent=i,this.cullFace=o,this.frontFace=l,this.depthTest=u,this.depthWrite=c,this.depthFunc=d,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const h=e.createShader(e.VERTEX_SHADER);e.shaderSource(h,t),e.compileShader(h),""!==e.getShaderInfoLog(h)&&console.warn(`${e.getShaderInfoLog(h)}\nVertex Shader\n${a(t)}`);const p=e.createShader(e.FRAGMENT_SHADER);if(e.shaderSource(p,r),e.compileShader(p),""!==e.getShaderInfoLog(p)&&console.warn(`${e.getShaderInfoLog(p)}\nFragment Shader\n${a(r)}`),this.program=e.createProgram(),e.attachShader(this.program,h),e.attachShader(this.program,p),e.linkProgram(this.program),!e.getProgramParameter(this.program,e.LINK_STATUS))return console.warn(e.getProgramInfoLog(this.program));e.deleteShader(h),e.deleteShader(p),this.uniformLocations=new Map;let f=e.getProgramParameter(this.program,e.ACTIVE_UNIFORMS);for(let t=0;t<f;t++){let r=e.getActiveUniform(this.program,t);this.uniformLocations.set(r,e.getUniformLocation(this.program,r.name));const s=r.name.match(/(\w+)/g);r.uniformName=s[0],3===s.length?(r.isStructArray=!0,r.structIndex=Number(s[1]),r.structProperty=s[2]):2===s.length&&isNaN(Number(s[1]))&&(r.isStruct=!0,r.structProperty=s[1])}this.attributeLocations=new Map;const m=[],g=e.getProgramParameter(this.program,e.ACTIVE_ATTRIBUTES);for(let t=0;t<g;t++){const r=e.getActiveAttrib(this.program,t),s=e.getAttribLocation(this.program,r.name);-1!==s&&(m[s]=r.name,this.attributeLocations.set(r,s))}this.attributeOrder=m.join("")}setBlendFunc(e,t,r,s){this.blendFunc.src=e,this.blendFunc.dst=t,this.blendFunc.srcAlpha=r,this.blendFunc.dstAlpha=s,e&&(this.transparent=!0)}setBlendEquation(e,t){this.blendEquation.modeRGB=e,this.blendEquation.modeAlpha=t}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:e=!1}={}){let t=-1;this.gl.renderer.state.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.state.currentProgram=this.id),this.uniformLocations.forEach(((e,r)=>{let s=r.uniformName,n=this.uniforms[s];if(r.isStruct&&(n=n[r.structProperty],s+=`.${r.structProperty}`),r.isStructArray&&(n=n[r.structIndex][r.structProperty],s+=`[${r.structIndex}].${r.structProperty}`),!n)return u(`Active uniform ${s} has not been supplied`);if(n&&void 0===n.value)return u(`${s} uniform is missing a value parameter`);if(n.value.texture)return t+=1,n.value.update(t),o(this.gl,r.type,e,t);if(n.value.length&&n.value[0].texture){const s=[];return n.value.forEach((e=>{t+=1,e.update(t),s.push(t)})),o(this.gl,r.type,e,s)}o(this.gl,r.type,e,n.value)})),this.applyState(),e&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function o(e,t,r,s){s=s.length?function(e){const t=e.length,r=e[0].length;if(void 0===r)return e;const s=t*r;let i=n[s];i||(n[s]=i=new Float32Array(s));for(let s=0;s<t;s++)i.set(e[s],s*r);return i}(s):s;const i=e.renderer.state.uniformLocations.get(r);if(s.length)if(void 0===i||i.length!==s.length)e.renderer.state.uniformLocations.set(r,s.slice(0));else{if(function(e,t){if(e.length!==t.length)return!1;for(let r=0,s=e.length;r<s;r++)if(e[r]!==t[r])return!1;return!0}(i,s))return;i.set?i.set(s):function(e,t){for(let r=0,s=e.length;r<s;r++)e[r]=t[r]}(i,s),e.renderer.state.uniformLocations.set(r,i)}else{if(i===s)return;e.renderer.state.uniformLocations.set(r,s)}switch(t){case 5126:return s.length?e.uniform1fv(r,s):e.uniform1f(r,s);case 35664:return e.uniform2fv(r,s);case 35665:return e.uniform3fv(r,s);case 35666:return e.uniform4fv(r,s);case 35670:case 5124:case 35678:case 35680:return s.length?e.uniform1iv(r,s):e.uniform1i(r,s);case 35671:case 35667:return e.uniform2iv(r,s);case 35672:case 35668:return e.uniform3iv(r,s);case 35673:case 35669:return e.uniform4iv(r,s);case 35674:return e.uniformMatrix2fv(r,!1,s);case 35675:return e.uniformMatrix3fv(r,!1,s);case 35676:return e.uniformMatrix4fv(r,!1,s)}}function a(e){let t=e.split("\n");for(let e=0;e<t.length;e++)t[e]=e+1+": "+t[e];return t.join("\n")}let l=0;function u(e){l>100||(console.warn(e),l++,l>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Renderer:()=>i});const s=new(r("./node_modules/ogl/src/math/Vec3.js").Vec3);let n=1;class i{constructor({canvas:e=document.createElement("canvas"),width:t=300,height:r=150,dpr:s=1,alpha:i=!1,depth:o=!0,stencil:a=!1,antialias:l=!1,premultipliedAlpha:u=!1,preserveDrawingBuffer:c=!1,powerPreference:d="default",autoClear:h=!0,webgl:p=2}={}){const f={alpha:i,depth:o,stencil:a,antialias:l,premultipliedAlpha:u,preserveDrawingBuffer:c,powerPreference:d};this.dpr=s,this.alpha=i,this.color=!0,this.depth=o,this.stencil=a,this.premultipliedAlpha=u,this.autoClear=h,this.id=n++,2===p&&(this.gl=e.getContext("webgl2",f)),this.isWebgl2=!!this.gl,this.gl||(this.gl=e.getContext("webgl",f)),this.gl||console.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(t,r),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=null,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LESS,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={x:0,y:0,width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.state.currentProgram=null,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.getExtension("WEBGL_compressed_texture_astc"),this.getExtension("EXT_texture_compression_bptc"),this.getExtension("WEBGL_compressed_texture_s3tc"),this.getExtension("WEBGL_compressed_texture_etc1"),this.getExtension("WEBGL_compressed_texture_pvrtc"),this.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(e,t){this.width=e,this.height=t,this.gl.canvas.width=e*this.dpr,this.gl.canvas.height=t*this.dpr,Object.assign(this.gl.canvas.style,{width:e+"px",height:t+"px"})}setViewport(e,t,r=0,s=0){this.state.viewport.width===e&&this.state.viewport.height===t||(this.state.viewport.width=e,this.state.viewport.height=t,this.state.viewport.x=r,this.state.viewport.y=s,this.gl.viewport(r,s,e,t))}setScissor(e,t,r=0,s=0){this.gl.scissor(r,s,e,t)}enable(e){!0!==this.state[e]&&(this.gl.enable(e),this.state[e]=!0)}disable(e){!1!==this.state[e]&&(this.gl.disable(e),this.state[e]=!1)}setBlendFunc(e,t,r,s){this.state.blendFunc.src===e&&this.state.blendFunc.dst===t&&this.state.blendFunc.srcAlpha===r&&this.state.blendFunc.dstAlpha===s||(this.state.blendFunc.src=e,this.state.blendFunc.dst=t,this.state.blendFunc.srcAlpha=r,this.state.blendFunc.dstAlpha=s,void 0!==r?this.gl.blendFuncSeparate(e,t,r,s):this.gl.blendFunc(e,t))}setBlendEquation(e,t){e=e||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===e&&this.state.blendEquation.modeAlpha===t||(this.state.blendEquation.modeRGB=e,this.state.blendEquation.modeAlpha=t,void 0!==t?this.gl.blendEquationSeparate(e,t):this.gl.blendEquation(e))}setCullFace(e){this.state.cullFace!==e&&(this.state.cullFace=e,this.gl.cullFace(e))}setFrontFace(e){this.state.frontFace!==e&&(this.state.frontFace=e,this.gl.frontFace(e))}setDepthMask(e){this.state.depthMask!==e&&(this.state.depthMask=e,this.gl.depthMask(e))}setDepthFunc(e){this.state.depthFunc!==e&&(this.state.depthFunc=e,this.gl.depthFunc(e))}activeTexture(e){this.state.activeTextureUnit!==e&&(this.state.activeTextureUnit=e,this.gl.activeTexture(this.gl.TEXTURE0+e))}bindFramebuffer({target:e=this.gl.FRAMEBUFFER,buffer:t=null}={}){this.state.framebuffer!==t&&(this.state.framebuffer=t,this.gl.bindFramebuffer(e,t))}getExtension(e,t,r){return t&&this.gl[t]?this.gl[t].bind(this.gl):(this.extensions[e]||(this.extensions[e]=this.gl.getExtension(e)),t?this.extensions[e]?this.extensions[e][r].bind(this.extensions[e]):null:this.extensions[e])}sortOpaque(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program.id!==t.program.id?e.program.id-t.program.id:e.zDepth!==t.zDepth?e.zDepth-t.zDepth:t.id-e.id}sortTransparent(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.zDepth!==t.zDepth?t.zDepth-e.zDepth:t.id-e.id}sortUI(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program.id!==t.program.id?e.program.id-t.program.id:t.id-e.id}getRenderList({scene:e,camera:t,frustumCull:r,sort:n}){let i=[];if(t&&r&&t.updateFrustum(),e.traverse((e=>{if(!e.visible)return!0;e.draw&&(r&&e.frustumCulled&&t&&!t.frustumIntersectsMesh(e)||i.push(e))})),n){const e=[],r=[],n=[];i.forEach((i=>{i.program.transparent?i.program.depthTest?r.push(i):n.push(i):e.push(i),i.zDepth=0,0===i.renderOrder&&i.program.depthTest&&t&&(i.worldMatrix.getTranslation(s),s.applyMatrix4(t.projectionViewMatrix),i.zDepth=s.z)})),e.sort(this.sortOpaque),r.sort(this.sortTransparent),n.sort(this.sortUI),i=e.concat(r,n)}return i}render({scene:e,camera:t,target:r=null,update:s=!0,sort:n=!0,frustumCull:i=!0,clear:o}){null===r?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(r),this.setViewport(r.width,r.height)),(o||this.autoClear&&!1!==o)&&(!this.depth||r&&!r.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),s&&e.updateMatrixWorld(),t&&t.updateMatrixWorld();this.getRenderList({scene:e,camera:t,frustumCull:i,sort:n}).forEach((e=>{e.draw({camera:t})}))}}},"./node_modules/ogl/src/core/Texture.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Texture:()=>o});const s=new Uint8Array(4);function n(e){return 0==(e&e-1)}let i=1;class o{constructor(e,{image:t,target:r=e.TEXTURE_2D,type:s=e.UNSIGNED_BYTE,format:n=e.RGBA,internalFormat:o=n,wrapS:a=e.CLAMP_TO_EDGE,wrapT:l=e.CLAMP_TO_EDGE,generateMipmaps:u=!0,minFilter:c=(u?e.NEAREST_MIPMAP_LINEAR:e.LINEAR),magFilter:d=e.LINEAR,premultiplyAlpha:h=!1,unpackAlignment:p=4,flipY:f=r==e.TEXTURE_2D,anisotropy:m=0,level:g=0,width:_,height:v=_}={}){this.gl=e,this.id=i++,this.image=t,this.target=r,this.type=s,this.format=n,this.internalFormat=o,this.minFilter=c,this.magFilter=d,this.wrapS=a,this.wrapT=l,this.generateMipmaps=u,this.premultiplyAlpha=h,this.unpackAlignment=p,this.flipY=f,this.anisotropy=Math.min(m,this.gl.renderer.parameters.maxAnisotropy),this.level=g,this.width=_,this.height=v,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(e=0){const t=!(this.image===this.store.image&&!this.needsUpdate);if((t||this.glState.textureUnits[e]!==this.id)&&(this.gl.renderer.activeTexture(e),this.bind()),t){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let e=0;e<6;e++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+e,this.level,this.internalFormat,this.format,this.type,this.image[e]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let e=0;e<this.image.length;e++)this.gl.compressedTexImage2D(this.target,e,this.internalFormat,this.image[e].width,this.image[e].height,0,this.image[e].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||n(this.image.width)&&n(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let e=0;e<6;e++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);this.store.image=this.image}}}},"./node_modules/ogl/src/core/Transform.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Transform:()=>a});var s=r("./node_modules/ogl/src/math/Vec3.js"),n=r("./node_modules/ogl/src/math/Quat.js"),i=r("./node_modules/ogl/src/math/Mat4.js"),o=r("./node_modules/ogl/src/math/Euler.js");class a{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new i.Mat4,this.worldMatrix=new i.Mat4,this.matrixAutoUpdate=!0,this.position=new s.Vec3,this.quaternion=new n.Quat,this.scale=new s.Vec3(1),this.rotation=new o.Euler,this.up=new s.Vec3(0,1,0),this.rotation.onChange=()=>this.quaternion.fromEuler(this.rotation),this.quaternion.onChange=()=>this.rotation.fromQuaternion(this.quaternion)}setParent(e,t=!0){this.parent&&e!==this.parent&&this.parent.removeChild(this,!1),this.parent=e,t&&e&&e.addChild(this,!1)}addChild(e,t=!0){~this.children.indexOf(e)||this.children.push(e),t&&e.setParent(this,!1)}removeChild(e,t=!0){~this.children.indexOf(e)&&this.children.splice(this.children.indexOf(e),1),t&&e.setParent(null,!1)}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||e)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,e=!0);for(let t=0,r=this.children.length;t<r;t++)this.children[t].updateMatrixWorld(e)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(e){if(!e(this))for(let t=0,r=this.children.length;t<r;t++)this.children[t].traverse(e)}decompose(){this.matrix.getTranslation(this.position),this.matrix.getRotation(this.quaternion),this.matrix.getScaling(this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(e,t=!1){t?this.matrix.lookAt(this.position,e,this.up):this.matrix.lookAt(e,this.position,this.up),this.matrix.getRotation(this.quaternion),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Plane.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Plane:()=>n});var s=r("./node_modules/ogl/src/core/Geometry.js");class n extends s.Geometry{constructor(e,{width:t=1,height:r=1,widthSegments:s=1,heightSegments:i=1,attributes:o={}}={}){const a=s,l=i,u=(a+1)*(l+1),c=a*l*6,d=new Float32Array(3*u),h=new Float32Array(3*u),p=new Float32Array(2*u),f=c>65536?new Uint32Array(c):new Uint16Array(c);n.buildPlane(d,h,p,f,t,r,0,a,l),Object.assign(o,{position:{size:3,data:d},normal:{size:3,data:h},uv:{size:2,data:p},index:{data:f}}),super(e,o)}static buildPlane(e,t,r,s,n,i,o,a,l,u=0,c=1,d=2,h=1,p=-1,f=0,m=0){const g=f,_=n/a,v=i/l;for(let y=0;y<=l;y++){let b=y*v-i/2;for(let i=0;i<=a;i++,f++){let v=i*_-n/2;if(e[3*f+u]=v*h,e[3*f+c]=b*p,e[3*f+d]=o/2,t[3*f+u]=0,t[3*f+c]=0,t[3*f+d]=o>=0?1:-1,r[2*f]=i/a,r[2*f+1]=1-y/l,y===l||i===a)continue;let w=g+i+y*(a+1),x=g+i+(y+1)*(a+1),j=g+i+(y+1)*(a+1)+1,E=g+i+y*(a+1)+1;s[6*m]=w,s[6*m+1]=x,s[6*m+2]=E,s[6*m+3]=x,s[6*m+4]=j,s[6*m+5]=E,m++}}}}},"./node_modules/ogl/src/math/Euler.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Euler:()=>i});var s=r("./node_modules/ogl/src/math/functions/EulerFunc.js");const n=new(r("./node_modules/ogl/src/math/Mat4.js").Mat4);class i extends Array{constructor(e=0,t=e,r=e,s="YXZ"){return super(e,t,r),this.order=s,this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(e){this[0]=e,this.onChange()}set y(e){this[1]=e,this.onChange()}set z(e){this[2]=e,this.onChange()}set(e,t=e,r=e){return e.length?this.copy(e):(this[0]=e,this[1]=t,this[2]=r,this.onChange(),this)}copy(e){return this[0]=e[0],this[1]=e[1],this[2]=e[2],this.onChange(),this}reorder(e){return this.order=e,this.onChange(),this}fromRotationMatrix(e,t=this.order){return s.fromRotationMatrix(this,e,t),this}fromQuaternion(e,t=this.order){return n.fromQuaternion(e),this.fromRotationMatrix(n,t)}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e}}},"./node_modules/ogl/src/math/Mat3.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mat3:()=>n});var s=r("./node_modules/ogl/src/math/functions/Mat3Func.js");class n extends Array{constructor(e=1,t=0,r=0,s=0,n=1,i=0,o=0,a=0,l=1){return super(e,t,r,s,n,i,o,a,l),this}set(e,t,r,n,i,o,a,l,u){return e.length?this.copy(e):(s.set(this,e,t,r,n,i,o,a,l,u),this)}translate(e,t=this){return s.translate(this,t,e),this}rotate(e,t=this){return s.rotate(this,t,e),this}scale(e,t=this){return s.scale(this,t,e),this}multiply(e,t){return t?s.multiply(this,e,t):s.multiply(this,this,e),this}identity(){return s.identity(this),this}copy(e){return s.copy(this,e),this}fromMatrix4(e){return s.fromMat4(this,e),this}fromQuaternion(e){return s.fromQuat(this,e),this}fromBasis(e,t,r){return this.set(e[0],e[1],e[2],t[0],t[1],t[2],r[0],r[1],r[2]),this}inverse(e=this){return s.invert(this,e),this}getNormalMatrix(e){return s.normalFromMat4(this,e),this}}},"./node_modules/ogl/src/math/Mat4.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mat4:()=>n});var s=r("./node_modules/ogl/src/math/functions/Mat4Func.js");class n extends Array{constructor(e=1,t=0,r=0,s=0,n=0,i=1,o=0,a=0,l=0,u=0,c=1,d=0,h=0,p=0,f=0,m=1){return super(e,t,r,s,n,i,o,a,l,u,c,d,h,p,f,m),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(e){this[12]=e}set y(e){this[13]=e}set z(e){this[14]=e}set w(e){this[15]=e}set(e,t,r,n,i,o,a,l,u,c,d,h,p,f,m,g){return e.length?this.copy(e):(s.set(this,e,t,r,n,i,o,a,l,u,c,d,h,p,f,m,g),this)}translate(e,t=this){return s.translate(this,t,e),this}rotate(e,t,r=this){return s.rotate(this,r,e,t),this}scale(e,t=this){return s.scale(this,t,"number"==typeof e?[e,e,e]:e),this}multiply(e,t){return t?s.multiply(this,e,t):s.multiply(this,this,e),this}identity(){return s.identity(this),this}copy(e){return s.copy(this,e),this}fromPerspective({fov:e,aspect:t,near:r,far:n}={}){return s.perspective(this,e,t,r,n),this}fromOrthogonal({left:e,right:t,bottom:r,top:n,near:i,far:o}){return s.ortho(this,e,t,r,n,i,o),this}fromQuaternion(e){return s.fromQuat(this,e),this}setPosition(e){return this.x=e[0],this.y=e[1],this.z=e[2],this}inverse(e=this){return s.invert(this,e),this}compose(e,t,r){return s.fromRotationTranslationScale(this,e,t,r),this}getRotation(e){return s.getRotation(e,this),this}getTranslation(e){return s.getTranslation(e,this),this}getScaling(e){return s.getScaling(e,this),this}getMaxScaleOnAxis(){return s.getMaxScaleOnAxis(this)}lookAt(e,t,r){return s.targetTo(this,e,t,r),this}determinant(){return s.determinant(this)}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this[3]=e[t+3],this[4]=e[t+4],this[5]=e[t+5],this[6]=e[t+6],this[7]=e[t+7],this[8]=e[t+8],this[9]=e[t+9],this[10]=e[t+10],this[11]=e[t+11],this[12]=e[t+12],this[13]=e[t+13],this[14]=e[t+14],this[15]=e[t+15],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e[t+3]=this[3],e[t+4]=this[4],e[t+5]=this[5],e[t+6]=this[6],e[t+7]=this[7],e[t+8]=this[8],e[t+9]=this[9],e[t+10]=this[10],e[t+11]=this[11],e[t+12]=this[12],e[t+13]=this[13],e[t+14]=this[14],e[t+15]=this[15],e}}},"./node_modules/ogl/src/math/Quat.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Quat:()=>n});var s=r("./node_modules/ogl/src/math/functions/QuatFunc.js");class n extends Array{constructor(e=0,t=0,r=0,s=1){return super(e,t,r,s),this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(e){this[0]=e,this.onChange()}set y(e){this[1]=e,this.onChange()}set z(e){this[2]=e,this.onChange()}set w(e){this[3]=e,this.onChange()}identity(){return s.identity(this),this.onChange(),this}set(e,t,r,n){return e.length?this.copy(e):(s.set(this,e,t,r,n),this.onChange(),this)}rotateX(e){return s.rotateX(this,this,e),this.onChange(),this}rotateY(e){return s.rotateY(this,this,e),this.onChange(),this}rotateZ(e){return s.rotateZ(this,this,e),this.onChange(),this}inverse(e=this){return s.invert(this,e),this.onChange(),this}conjugate(e=this){return s.conjugate(this,e),this.onChange(),this}copy(e){return s.copy(this,e),this.onChange(),this}normalize(e=this){return s.normalize(this,e),this.onChange(),this}multiply(e,t){return t?s.multiply(this,e,t):s.multiply(this,this,e),this.onChange(),this}dot(e){return s.dot(this,e)}fromMatrix3(e){return s.fromMat3(this,e),this.onChange(),this}fromEuler(e){return s.fromEuler(this,e,e.order),this}fromAxisAngle(e,t){return s.setAxisAngle(this,e,t),this}slerp(e,t){return s.slerp(this,this,e,t),this}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this[3]=e[t+3],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e[t+3]=this[3],e}}},"./node_modules/ogl/src/math/Vec3.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Vec3:()=>n});var s=r("./node_modules/ogl/src/math/functions/Vec3Func.js");class n extends Array{constructor(e=0,t=e,r=e){return super(e,t,r),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(e){this[0]=e}set y(e){this[1]=e}set z(e){this[2]=e}set(e,t=e,r=e){return e.length?this.copy(e):(s.set(this,e,t,r),this)}copy(e){return s.copy(this,e),this}add(e,t){return t?s.add(this,e,t):s.add(this,this,e),this}sub(e,t){return t?s.subtract(this,e,t):s.subtract(this,this,e),this}multiply(e){return e.length?s.multiply(this,this,e):s.scale(this,this,e),this}divide(e){return e.length?s.divide(this,this,e):s.scale(this,this,1/e),this}inverse(e=this){return s.inverse(this,e),this}len(){return s.length(this)}distance(e){return e?s.distance(this,e):s.length(this)}squaredLen(){return s.squaredLength(this)}squaredDistance(e){return e?s.squaredDistance(this,e):s.squaredLength(this)}negate(e=this){return s.negate(this,e),this}cross(e,t){return t?s.cross(this,e,t):s.cross(this,this,e),this}scale(e){return s.scale(this,this,e),this}normalize(){return s.normalize(this,this),this}dot(e){return s.dot(this,e)}equals(e){return s.exactEquals(this,e)}applyMatrix3(e){return s.transformMat3(this,this,e),this}applyMatrix4(e){return s.transformMat4(this,this,e),this}scaleRotateMatrix4(e){return s.scaleRotateMat4(this,this,e),this}applyQuaternion(e){return s.transformQuat(this,this,e),this}angle(e){return s.angle(this,e)}lerp(e,t){return s.lerp(this,this,e,t),this}clone(){return new n(this[0],this[1],this[2])}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e}transformDirection(e){const t=this[0],r=this[1],s=this[2];return this[0]=e[0]*t+e[4]*r+e[8]*s,this[1]=e[1]*t+e[5]*r+e[9]*s,this[2]=e[2]*t+e[6]*r+e[10]*s,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(e,t,r)=>{"use strict";function s(e,t,r="YXZ"){return"XYZ"===r?(e[1]=Math.asin(Math.min(Math.max(t[8],-1),1)),Math.abs(t[8])<.99999?(e[0]=Math.atan2(-t[9],t[10]),e[2]=Math.atan2(-t[4],t[0])):(e[0]=Math.atan2(t[6],t[5]),e[2]=0)):"YXZ"===r?(e[0]=Math.asin(-Math.min(Math.max(t[9],-1),1)),Math.abs(t[9])<.99999?(e[1]=Math.atan2(t[8],t[10]),e[2]=Math.atan2(t[1],t[5])):(e[1]=Math.atan2(-t[2],t[0]),e[2]=0)):"ZXY"===r?(e[0]=Math.asin(Math.min(Math.max(t[6],-1),1)),Math.abs(t[6])<.99999?(e[1]=Math.atan2(-t[2],t[10]),e[2]=Math.atan2(-t[4],t[5])):(e[1]=0,e[2]=Math.atan2(t[1],t[0]))):"ZYX"===r?(e[1]=Math.asin(-Math.min(Math.max(t[2],-1),1)),Math.abs(t[2])<.99999?(e[0]=Math.atan2(t[6],t[10]),e[2]=Math.atan2(t[1],t[0])):(e[0]=0,e[2]=Math.atan2(-t[4],t[5]))):"YZX"===r?(e[2]=Math.asin(Math.min(Math.max(t[1],-1),1)),Math.abs(t[1])<.99999?(e[0]=Math.atan2(-t[9],t[5]),e[1]=Math.atan2(-t[2],t[0])):(e[0]=0,e[1]=Math.atan2(t[8],t[10]))):"XZY"===r&&(e[2]=Math.asin(-Math.min(Math.max(t[4],-1),1)),Math.abs(t[4])<.99999?(e[0]=Math.atan2(t[6],t[5]),e[1]=Math.atan2(t[8],t[0])):(e[0]=Math.atan2(-t[9],t[10]),e[1]=0)),e}r.r(t),r.d(t,{fromRotationMatrix:()=>s})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>_,copy:()=>i,determinant:()=>c,fromMat4:()=>s,fromQuat:()=>n,identity:()=>a,invert:()=>u,multiply:()=>d,multiplyScalar:()=>y,normalFromMat4:()=>m,projection:()=>g,rotate:()=>p,scale:()=>f,set:()=>o,subtract:()=>v,translate:()=>h,transpose:()=>l});function s(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}function n(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=r+r,a=s+s,l=n+n,u=r*o,c=s*o,d=s*a,h=n*o,p=n*a,f=n*l,m=i*o,g=i*a,_=i*l;return e[0]=1-d-f,e[3]=c-_,e[6]=h+g,e[1]=c+_,e[4]=1-u-f,e[7]=p-m,e[2]=h-g,e[5]=p+m,e[8]=1-u-d,e}function i(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function o(e,t,r,s,n,i,o,a,l,u){return e[0]=t,e[1]=r,e[2]=s,e[3]=n,e[4]=i,e[5]=o,e[6]=a,e[7]=l,e[8]=u,e}function a(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function l(e,t){if(e===t){let r=t[1],s=t[2],n=t[5];e[1]=t[3],e[2]=t[6],e[3]=r,e[5]=t[7],e[6]=s,e[7]=n}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}function u(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],c=t[8],d=c*o-a*u,h=-c*i+a*l,p=u*i-o*l,f=r*d+s*h+n*p;return f?(f=1/f,e[0]=d*f,e[1]=(-c*s+n*u)*f,e[2]=(a*s-n*o)*f,e[3]=h*f,e[4]=(c*r-n*l)*f,e[5]=(-a*r+n*i)*f,e[6]=p*f,e[7]=(-u*r+s*l)*f,e[8]=(o*r-s*i)*f,e):null}function c(e){let t=e[0],r=e[1],s=e[2],n=e[3],i=e[4],o=e[5],a=e[6],l=e[7],u=e[8];return t*(u*i-o*l)+r*(-u*n+o*a)+s*(l*n-i*a)}function d(e,t,r){let s=t[0],n=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],d=t[8],h=r[0],p=r[1],f=r[2],m=r[3],g=r[4],_=r[5],v=r[6],y=r[7],b=r[8];return e[0]=h*s+p*o+f*u,e[1]=h*n+p*a+f*c,e[2]=h*i+p*l+f*d,e[3]=m*s+g*o+_*u,e[4]=m*n+g*a+_*c,e[5]=m*i+g*l+_*d,e[6]=v*s+y*o+b*u,e[7]=v*n+y*a+b*c,e[8]=v*i+y*l+b*d,e}function h(e,t,r){let s=t[0],n=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],d=t[8],h=r[0],p=r[1];return e[0]=s,e[1]=n,e[2]=i,e[3]=o,e[4]=a,e[5]=l,e[6]=h*s+p*o+u,e[7]=h*n+p*a+c,e[8]=h*i+p*l+d,e}function p(e,t,r){let s=t[0],n=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],d=t[8],h=Math.sin(r),p=Math.cos(r);return e[0]=p*s+h*o,e[1]=p*n+h*a,e[2]=p*i+h*l,e[3]=p*o-h*s,e[4]=p*a-h*n,e[5]=p*l-h*i,e[6]=u,e[7]=c,e[8]=d,e}function f(e,t,r){let s=r[0],n=r[1];return e[0]=s*t[0],e[1]=s*t[1],e[2]=s*t[2],e[3]=n*t[3],e[4]=n*t[4],e[5]=n*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function m(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],c=t[8],d=t[9],h=t[10],p=t[11],f=t[12],m=t[13],g=t[14],_=t[15],v=r*a-s*o,y=r*l-n*o,b=r*u-i*o,w=s*l-n*a,x=s*u-i*a,j=n*u-i*l,E=c*m-d*f,A=c*g-h*f,T=c*_-p*f,M=d*g-h*m,S=d*_-p*m,k=h*_-p*g,C=v*k-y*S+b*M+w*T-x*A+j*E;return C?(C=1/C,e[0]=(a*k-l*S+u*M)*C,e[1]=(l*T-o*k-u*A)*C,e[2]=(o*S-a*T+u*E)*C,e[3]=(n*S-s*k-i*M)*C,e[4]=(r*k-n*T+i*A)*C,e[5]=(s*T-r*S-i*E)*C,e[6]=(m*j-g*x+_*w)*C,e[7]=(g*b-f*j-_*y)*C,e[8]=(f*x-m*b+_*v)*C,e):null}function g(e,t,r){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/r,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}function _(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e}function v(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e}function y(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>x,copy:()=>s,determinant:()=>l,fromQuat:()=>v,fromRotationTranslationScale:()=>_,getMaxScaleOnAxis:()=>m,getRotation:()=>g,getScaling:()=>f,getTranslation:()=>p,identity:()=>i,invert:()=>a,multiply:()=>u,multiplyScalar:()=>E,ortho:()=>b,perspective:()=>y,rotate:()=>h,scale:()=>d,set:()=>n,subtract:()=>j,targetTo:()=>w,translate:()=>c,transpose:()=>o});function s(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function n(e,t,r,s,n,i,o,a,l,u,c,d,h,p,f,m,g){return e[0]=t,e[1]=r,e[2]=s,e[3]=n,e[4]=i,e[5]=o,e[6]=a,e[7]=l,e[8]=u,e[9]=c,e[10]=d,e[11]=h,e[12]=p,e[13]=f,e[14]=m,e[15]=g,e}function i(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function o(e,t){if(e===t){let r=t[1],s=t[2],n=t[3],i=t[6],o=t[7],a=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=r,e[6]=t[9],e[7]=t[13],e[8]=s,e[9]=i,e[11]=t[14],e[12]=n,e[13]=o,e[14]=a}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}function a(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],c=t[8],d=t[9],h=t[10],p=t[11],f=t[12],m=t[13],g=t[14],_=t[15],v=r*a-s*o,y=r*l-n*o,b=r*u-i*o,w=s*l-n*a,x=s*u-i*a,j=n*u-i*l,E=c*m-d*f,A=c*g-h*f,T=c*_-p*f,M=d*g-h*m,S=d*_-p*m,k=h*_-p*g,C=v*k-y*S+b*M+w*T-x*A+j*E;return C?(C=1/C,e[0]=(a*k-l*S+u*M)*C,e[1]=(n*S-s*k-i*M)*C,e[2]=(m*j-g*x+_*w)*C,e[3]=(h*x-d*j-p*w)*C,e[4]=(l*T-o*k-u*A)*C,e[5]=(r*k-n*T+i*A)*C,e[6]=(g*b-f*j-_*y)*C,e[7]=(c*j-h*b+p*y)*C,e[8]=(o*S-a*T+u*E)*C,e[9]=(s*T-r*S-i*E)*C,e[10]=(f*x-m*b+_*v)*C,e[11]=(d*b-c*x-p*v)*C,e[12]=(a*A-o*M-l*E)*C,e[13]=(r*M-s*A+n*E)*C,e[14]=(m*y-f*w-g*v)*C,e[15]=(c*w-d*y+h*v)*C,e):null}function l(e){let t=e[0],r=e[1],s=e[2],n=e[3],i=e[4],o=e[5],a=e[6],l=e[7],u=e[8],c=e[9],d=e[10],h=e[11],p=e[12],f=e[13],m=e[14],g=e[15];return(t*o-r*i)*(d*g-h*m)-(t*a-s*i)*(c*g-h*f)+(t*l-n*i)*(c*m-d*f)+(r*a-s*o)*(u*g-h*p)-(r*l-n*o)*(u*m-d*p)+(s*l-n*a)*(u*f-c*p)}function u(e,t,r){let s=t[0],n=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],d=t[8],h=t[9],p=t[10],f=t[11],m=t[12],g=t[13],_=t[14],v=t[15],y=r[0],b=r[1],w=r[2],x=r[3];return e[0]=y*s+b*a+w*d+x*m,e[1]=y*n+b*l+w*h+x*g,e[2]=y*i+b*u+w*p+x*_,e[3]=y*o+b*c+w*f+x*v,y=r[4],b=r[5],w=r[6],x=r[7],e[4]=y*s+b*a+w*d+x*m,e[5]=y*n+b*l+w*h+x*g,e[6]=y*i+b*u+w*p+x*_,e[7]=y*o+b*c+w*f+x*v,y=r[8],b=r[9],w=r[10],x=r[11],e[8]=y*s+b*a+w*d+x*m,e[9]=y*n+b*l+w*h+x*g,e[10]=y*i+b*u+w*p+x*_,e[11]=y*o+b*c+w*f+x*v,y=r[12],b=r[13],w=r[14],x=r[15],e[12]=y*s+b*a+w*d+x*m,e[13]=y*n+b*l+w*h+x*g,e[14]=y*i+b*u+w*p+x*_,e[15]=y*o+b*c+w*f+x*v,e}function c(e,t,r){let s,n,i,o,a,l,u,c,d,h,p,f,m=r[0],g=r[1],_=r[2];return t===e?(e[12]=t[0]*m+t[4]*g+t[8]*_+t[12],e[13]=t[1]*m+t[5]*g+t[9]*_+t[13],e[14]=t[2]*m+t[6]*g+t[10]*_+t[14],e[15]=t[3]*m+t[7]*g+t[11]*_+t[15]):(s=t[0],n=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],c=t[7],d=t[8],h=t[9],p=t[10],f=t[11],e[0]=s,e[1]=n,e[2]=i,e[3]=o,e[4]=a,e[5]=l,e[6]=u,e[7]=c,e[8]=d,e[9]=h,e[10]=p,e[11]=f,e[12]=s*m+a*g+d*_+t[12],e[13]=n*m+l*g+h*_+t[13],e[14]=i*m+u*g+p*_+t[14],e[15]=o*m+c*g+f*_+t[15]),e}function d(e,t,r){let s=r[0],n=r[1],i=r[2];return e[0]=t[0]*s,e[1]=t[1]*s,e[2]=t[2]*s,e[3]=t[3]*s,e[4]=t[4]*n,e[5]=t[5]*n,e[6]=t[6]*n,e[7]=t[7]*n,e[8]=t[8]*i,e[9]=t[9]*i,e[10]=t[10]*i,e[11]=t[11]*i,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function h(e,t,r,s){let n,i,o,a,l,u,c,d,h,p,f,m,g,_,v,y,b,w,x,j,E,A,T,M,S=s[0],k=s[1],C=s[2],q=Math.hypot(S,k,C);return Math.abs(q)<1e-6?null:(q=1/q,S*=q,k*=q,C*=q,n=Math.sin(r),i=Math.cos(r),o=1-i,a=t[0],l=t[1],u=t[2],c=t[3],d=t[4],h=t[5],p=t[6],f=t[7],m=t[8],g=t[9],_=t[10],v=t[11],y=S*S*o+i,b=k*S*o+C*n,w=C*S*o-k*n,x=S*k*o-C*n,j=k*k*o+i,E=C*k*o+S*n,A=S*C*o+k*n,T=k*C*o-S*n,M=C*C*o+i,e[0]=a*y+d*b+m*w,e[1]=l*y+h*b+g*w,e[2]=u*y+p*b+_*w,e[3]=c*y+f*b+v*w,e[4]=a*x+d*j+m*E,e[5]=l*x+h*j+g*E,e[6]=u*x+p*j+_*E,e[7]=c*x+f*j+v*E,e[8]=a*A+d*T+m*M,e[9]=l*A+h*T+g*M,e[10]=u*A+p*T+_*M,e[11]=c*A+f*T+v*M,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e)}function p(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}function f(e,t){let r=t[0],s=t[1],n=t[2],i=t[4],o=t[5],a=t[6],l=t[8],u=t[9],c=t[10];return e[0]=Math.hypot(r,s,n),e[1]=Math.hypot(i,o,a),e[2]=Math.hypot(l,u,c),e}function m(e){let t=e[0],r=e[1],s=e[2],n=e[4],i=e[5],o=e[6],a=e[8],l=e[9],u=e[10];const c=t*t+r*r+s*s,d=n*n+i*i+o*o,h=a*a+l*l+u*u;return Math.sqrt(Math.max(c,d,h))}const g=function(){const e=[0,0,0];return function(t,r){let s=e;f(s,r);let n=1/s[0],i=1/s[1],o=1/s[2],a=r[0]*n,l=r[1]*i,u=r[2]*o,c=r[4]*n,d=r[5]*i,h=r[6]*o,p=r[8]*n,m=r[9]*i,g=r[10]*o,_=a+d+g,v=0;return _>0?(v=2*Math.sqrt(_+1),t[3]=.25*v,t[0]=(h-m)/v,t[1]=(p-u)/v,t[2]=(l-c)/v):a>d&&a>g?(v=2*Math.sqrt(1+a-d-g),t[3]=(h-m)/v,t[0]=.25*v,t[1]=(l+c)/v,t[2]=(p+u)/v):d>g?(v=2*Math.sqrt(1+d-a-g),t[3]=(p-u)/v,t[0]=(l+c)/v,t[1]=.25*v,t[2]=(h+m)/v):(v=2*Math.sqrt(1+g-a-d),t[3]=(l-c)/v,t[0]=(p+u)/v,t[1]=(h+m)/v,t[2]=.25*v),t}}();function _(e,t,r,s){let n=t[0],i=t[1],o=t[2],a=t[3],l=n+n,u=i+i,c=o+o,d=n*l,h=n*u,p=n*c,f=i*u,m=i*c,g=o*c,_=a*l,v=a*u,y=a*c,b=s[0],w=s[1],x=s[2];return e[0]=(1-(f+g))*b,e[1]=(h+y)*b,e[2]=(p-v)*b,e[3]=0,e[4]=(h-y)*w,e[5]=(1-(d+g))*w,e[6]=(m+_)*w,e[7]=0,e[8]=(p+v)*x,e[9]=(m-_)*x,e[10]=(1-(d+f))*x,e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e}function v(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=r+r,a=s+s,l=n+n,u=r*o,c=s*o,d=s*a,h=n*o,p=n*a,f=n*l,m=i*o,g=i*a,_=i*l;return e[0]=1-d-f,e[1]=c+_,e[2]=h-g,e[3]=0,e[4]=c-_,e[5]=1-u-f,e[6]=p+m,e[7]=0,e[8]=h+g,e[9]=p-m,e[10]=1-u-d,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function y(e,t,r,s,n){let i=1/Math.tan(t/2),o=1/(s-n);return e[0]=i/r,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=(n+s)*o,e[11]=-1,e[12]=0,e[13]=0,e[14]=2*n*s*o,e[15]=0,e}function b(e,t,r,s,n,i,o){let a=1/(t-r),l=1/(s-n),u=1/(i-o);return e[0]=-2*a,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*l,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*u,e[11]=0,e[12]=(t+r)*a,e[13]=(n+s)*l,e[14]=(o+i)*u,e[15]=1,e}function w(e,t,r,s){let n=t[0],i=t[1],o=t[2],a=s[0],l=s[1],u=s[2],c=n-r[0],d=i-r[1],h=o-r[2],p=c*c+d*d+h*h;0===p?h=1:(p=1/Math.sqrt(p),c*=p,d*=p,h*=p);let f=l*h-u*d,m=u*c-a*h,g=a*d-l*c;return p=f*f+m*m+g*g,0===p&&(u?a+=1e-6:l?u+=1e-6:l+=1e-6,f=l*h-u*d,m=u*c-a*h,g=a*d-l*c,p=f*f+m*m+g*g),p=1/Math.sqrt(p),f*=p,m*=p,g*=p,e[0]=f,e[1]=m,e[2]=g,e[3]=0,e[4]=d*g-h*m,e[5]=h*f-c*g,e[6]=c*m-d*f,e[7]=0,e[8]=c,e[9]=d,e[10]=h,e[11]=0,e[12]=n,e[13]=i,e[14]=o,e[15]=1,e}function x(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e[9]=t[9]+r[9],e[10]=t[10]+r[10],e[11]=t[11]+r[11],e[12]=t[12]+r[12],e[13]=t[13]+r[13],e[14]=t[14]+r[14],e[15]=t[15]+r[15],e}function j(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e[9]=t[9]-r[9],e[10]=t[10]-r[10],e[11]=t[11]-r[11],e[12]=t[12]-r[12],e[13]=t[13]-r[13],e[14]=t[14]-r[14],e[15]=t[15]-r[15],e}function E(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e[9]=t[9]*r,e[10]=t[10]*r,e[11]=t[11]*r,e[12]=t[12]*r,e[13]=t[13]*r,e[14]=t[14]*r,e[15]=t[15]*r,e}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>_,conjugate:()=>h,copy:()=>m,dot:()=>y,fromEuler:()=>f,fromMat3:()=>p,identity:()=>n,invert:()=>d,length:()=>w,lerp:()=>b,multiply:()=>o,normalize:()=>x,rotateX:()=>a,rotateY:()=>l,rotateZ:()=>u,scale:()=>v,set:()=>g,setAxisAngle:()=>i,slerp:()=>c});var s=r("./node_modules/ogl/src/math/functions/Vec4Func.js");function n(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e}function i(e,t,r){r*=.5;let s=Math.sin(r);return e[0]=s*t[0],e[1]=s*t[1],e[2]=s*t[2],e[3]=Math.cos(r),e}function o(e,t,r){let s=t[0],n=t[1],i=t[2],o=t[3],a=r[0],l=r[1],u=r[2],c=r[3];return e[0]=s*c+o*a+n*u-i*l,e[1]=n*c+o*l+i*a-s*u,e[2]=i*c+o*u+s*l-n*a,e[3]=o*c-s*a-n*l-i*u,e}function a(e,t,r){r*=.5;let s=t[0],n=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=s*l+o*a,e[1]=n*l+i*a,e[2]=i*l-n*a,e[3]=o*l-s*a,e}function l(e,t,r){r*=.5;let s=t[0],n=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=s*l-i*a,e[1]=n*l+o*a,e[2]=i*l+s*a,e[3]=o*l-n*a,e}function u(e,t,r){r*=.5;let s=t[0],n=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=s*l+n*a,e[1]=n*l-s*a,e[2]=i*l+o*a,e[3]=o*l-i*a,e}function c(e,t,r,s){let n,i,o,a,l,u=t[0],c=t[1],d=t[2],h=t[3],p=r[0],f=r[1],m=r[2],g=r[3];return i=u*p+c*f+d*m+h*g,i<0&&(i=-i,p=-p,f=-f,m=-m,g=-g),1-i>1e-6?(n=Math.acos(i),o=Math.sin(n),a=Math.sin((1-s)*n)/o,l=Math.sin(s*n)/o):(a=1-s,l=s),e[0]=a*u+l*p,e[1]=a*c+l*f,e[2]=a*d+l*m,e[3]=a*h+l*g,e}function d(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=r*r+s*s+n*n+i*i,a=o?1/o:0;return e[0]=-r*a,e[1]=-s*a,e[2]=-n*a,e[3]=i*a,e}function h(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}function p(e,t){let r,s=t[0]+t[4]+t[8];if(s>0)r=Math.sqrt(s+1),e[3]=.5*r,r=.5/r,e[0]=(t[5]-t[7])*r,e[1]=(t[6]-t[2])*r,e[2]=(t[1]-t[3])*r;else{let s=0;t[4]>t[0]&&(s=1),t[8]>t[3*s+s]&&(s=2);let n=(s+1)%3,i=(s+2)%3;r=Math.sqrt(t[3*s+s]-t[3*n+n]-t[3*i+i]+1),e[s]=.5*r,r=.5/r,e[3]=(t[3*n+i]-t[3*i+n])*r,e[n]=(t[3*n+s]+t[3*s+n])*r,e[i]=(t[3*i+s]+t[3*s+i])*r}return e}function f(e,t,r="YXZ"){let s=Math.sin(.5*t[0]),n=Math.cos(.5*t[0]),i=Math.sin(.5*t[1]),o=Math.cos(.5*t[1]),a=Math.sin(.5*t[2]),l=Math.cos(.5*t[2]);return"XYZ"===r?(e[0]=s*o*l+n*i*a,e[1]=n*i*l-s*o*a,e[2]=n*o*a+s*i*l,e[3]=n*o*l-s*i*a):"YXZ"===r?(e[0]=s*o*l+n*i*a,e[1]=n*i*l-s*o*a,e[2]=n*o*a-s*i*l,e[3]=n*o*l+s*i*a):"ZXY"===r?(e[0]=s*o*l-n*i*a,e[1]=n*i*l+s*o*a,e[2]=n*o*a+s*i*l,e[3]=n*o*l-s*i*a):"ZYX"===r?(e[0]=s*o*l-n*i*a,e[1]=n*i*l+s*o*a,e[2]=n*o*a-s*i*l,e[3]=n*o*l+s*i*a):"YZX"===r?(e[0]=s*o*l+n*i*a,e[1]=n*i*l+s*o*a,e[2]=n*o*a-s*i*l,e[3]=n*o*l-s*i*a):"XZY"===r&&(e[0]=s*o*l-n*i*a,e[1]=n*i*l-s*o*a,e[2]=n*o*a+s*i*l,e[3]=n*o*l+s*i*a),e}const m=s.copy,g=s.set,_=s.add,v=s.scale,y=s.dot,b=s.lerp,w=s.length,x=s.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>o,angle:()=>E,copy:()=>n,cross:()=>v,distance:()=>d,divide:()=>u,dot:()=>_,exactEquals:()=>A,inverse:()=>m,length:()=>s,lerp:()=>y,multiply:()=>l,negate:()=>f,normalize:()=>g,scale:()=>c,scaleRotateMat4:()=>w,set:()=>i,squaredDistance:()=>h,squaredLength:()=>p,subtract:()=>a,transformMat3:()=>x,transformMat4:()=>b,transformQuat:()=>j});function s(e){let t=e[0],r=e[1],s=e[2];return Math.sqrt(t*t+r*r+s*s)}function n(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function i(e,t,r,s){return e[0]=t,e[1]=r,e[2]=s,e}function o(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e}function a(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e}function l(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e[2]=t[2]*r[2],e}function u(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e[2]=t[2]/r[2],e}function c(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e}function d(e,t){let r=t[0]-e[0],s=t[1]-e[1],n=t[2]-e[2];return Math.sqrt(r*r+s*s+n*n)}function h(e,t){let r=t[0]-e[0],s=t[1]-e[1],n=t[2]-e[2];return r*r+s*s+n*n}function p(e){let t=e[0],r=e[1],s=e[2];return t*t+r*r+s*s}function f(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}function m(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}function g(e,t){let r=t[0],s=t[1],n=t[2],i=r*r+s*s+n*n;return i>0&&(i=1/Math.sqrt(i)),e[0]=t[0]*i,e[1]=t[1]*i,e[2]=t[2]*i,e}function _(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function v(e,t,r){let s=t[0],n=t[1],i=t[2],o=r[0],a=r[1],l=r[2];return e[0]=n*l-i*a,e[1]=i*o-s*l,e[2]=s*a-n*o,e}function y(e,t,r,s){let n=t[0],i=t[1],o=t[2];return e[0]=n+s*(r[0]-n),e[1]=i+s*(r[1]-i),e[2]=o+s*(r[2]-o),e}function b(e,t,r){let s=t[0],n=t[1],i=t[2],o=r[3]*s+r[7]*n+r[11]*i+r[15];return o=o||1,e[0]=(r[0]*s+r[4]*n+r[8]*i+r[12])/o,e[1]=(r[1]*s+r[5]*n+r[9]*i+r[13])/o,e[2]=(r[2]*s+r[6]*n+r[10]*i+r[14])/o,e}function w(e,t,r){let s=t[0],n=t[1],i=t[2],o=r[3]*s+r[7]*n+r[11]*i+r[15];return o=o||1,e[0]=(r[0]*s+r[4]*n+r[8]*i)/o,e[1]=(r[1]*s+r[5]*n+r[9]*i)/o,e[2]=(r[2]*s+r[6]*n+r[10]*i)/o,e}function x(e,t,r){let s=t[0],n=t[1],i=t[2];return e[0]=s*r[0]+n*r[3]+i*r[6],e[1]=s*r[1]+n*r[4]+i*r[7],e[2]=s*r[2]+n*r[5]+i*r[8],e}function j(e,t,r){let s=t[0],n=t[1],i=t[2],o=r[0],a=r[1],l=r[2],u=a*i-l*n,c=l*s-o*i,d=o*n-a*s,h=a*d-l*c,p=l*u-o*d,f=o*c-a*u,m=2*r[3];return u*=m,c*=m,d*=m,h*=2,p*=2,f*=2,e[0]=s+u+h,e[1]=n+c+p,e[2]=i+d+f,e}const E=function(){const e=[0,0,0],t=[0,0,0];return function(r,s){n(e,r),n(t,s),g(e,e),g(t,t);let i=_(e,t);return i>1?0:i<-1?Math.PI:Math.acos(i)}}();function A(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>i,copy:()=>s,dot:()=>u,length:()=>a,lerp:()=>c,normalize:()=>l,scale:()=>o,set:()=>n});function s(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function n(e,t,r,s,n){return e[0]=t,e[1]=r,e[2]=s,e[3]=n,e}function i(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e}function o(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e}function a(e){let t=e[0],r=e[1],s=e[2],n=e[3];return Math.sqrt(t*t+r*r+s*s+n*n)}function l(e,t){let r=t[0],s=t[1],n=t[2],i=t[3],o=r*r+s*s+n*n+i*i;return o>0&&(o=1/Math.sqrt(o)),e[0]=r*o,e[1]=s*o,e[2]=n*o,e[3]=i*o,e}function u(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function c(e,t,r,s){let n=t[0],i=t[1],o=t[2],a=t[3];return e[0]=n+s*(r[0]-n),e[1]=i+s*(r[1]-i),e[2]=o+s*(r[2]-o),e[3]=a+s*(r[3]-a),e}},"./node_modules/webpack-dev-server/client/clients/WebSocketClient.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r("./node_modules/webpack-dev-server/client/utils/log.js");function n(e,t){for(var r=0;r<t.length;r++){var s=t[r];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.client=new WebSocket(t),this.client.onerror=function(e){s.log.error(e)}}var t,r,i;return t=e,(r=[{key:"onOpen",value:function(e){this.client.onopen=e}},{key:"onClose",value:function(e){this.client.onclose=e}},{key:"onMessage",value:function(e){this.client.onmessage=function(t){e(t.data)}}}])&&n(t.prototype,r),i&&n(t,i),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&reconnect=10":(e,t,r)=>{"use strict";r.r(t);var s=r("./node_modules/webpack/hot/log.js"),n=r.n(s),i=r("./node_modules/webpack-dev-server/client/utils/stripAnsi.js"),o=r("./node_modules/webpack-dev-server/client/utils/parseURL.js"),a=r("./node_modules/webpack-dev-server/client/socket.js"),l=r("./node_modules/webpack-dev-server/client/overlay.js"),u=r("./node_modules/webpack-dev-server/client/utils/log.js"),c=r("./node_modules/webpack-dev-server/client/utils/sendMessage.js"),d=r("./node_modules/webpack-dev-server/client/utils/reloadApp.js"),h=r("./node_modules/webpack-dev-server/client/utils/createSocketURL.js"),p={isUnloading:!1,currentHash:r.h()},f={hot:!1,liveReload:!1,progress:!1,overlay:!1},m=(0,o.default)("?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&reconnect=10");function g(e){n().setLogLevel("verbose"===e||"log"===e?"info":e),(0,u.setLogLevel)(e)}"true"===m.hot&&(f.hot=!0,u.log.info("Hot Module Replacement enabled.")),"true"===m["live-reload"]&&(f.liveReload=!0,u.log.info("Live Reloading enabled.")),m.logging&&(f.logging=m.logging),void 0!==m.reconnect&&(f.reconnect=Number(m.reconnect)),f.logging&&g(f.logging),self.addEventListener("beforeunload",(function(){p.isUnloading=!0}));var _={hot:function(){"false"!==m.hot&&(f.hot=!0,u.log.info("Hot Module Replacement enabled."))},liveReload:function(){"false"!==m["live-reload"]&&(f.liveReload=!0,u.log.info("Live Reloading enabled."))},invalid:function(){u.log.info("App updated. Recompiling..."),f.overlay&&(0,l.hide)(),(0,c.default)("Invalid")},hash:function(e){p.previousHash=p.currentHash,p.currentHash=e},logging:g,overlay:function(e){"undefined"!=typeof document&&(f.overlay=e)},reconnect:function(e){"false"!==m.reconnect&&(f.reconnect=e)},progress:function(e){f.progress=e},"progress-update":function(e){f.progress&&u.log.info("".concat(e.pluginName?"[".concat(e.pluginName,"] "):"").concat(e.percent,"% - ").concat(e.msg,".")),(0,c.default)("Progress",e)},"still-ok":function(){u.log.info("Nothing changed."),f.overlay&&(0,l.hide)(),(0,c.default)("StillOk")},ok:function(){(0,c.default)("Ok"),f.overlay&&(0,l.hide)(),(0,d.default)(f,p)},"content-changed":function(e){u.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},"static-changed":function(e){u.log.info("".concat(e?'"'.concat(e,'"'):"Content"," from static directory was changed. Reloading...")),self.location.reload()},warnings:function(e,t){u.log.warn("Warnings while compiling.");var r=e.map((function(e){var t=(0,l.formatProblem)("warning",e),r=t.header,s=t.body;return"".concat(r,"\n").concat((0,i.default)(s))}));(0,c.default)("Warnings",r);for(var s=0;s<r.length;s++)u.log.warn(r[s]);if("boolean"==typeof f.overlay?f.overlay:f.overlay&&f.overlay.warnings){var n="object"==typeof f.overlay&&f.overlay.trustedTypesPolicyName;(0,l.show)("warning",e,n||null)}t&&t.preventReloading||(0,d.default)(f,p)},errors:function(e){u.log.error("Errors while compiling. Reload prevented.");var t=e.map((function(e){var t=(0,l.formatProblem)("error",e),r=t.header,s=t.body;return"".concat(r,"\n").concat((0,i.default)(s))}));(0,c.default)("Errors",t);for(var r=0;r<t.length;r++)u.log.error(t[r]);if("boolean"==typeof f.overlay?f.overlay:f.overlay&&f.overlay.errors){var s="object"==typeof f.overlay&&f.overlay.trustedTypesPolicyName;(0,l.show)("error",e,s||null)}},error:function(e){u.log.error(e)},close:function(){u.log.info("Disconnected!"),f.overlay&&(0,l.hide)(),(0,c.default)("Close")}},v=(0,h.default)(m);(0,a.default)(v,_,f.reconnect)},"./node_modules/webpack-dev-server/client/modules/logger/index.js":(e,t)=>{!function(){"use strict";var e={"./client-src/modules/logger/SyncBailHookFake.js":function(e){e.exports=function(){return{call:function(){}}}},"./node_modules/webpack/lib/logging/Logger.js":function(e,t){function r(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return s(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,s=new Array(t);r<t;r++)s[r]=e[r];return s}function n(e,t){for(var r=0;r<t.length;r++){var s=t[r];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}var i=Object.freeze({error:"error",warn:"warn",info:"info",log:"log",debug:"debug",trace:"trace",group:"group",groupCollapsed:"groupCollapsed",groupEnd:"groupEnd",profile:"profile",profileEnd:"profileEnd",time:"time",clear:"clear",status:"status"});t.LogType=i;var o=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger raw log method"),a=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger times"),l=("undefined"!=typeof Symbol?Symbol:function(e){return e})("webpack logger aggregated times"),u=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this[o]=t,this.getChildLogger=r}var t,s,u;return t=e,s=[{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.error,t)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.warn,t)}},{key:"info",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.info,t)}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.log,t)}},{key:"debug",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.debug,t)}},{key:"assert",value:function(e){if(!e){for(var t=arguments.length,r=new Array(t>1?t-1:0),s=1;s<t;s++)r[s-1]=arguments[s];this[o](i.error,r)}}},{key:"trace",value:function(){this[o](i.trace,["Trace"])}},{key:"clear",value:function(){this[o](i.clear)}},{key:"status",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.status,t)}},{key:"group",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.group,t)}},{key:"groupCollapsed",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.groupCollapsed,t)}},{key:"groupEnd",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];this[o](i.groupEnd,t)}},{key:"profile",value:function(e){this[o](i.profile,[e])}},{key:"profileEnd",value:function(e){this[o](i.profileEnd,[e])}},{key:"time",value:function(e){this[a]=this[a]||new Map,this[a].set(e,process.hrtime())}},{key:"timeLog",value:function(e){var t=this[a]&&this[a].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeLog()"));var s=process.hrtime(t);this[o](i.time,[e].concat(r(s)))}},{key:"timeEnd",value:function(e){var t=this[a]&&this[a].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeEnd()"));var s=process.hrtime(t);this[a].delete(e),this[o](i.time,[e].concat(r(s)))}},{key:"timeAggregate",value:function(e){var t=this[a]&&this[a].get(e);if(!t)throw new Error("No such label '".concat(e,"' for WebpackLogger.timeAggregate()"));var r=process.hrtime(t);this[a].delete(e),this[l]=this[l]||new Map;var s=this[l].get(e);void 0!==s&&(r[1]+s[1]>1e9?(r[0]+=s[0]+1,r[1]=r[1]-1e9+s[1]):(r[0]+=s[0],r[1]+=s[1])),this[l].set(e,r)}},{key:"timeAggregateEnd",value:function(e){if(void 0!==this[l]){var t=this[l].get(e);void 0!==t&&(this[l].delete(e),this[o](i.time,[e].concat(r(t))))}}}],s&&n(t.prototype,s),u&&n(t,u),Object.defineProperty(t,"prototype",{writable:!1}),e}();t.Logger=u},"./node_modules/webpack/lib/logging/createConsoleLogger.js":function(e,t,r){function s(e){return function(e){if(Array.isArray(e))return n(e)}(e)||function(e){if(void 0!==("undefined"!=typeof Symbol?Symbol:function(e){return e})&&null!=e[("undefined"!=typeof Symbol?Symbol:function(e){return e}).iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,s=new Array(t);r<t;r++)s[r]=e[r];return s}var i=r("./node_modules/webpack/lib/logging/Logger.js").LogType,o=function(e){if("string"==typeof e){var t=new RegExp("[\\\\/]".concat(e.replace(/[-[\]{}()*+?.\\^$|]/g,"\\$&"),"([\\\\/]|$|!|\\?)"));return function(e){return t.test(e)}}return e&&"object"==typeof e&&"function"==typeof e.test?function(t){return e.test(t)}:"function"==typeof e?e:"boolean"==typeof e?function(){return e}:void 0},a={none:6,false:6,error:5,warn:4,info:3,log:2,true:2,verbose:1};e.exports=function(e){var t=e.level,r=void 0===t?"info":t,n=e.debug,l=void 0!==n&&n,u=e.console,c="boolean"==typeof l?[function(){return l}]:[].concat(l).map(o),d=a["".concat(r)]||0;return function(e,t,r){var n=function(){return Array.isArray(r)?r.length>0&&"string"==typeof r[0]?["[".concat(e,"] ").concat(r[0])].concat(s(r.slice(1))):["[".concat(e,"]")].concat(s(r)):[]},o=c.some((function(t){return t(e)}));switch(t){case i.debug:if(!o)return;"function"==typeof u.debug?u.debug.apply(u,s(n())):u.log.apply(u,s(n()));break;case i.log:if(!o&&d>a.log)return;u.log.apply(u,s(n()));break;case i.info:if(!o&&d>a.info)return;u.info.apply(u,s(n()));break;case i.warn:if(!o&&d>a.warn)return;u.warn.apply(u,s(n()));break;case i.error:if(!o&&d>a.error)return;u.error.apply(u,s(n()));break;case i.trace:if(!o)return;u.trace();break;case i.groupCollapsed:if(!o&&d>a.log)return;if(!o&&d>a.verbose){"function"==typeof u.groupCollapsed?u.groupCollapsed.apply(u,s(n())):u.log.apply(u,s(n()));break}case i.group:if(!o&&d>a.log)return;"function"==typeof u.group?u.group.apply(u,s(n())):u.log.apply(u,s(n()));break;case i.groupEnd:if(!o&&d>a.log)return;"function"==typeof u.groupEnd&&u.groupEnd();break;case i.time:if(!o&&d>a.log)return;var l=1e3*r[1]+r[2]/1e6,h="[".concat(e,"] ").concat(r[0],": ").concat(l," ms");"function"==typeof u.logTime?u.logTime(h):u.log(h);break;case i.profile:"function"==typeof u.profile&&u.profile.apply(u,s(n()));break;case i.profileEnd:"function"==typeof u.profileEnd&&u.profileEnd.apply(u,s(n()));break;case i.clear:if(!o&&d>a.log)return;"function"==typeof u.clear&&u.clear();break;case i.status:if(!o&&d>a.info)return;"function"==typeof u.status?0===r.length?u.status():u.status.apply(u,s(n())):0!==r.length&&u.info.apply(u,s(n()));break;default:throw new Error("Unexpected LogType ".concat(t))}}}},"./node_modules/webpack/lib/logging/runtime.js":function(e,t,r){function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var s in r)Object.prototype.hasOwnProperty.call(r,s)&&(e[s]=r[s])}return e},s.apply(this,arguments)}var n=r("./client-src/modules/logger/SyncBailHookFake.js"),i=r("./node_modules/webpack/lib/logging/Logger.js").Logger,o=r("./node_modules/webpack/lib/logging/createConsoleLogger.js"),a={level:"info",debug:!1,console},l=o(a);t.getLogger=function(e){return new i((function(r,s){void 0===t.hooks.log.call(e,r,s)&&l(e,r,s)}),(function(r){return t.getLogger("".concat(e,"/").concat(r))}))},t.configureDefaultLogger=function(e){s(a,e),l=o(a)},t.hooks={log:new n(["origin","type","args"])}}},r={};function s(t){var n=r[t];if(void 0!==n)return n.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,s),i.exports}s.d=function(e,t){for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};!function(){s.r(n),s.d(n,{default:function(){return e}});var e=s("./node_modules/webpack/lib/logging/runtime.js")}();var i=t;for(var o in n)i[o]=n[o];n.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})}()},"./node_modules/webpack-dev-server/client/overlay.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{formatProblem:()=>p,hide:()=>h,show:()=>f});var s,n,i,o=r("./node_modules/ansi-html-community/index.js"),a=r.n(o),l=r("./node_modules/html-entities/lib/index.js"),u={reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"},c=[];function d(e,t){n?e(n):(c.push(e),s||function(e){window.trustedTypes&&(i=window.trustedTypes.createPolicy(e||"webpack-dev-server#overlay",{createHTML:function(e){return e}})),(s=document.createElement("iframe")).id="webpack-dev-server-client-overlay",s.src="about:blank",s.style.position="fixed",s.style.left=0,s.style.top=0,s.style.right=0,s.style.bottom=0,s.style.width="100vw",s.style.height="100vh",s.style.border="none",s.style.zIndex=9999999999,s.onload=function(){(n=s.contentDocument.createElement("div")).id="webpack-dev-server-client-overlay-div",n.style.position="fixed",n.style.boxSizing="border-box",n.style.left=0,n.style.top=0,n.style.right=0,n.style.bottom=0,n.style.width="100vw",n.style.height="100vh",n.style.backgroundColor="rgba(0, 0, 0, 0.85)",n.style.color="#E8E8E8",n.style.fontFamily="Menlo, Consolas, monospace",n.style.fontSize="large",n.style.padding="2rem",n.style.lineHeight="1.2",n.style.whiteSpace="pre-wrap",n.style.overflow="auto";var e=document.createElement("span");e.innerText="Compiled with problems:";var t=document.createElement("button");t.innerText="X",t.style.background="transparent",t.style.border="none",t.style.fontSize="20px",t.style.fontWeight="bold",t.style.color="white",t.style.cursor="pointer",t.style.cssFloat="right",t.style.styleFloat="right",t.addEventListener("click",(function(){h()})),n.appendChild(e),n.appendChild(t),n.appendChild(document.createElement("br")),n.appendChild(document.createElement("br")),s.contentDocument.body.appendChild(n),c.forEach((function(e){e(n)})),c=[],s.onload=null},document.body.appendChild(s)}(t))}function h(){s&&(document.body.removeChild(s),s=null,n=null)}function p(e,t){var r="warning"===e?"WARNING":"ERROR",s="";if("string"==typeof t)s+=t;else{var n=t.file||"",i=t.moduleName?-1!==t.moduleName.indexOf("!")?"".concat(t.moduleName.replace(/^(\s|\S)*!/,"")," (").concat(t.moduleName,")"):"".concat(t.moduleName):"",o=t.loc;r+="".concat(i||n?" in ".concat(i?"".concat(i).concat(n?" (".concat(n,")"):""):n).concat(o?" ".concat(o):""):""),s+=t.message||""}return{header:r,body:s}}function f(e,t,r){d((function(){t.forEach((function(t){var r=document.createElement("div"),s=document.createElement("span"),o=p(e,t),c=o.header,d=o.body;s.innerText=c,s.style.color="#".concat(u.red);var h=a()((0,l.encode)(d)),f=document.createElement("div");f.innerHTML=i?i.createHTML(h):h,r.appendChild(s),r.appendChild(document.createElement("br")),r.appendChild(document.createElement("br")),r.appendChild(f),r.appendChild(document.createElement("br")),r.appendChild(document.createElement("br")),n.appendChild(r)}))}),r)}a().setColors(u)},"./node_modules/webpack-dev-server/client/socket.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{client:()=>u,default:()=>d});var s=r("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),n=r("./node_modules/webpack-dev-server/client/utils/log.js"),i=r("./node_modules/webpack-dev-server/client/clients/WebSocketClient.js"),o=void 0!==i?void 0!==i.default?i.default:i:s.default,a=0,l=10,u=null,c=function(e,t,r){(u=new o(e)).onOpen((function(){a=0,void 0!==r&&(l=r)})),u.onClose((function(){if(0===a&&t.close(),u=null,a<l){var s=1e3*Math.pow(2,a)+100*Math.random();a+=1,n.log.info("Trying to reconnect..."),setTimeout((function(){c(e,t,r)}),s)}})),u.onMessage((function(e){var r=JSON.parse(e);t[r.type]&&t[r.type](r.data,r.params)}))};const d=c},"./node_modules/webpack-dev-server/client/utils/createSocketURL.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s=function(e){var t=e.hostname,r="0.0.0.0"===t||"::"===t||"[::]"===t;r&&self.location.hostname&&0===self.location.protocol.indexOf("http")&&(t=self.location.hostname);var s=e.protocol||self.location.protocol;("auto:"===s||t&&r&&"https:"===self.location.protocol)&&(s=self.location.protocol),s=s.replace(/^(?:http|.+-extension|file)/i,"ws");var n="";e.username&&(n=e.username,e.password&&(n=n.concat(":",e.password)));var i=(t||self.location.hostname||"localhost").replace(/^\[(.*)\]$/,"$1"),o=e.port;o&&"0"!==o||(o=self.location.port);var a="/ws";return e.pathname&&!e.fromCurrentScript&&(a=e.pathname),function(e){var t=e.protocol||"";t&&":"!==t.substr(-1)&&(t+=":");var r=e.auth||"";r&&(r=(r=encodeURIComponent(r)).replace(/%3A/i,":"),r+="@");var s="";e.hostname&&(s=r+(-1===e.hostname.indexOf(":")?e.hostname:"[".concat(e.hostname,"]")),e.port&&(s+=":".concat(e.port)));var n=e.pathname||"";e.slashes?(s="//".concat(s||""),n&&"/"!==n.charAt(0)&&(n="/".concat(n))):s||(s="");var i=e.search||"";i&&"?"!==i.charAt(0)&&(i="?".concat(i));var o=e.hash||"";return o&&"#"!==o.charAt(0)&&(o="#".concat(o)),n=n.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})),i=i.replace("#","%23"),"".concat(t).concat(s).concat(n).concat(i).concat(o)}({protocol:s,auth:n,hostname:i,port:o,pathname:a,slashes:!0})}},"./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var e=document.scripts||[],t=Array.prototype.filter.call(e,(function(e){return e.getAttribute("src")}));if(t.length>0)return t[t.length-1].getAttribute("src");throw new Error("[webpack-dev-server] Failed to get current script source.")}},"./node_modules/webpack-dev-server/client/utils/log.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{log:()=>o,setLogLevel:()=>i});var s=r("./node_modules/webpack-dev-server/client/modules/logger/index.js"),n=r.n(s);function i(e){n().configureDefaultLogger({level:e})}i("info");var o=n().getLogger("webpack-dev-server")},"./node_modules/webpack-dev-server/client/utils/parseURL.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");const n=function(e){var t={};if("string"==typeof e&&""!==e)for(var r=e.slice(1).split("&"),n=0;n<r.length;n++){var i=r[n].split("=");t[i[0]]=decodeURIComponent(i[1])}else{var o,a=(0,s.default)();try{o=new URL(a,self.location.href)}catch(e){}o&&((t=o).fromCurrentScript=!0)}return t}},"./node_modules/webpack-dev-server/client/utils/reloadApp.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var s=r("./node_modules/webpack/hot/emitter.js"),n=r.n(s),i=r("./node_modules/webpack-dev-server/client/utils/log.js");const o=function(e,t){var r=e.hot,s=e.liveReload;if(!t.isUnloading){var o=t.currentHash,a=t.previousHash;if(!(o.indexOf(a)>=0)){var l=self.location.search.toLowerCase(),u=-1===l.indexOf("webpack-dev-server-hot=false"),c=-1===l.indexOf("webpack-dev-server-live-reload=false");if(r&&u)i.log.info("App hot update..."),n().emit("webpackHotUpdate",t.currentHash),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(t.currentHash),"*");else if(s&&c)var d=self,h=self.setInterval((function(){("about:"!==d.location.protocol||(d=d.parent).parent===d)&&p(d,h)}))}}function p(e,t){clearInterval(t),i.log.info("App updated. Reloading..."),e.location.reload()}}},"./node_modules/webpack-dev-server/client/utils/sendMessage.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s=function(e,t){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(e),data:t},"*")}},"./node_modules/webpack-dev-server/client/utils/stripAnsi.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=new RegExp(["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"].join("|"),"g");const n=function(e){if("string"!=typeof e)throw new TypeError("Expected a `string`, got `".concat(typeof e,"`"));return e.replace(s,"")}},"./node_modules/webpack/hot/dev-server.js":(e,t,r)=>{var s,n=function(){return s.indexOf(r.h())>=0},i=r("./node_modules/webpack/hot/log.js"),o=function t(){e.hot.check(!0).then((function(e){if(!e)return i("warning","[HMR] Cannot find update. Need to do a full reload!"),i("warning","[HMR] (Probably because of restarting the webpack-dev-server)"),void window.location.reload();n()||t(),r("./node_modules/webpack/hot/log-apply-result.js")(e,e),n()&&i("info","[HMR] App is up to date.")})).catch((function(t){var r=e.hot.status();["abort","fail"].indexOf(r)>=0?(i("warning","[HMR] Cannot apply update. Need to do a full reload!"),i("warning","[HMR] "+i.formatError(t)),window.location.reload()):i("warning","[HMR] Update failed: "+i.formatError(t))}))};r("./node_modules/webpack/hot/emitter.js").on("webpackHotUpdate",(function(t){s=t,n()||"idle"!==e.hot.status()||(i("info","[HMR] Checking for updates on the server..."),o())})),i("info","[HMR] Waiting for update signal from WDS...")},"./node_modules/webpack/hot/emitter.js":(e,t,r)=>{var s=r("./node_modules/events/events.js");e.exports=new s},"./node_modules/webpack/hot/log-apply-result.js":(e,t,r)=>{e.exports=function(e,t){var s=e.filter((function(e){return t&&t.indexOf(e)<0})),n=r("./node_modules/webpack/hot/log.js");(s.length>0&&(n("warning","[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"),s.forEach((function(e){n("warning","[HMR]  - "+e)}))),t&&0!==t.length)?(n("info","[HMR] Updated modules:"),t.forEach((function(e){if("string"==typeof e&&-1!==e.indexOf("!")){var t=e.split("!");n.groupCollapsed("info","[HMR]  - "+t.pop()),n("info","[HMR]  - "+e),n.groupEnd("info")}else n("info","[HMR]  - "+e)})),t.every((function(e){return"number"==typeof e}))&&n("info",'[HMR] Consider using the optimization.moduleIds: "named" for module names.')):n("info","[HMR] Nothing hot updated.")}},"./node_modules/webpack/hot/log.js":e=>{var t="info";function r(){}function s(e){return"info"===t&&"info"===e||["info","warning"].indexOf(t)>=0&&"warning"===e||["info","warning","error"].indexOf(t)>=0&&"error"===e}function n(e){return function(t,r){s(t)&&e(r)}}e.exports=function(e,t){s(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var i=console.group||r,o=console.groupCollapsed||r,a=console.groupEnd||r;e.exports.group=n(i),e.exports.groupCollapsed=n(o),e.exports.groupEnd=n(a),e.exports.setLogLevel=function(e){t=e},e.exports.formatError=function(e){var t=e.message,r=e.stack;return r?r.indexOf(t)<0?t+"\n"+r:r:t}},"./styles/index.scss":(e,t,r)=>{"use strict";r.r(t);var s=r("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:"",locals:!1});e.hot.dispose(s),e.hot.accept(void 0,s)},"./app/shaders/plane-fragment.glsl":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s="precision highp float;\n#define GLSLIFY 1\nuniform sampler2D tMap;\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvoid main(){\n    vec3 normal=normalize(vNormal);\n    vec3 tex=texture2D(tMap,vUv).rgb;\n    \n    vec3 light=normalize(vec3(.5,1.,-.3));\n    float shading=dot(normal,light)*.15;\n    \n    gl_FragColor.rgb=tex+shading;\n    gl_FragColor.a=1.;\n}"},"./app/shaders/plane-vertex.glsl":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});const s="#define GLSLIFY 1\nattribute vec2 uv;\nattribute vec3 position;\nattribute vec3 normal;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvoid main(){\n    vUv=uv;\n    vNormal=normalize(normalMatrix*normal);\n    \n    gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.);\n}"},"./app/classes/AsyncLoader.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./app/classes/Component.js");class n extends s.default{constructor({element:e}){super({element:e}),this.createObserver()}createObserver(){this.observer=new IntersectionObserver((e=>{e.forEach((e=>{if(e.isIntersecting){if(!this.element.getAttribute("src")){const e=this.element.getAttribute("data-src");this.element.setAttribute("src",e)}this.element.classList.add("loaded")}}))})),this.observer.observe(this.element)}}},"./app/classes/Component.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r("./node_modules/lodash/each.js"),n=r("./node_modules/events/events.js");class i extends n{constructor({element:e,elements:t}){super(),this.selector=e,this.selectorChildren={...t},this.create(),this.addEventListeners()}create(){this.selector instanceof window.HTMLElement?this.element=this.selector:this.element=document.querySelector(this.selector),this.elements={},s(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=this.element.querySelector(e)))}))}addEventListeners(){}}},"./app/classes/Page.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var s=r("./node_modules/lodash/each.js"),n=r("./node_modules/gsap/index.js"),i=r("./app/classes/AsyncLoader.js");class o{constructor({element:e,elements:t,id:r}){this.selector=e,this.selectorChildren={...t,preloader:"[data-src]"},this.id=r,this.create()}create(){this.selector instanceof window.HTMLElement?this.element=this.selector:this.element=document.querySelector(this.selector),this.elements={},this.selectorChildren&&s(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=this.element.querySelector(e)))})),this.createAsyncLoader()}createAsyncLoader(){this.elements.preloader.length?s(this.elements.preloader,(e=>{new i.default({element:e})})):new i.default({element:this.elements.preloader})}show(){return new Promise((e=>{this.animationIn=n.default.timeline({}),this.animationIn.fromTo(this.element,{autoAlpha:0,y:"100%"},{autoAlpha:1,duration:1,y:"0",stagger:.2}),this.animationIn.call((e=>{this.addEventListeners()}))}))}hide(){return new Promise((e=>{this.animationOut=n.default.timeline(),this.animationOut.to(this.element,{autoAlpha:0,onComplete:e})}))}addEventListeners(){}}},"./app/components/Carousel.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./node_modules/lodash/each.js");class n{constructor({buttons:e}){this.buttons=e,this.createCarousel()}createCarousel(){s(this.buttons,(e=>{e.addEventListener("click",(()=>{const t="next"===e.dataset.carouselButton?1:-1,r=e.closest("[data-carousel]").querySelector("[data-slides]"),s=r.querySelector("[data-active]");let n=[...r.children].indexOf(s)+t;n<0&&(n=r.children.length-1),n>=r.children.length&&(n=0),r.children[n].dataset.active=!0,delete s.dataset.active}))}))}}},"./app/components/Navigation.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r("./app/classes/Component.js"),n=r("./node_modules/gsap/index.js");class i extends s.default{constructor({template:e}){super({element:".navigation",elements:{items:".navigation__list__item"}}),this.onChange(e)}onChange(e){"home"===e&&(n.default.to(this.elements.items[0],{autoAlpha:0,duration:.75}),n.default.to(this.elements.items[1],{autoAlpha:1,duration:.75})),"collections"===e&&(n.default.to(this.elements.items[1],{autoAlpha:1,duration:.75}),n.default.to(this.elements.items[0],{autoAlpha:0,duration:.75}))}}},"./app/components/Preloader.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var s=r("./app/classes/Component.js"),n=r("./node_modules/lodash/each.js"),i=r("./node_modules/gsap/index.js"),o=r("./app/utils/text.js");class a extends s.default{constructor(){super({element:".preloader",elements:{wrapper:".preloader__wrapper",number:".preloader__number",text:".preloader__text",images:document.querySelectorAll("img")}}),(0,o.split)({element:this.elements.text,expression:"<br>"}),(0,o.split)({element:this.elements.text,expression:"<br>"}),this.elements.textSpans=this.elements.text.querySelectorAll("span span"),this.length=0,this.createLoader()}createLoader(){0===this.elements.images.length?(this.elements.number.innerHTML="100%",this.onLoaded()):n(this.elements.images,(e=>{e.src=e.getAttribute("data-src"),e.onload=()=>this.onAssetLoaded()}))}onAssetLoaded(){this.length+=1,this.percent=this.length/this.elements.images.length,this.elements.number.innerHTML=`${Math.round(100*this.percent)}%`,1===this.percent&&this.onLoaded()}onLoaded(){return new Promise((e=>{this.emit("completed"),this.animateOut=i.default.timeline({delay:2}),this.animateOut.to(this.elements.textSpans,{y:"100%",duration:1.5,ease:"expo.out",autoAlpha:0,stagger:.1}),this.animateOut.to(this.elements.number,{y:"100%",duration:1.5,ease:"expo.out",autoAlpha:0,stagger:.3},"-=1.0"),this.animateOut.to(this.element,{autoAlpha:0,duration:1.5}),this.animateOut.call((()=>{this.destroy()}))}))}destroy(){this.element.parentNode.removeChild(this.element)}}},"./app/components/canvas/Home/Media.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var s=r("./node_modules/ogl/src/core/Texture.js"),n=r("./node_modules/ogl/src/core/Program.js"),i=r("./node_modules/ogl/src/core/Mesh.js"),o=r("./app/shaders/plane-vertex.glsl"),a=r("./app/shaders/plane-fragment.glsl");class l{constructor({gl:e,geometry:t,sizes:r,scene:s,index:n,element:i}){this.gl=e,this.geometry=t,this.sizes=r,this.scene=s,this.index=n,this.element=i,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){this.texture=new s.Texture(this.gl,{generateMipmaps:!1});const e=new Image;e.crossOrigin="anonymous",e.src=this.element.getAttribute("data-src"),e.onload=()=>{this.texture.image=e}}createProgram(){this.program=new n.Program(this.gl,{vertex:o.default,fragment:a.default,uniforms:{tMap:{value:this.texture}}})}createMesh(){this.mesh=new i.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.position.x=1,this.mesh.setParent(this.scene)}createBound(e){this.sizes=e,this.mediaBounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}updateScale(){this.width=this.mediaBounds.width/window.innerWidth,this.height=this.mediaBounds.height/window.innerHeight,this.mesh.scale.x=this.width*this.sizes.width,this.mesh.scale.y=this.height*this.sizes.height}updateX(e=0){this.x=(this.mediaBounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(e=0){this.y=(this.mediaBounds.top+e)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}onResize(e){this.createBound(e)}update(e){this.mediaBounds&&(this.updateX(e&&e.x),this.updateY(e&&e.y))}}},"./app/components/canvas/Home/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var s=r("./node_modules/ogl/src/core/Transform.js"),n=r("./node_modules/ogl/src/extras/Plane.js"),i=r("./node_modules/lodash/map.js"),o=r("./node_modules/lodash/each.js"),a=r("./app/components/canvas/Home/Media.js"),l=r("./node_modules/gsap/index.js");const u=class{constructor({gl:e,sizes:t,scene:r}){this.gl=e,this.sizes=t,this.scene=r,this.group=new s.Transform,this.galleryElement=document.querySelector(".home__images"),this.mediasElement=document.querySelectorAll(".home__images__media__image"),this.group.setParent(this.scene),this.createGeometry(),this.createGallery(),this.onResize(this.sizes),this.x={current:0,target:0,direction:"",lerp:.1},this.y={current:0,target:0,lerp:.1,direction:""},this.scrollCurrent={x:0,y:0},this.scroll={x:0,y:0}}createGeometry(){this.geometry=new n.Plane(this.gl)}createGallery(){this.medias=i(this.mediasElement,((e,t)=>new a.default({gl:this.gl,sizes:this.sizes,index:t,scene:this.group,geometry:this.geometry,element:e})))}onMouseDown({x:e,y:t}){this.scrollCurrent.x=this.scroll.x,this.scrollCurrent.y=this.scroll.y}onMouseMove({x:e,y:t}){const r=e.start-e.end,s=t.start-t.end;this.x.target=this.scrollCurrent.x-r,this.y.target=this.scrollCurrent.y-s}onMouseUp(e){}onWheel(e){const{pixelX:t,pixelY:r}=e;this.x.target+=t,this.y.target+=r}update(){this.galleryBounds&&(this.x.current=l.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=l.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.y<this.y.current?this.y.direction="top":this.scroll.y>this.y.current&&(this.y.direction="bottom"),this.scroll.y=this.y.current,i(this.medias,(e=>{const t=e.mesh.scale.y/2,r=this.sizes.height;if("top"===this.y.direction){e.mesh.position.y-t<-r&&(e.extra.y+=this.gallerySizes.height)}else if("bottom"===this.y.direction){e.mesh.position.y-t>r&&(e.extra.y-=this.gallerySizes.height)}e.update(this.scroll)})),this.y.target+=1)}onResize(e){this.galleryBounds=this.galleryElement.getBoundingClientRect(),this.sizes=e,this.gallerySizes={height:this.galleryBounds.height/window.innerHeight+this.sizes.height+2,width:this.galleryBounds.width/window.innerWidth+this.sizes.width},o(this.medias,(t=>t.onResize(e)))}destroy(){console.log("lol"),this.scene.removeChild(this.group)}}},"./app/components/canvas/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var s=r("./node_modules/ogl/src/core/Renderer.js"),n=r("./node_modules/ogl/src/core/Camera.js"),i=r("./node_modules/ogl/src/core/Transform.js"),o=r("./app/components/canvas/Home/index.js");class a{constructor({template:e}){this.template=e,this.x={start:0,distance:0,end:0},this.y={start:0,distance:0,end:0},this.createRenderer(),this.createCamera(),this.createScene(),this.onResize()}createRenderer(){this.renderer=new s.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new n.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new i.Transform}createHome(){this.home=new o.default({gl:this.gl,sizes:this.sizes,scene:this.scene})}destroyHome(){this.home&&this.home.destroy()}onPreloaded(){this.onChange(this.template)}onChange(e){"home"===e?this.createHome():this.destroyHome(),this.template=e}update(){this.home&&this.home.update&&this.home.update(),this.renderer.render({scene:this.scene,camera:this.camera})}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:this.gl.canvas.width/this.gl.canvas.height});const e=this.camera.fov*(Math.PI/180),t=2*Math.tan(e/2)*this.camera.position.z,r=t*this.camera.aspect;this.sizes={width:r,height:t},this.home&&this.home.onResize(this.sizes)}onMouseDown(e){this.isDown=!0,this.x.start=e.touches?e.touches[0].clientX:e.clientX,this.y.start=e.touches?e.touches[0].clientY:e.clientY;const t={x:this.x,y:this.y};this.home&&this.home.onMouseDown(t)}onMouseMove(e){if(!this.isDown)return;const t=e.touches?e.touches[0].clientX:e.clientX,r=e.touches?e.touches[0].clientY:e.clientY;this.x.end=t,this.y.end=r;const s={x:this.x,y:this.y};this.home&&this.home.onMouseMove(s)}onMouseUp(e){this.isDown=!1;const t=e.touches?e.touches[0].clientX:e.clientX,r=e.touches?e.touches[0].clientY:e.clientY;this.x.end=t,this.y.end=r;const s={x:this.x,y:this.y};this.home&&this.home.onMouseUp(s)}onMouseWheel({pixelX:e,pixelY:t}){this.home&&this.home.onWheel({pixelX:e,pixelY:t})}}},"./app/index.js":(e,t,r)=>{"use strict";r.r(t);var s=r("./app/pages/Home.js"),n=r("./app/pages/collections.js"),i=r("./app/components/Preloader.js"),o=r("./app/components/Navigation.js"),a=r("./app/components/canvas/index.js"),l=r("./node_modules/normalize-wheel/index.js"),u=r("./node_modules/lodash/each.js");new class{constructor(){this.createContent(),this.createCanvas(),this.createPreloader(),this.createNavigation(),this.createPage(),this.addEventListeners(),this.addLinkListners(),this.update()}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createCanvas(){this.canvas=new a.default({template:this.template})}createPreloader(){this.preloader=new i.default,this.preloader.once("completed",this.onPreloaded.bind(this))}createNavigation(){this.navigation=new o.default({template:this.template})}onPreloaded(){this.onResize(),this.canvas.onPreloaded()}createPage(){this.pages={home:new s.default,collections:new n.default},this.page=this.pages[this.template],this.page.create(),this.page.show()}addEventListeners(){window.addEventListener("resize",this.onResize.bind(this)),window.addEventListener("mousewheel",this.onMouseWheel.bind(this)),window.addEventListener("mousedown",this.onMouseDown.bind(this)),window.addEventListener("mousemove",this.onMouseMove.bind(this)),window.addEventListener("mouseup",this.onMouseUp.bind(this)),window.addEventListener("touchdown",this.onMouseDown.bind(this)),window.addEventListener("touchmove",this.onMouseMove.bind(this)),window.addEventListener("touchup",this.onMouseUp.bind(this))}onResize(e){this.canvas&&this.canvas.onResize&&this.canvas.onResize()}onMouseWheel(e){const t=l(e),{pixelX:r,pixelY:s}=t;this.canvas&&this.canvas.onMouseWheel&&this.canvas.onMouseWheel({pixelX:r,pixelY:s})}onMouseDown(e){this.canvas&&this.canvas.onMouseDown&&this.canvas.onMouseDown(e)}onMouseMove(e){this.canvas&&this.canvas.onMouseWheel&&this.canvas.onMouseMove(e)}onMouseUp(e){this.canvas&&this.canvas.onMouseUp&&this.canvas.onMouseUp(e)}addLinkListners(){const e=document.querySelectorAll("a");u(e,(e=>{e.onclick=t=>{const{href:r}=e;t.preventDefault(),this.onChange(r)}}))}async onChange(e){try{this.page.hide();const t=await window.fetch(e);if(window.history.pushState({},"",e),200===t.status){const e=await t.text(),r=document.createElement("div");r.innerHTML=e;const s=r.querySelector(".content");this.template=s.getAttribute("data-template"),this.content.setAttribute("data-template",this.template),this.content.innerHTML=s.innerHTML,this.canvas.onChange(this.template),this.navigation.onChange(this.template),this.page=this.pages[this.template],this.page.create(),this.page.show(),this.addLinkListners()}}catch(e){console.log(e)}}update(){this.canvas&&this.canvas.update&&this.canvas.update(),this.frame=window.requestAnimationFrame((()=>this.update()))}}},"./app/pages/Home.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});var s=r("./app/classes/Page.js");class n extends s.default{constructor(){super({element:".home",elements:{wrapper:".home__wrapper",link:".home__link"},id:"home"})}create(){super.create()}}},"./app/pages/collections.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r("./app/classes/Page.js"),n=r("./app/components/Carousel.js");class i extends s.default{constructor(){super({element:".collections",elements:{carousel:".products__carousel",carouselBtn:".products__carousel__btn"},id:"collections"}),this.length=0}create(){super.create(),this.createCarousel()}createCarousel(){new n.default({buttons:this.elements.carouselBtn})}}},"./app/utils/text.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{calculate:()=>i,split:()=>n});var s=r("./node_modules/lodash/each.js");function n({element:e,expression:t=" ",append:r=!0}){const n=function(e,t){const r=e.split("<br>");let n=[];return s(r,((e,r)=>{r>0&&n.push("<br>"),n=n.concat(e.split(t));let i=!1,o="";const a=[];s(n,(e=>{i||!e.includes("<a")&&!e.includes("<strong")||(o="",i=!0),i&&(o+=` ${e}`),i&&(e.includes("/a>")||e.includes("/strong>"))&&(a.push(o),o=""),i||""!==o||a.push(e),i&&(e.includes("/a>")||e.includes("/strong>"))&&(i=!1)})),n=a})),n}(e.innerHTML.toString().trim(),t);let i="";s(n,(e=>{if(e.indexOf("<br>")>-1){const t=e.split("<br>");s(t,((e,t)=>{i+=t>0?"<br>"+o(e):o(e)}))}else i+=o(e)})),e.innerHTML=i;const a=e.querySelectorAll("span");return r&&s(a,(e=>{const t=1===e.textContent.length,r=""!==e.innerHTML.trim(),s="&"!==e.textContent,n="-"!==e.textContent;t&&r&&s&&n&&(e.innerHTML=`${e.textContent}&nbsp;`)})),a}function i(e){const t=[];let r=[],n=e[0].offsetTop;return s(e,((s,i)=>{s.offsetTop===n&&r.push(s),s.offsetTop!==n&&(t.push(r),r=[],r.push(s),n=s.offsetTop),i+1===e.length&&t.push(r)})),t}function o(e){return""===(e=e.trim())||" "===e?e:"<br>"===e?"<br>":`<span>${e}</span>`+(e.length>1?" ":"")}}},l={};function u(e){var t=l[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var r=l[e]={id:e,loaded:!1,exports:{}};try{var s={id:e,module:r,factory:a[e],require:u};u.i.forEach((function(e){e(s)})),r=s.module,s.factory.call(r.exports,r,r.exports,s.require)}catch(e){throw r.error=e,e}return r.loaded=!0,r.exports}u.m=a,u.c=l,u.i=[],u.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return u.d(t,{a:t}),t},u.d=(e,t)=>{for(var r in t)u.o(t,r)&&!u.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},u.hu=e=>e+"."+u.h()+".hot-update.js",u.miniCssF=e=>{},u.hmrF=()=>"main."+u.h()+".hot-update.json",u.h=()=>"c9fca5161884def7d731",u.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),u.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="ecommerce:",u.l=(r,s,n,i)=>{if(e[r])e[r].push(s);else{var o,a;if(void 0!==n)for(var l=document.getElementsByTagName("script"),c=0;c<l.length;c++){var d=l[c];if(d.getAttribute("src")==r||d.getAttribute("data-webpack")==t+n){o=d;break}}o||(a=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,u.nc&&o.setAttribute("nonce",u.nc),o.setAttribute("data-webpack",t+n),o.src=r),e[r]=[s];var h=(t,s)=>{o.onerror=o.onload=null,clearTimeout(p);var n=e[r];if(delete e[r],o.parentNode&&o.parentNode.removeChild(o),n&&n.forEach((e=>e(s))),t)return t(s)},p=setTimeout(h.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=h.bind(null,o.onerror),o.onload=h.bind(null,o.onload),a&&document.head.appendChild(o)}},u.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},u.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e,t,r,s={},n=u.c,i=[],o=[],a="idle",l=0,c=[];function d(e){a=e;for(var t=[],r=0;r<o.length;r++)t[r]=o[r].call(null,e);return Promise.all(t)}function h(){0==--l&&d("ready").then((function(){if(0===l){var e=c;c=[];for(var t=0;t<e.length;t++)e[t]()}}))}function p(e){if("idle"!==a)throw new Error("check() is only allowed in idle status");return d("check").then(u.hmrM).then((function(r){return r?d("prepare").then((function(){var s=[];return t=[],Promise.all(Object.keys(u.hmrC).reduce((function(e,n){return u.hmrC[n](r.c,r.r,r.m,e,t,s),e}),[])).then((function(){return t=function(){return e?m(e):d("ready").then((function(){return s}))},0===l?t():new Promise((function(e){c.push((function(){e(t())}))}));var t}))})):d(g()?"ready":"idle").then((function(){return null}))}))}function f(e){return"ready"!==a?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+a+")")})):m(e)}function m(e){e=e||{},g();var s=t.map((function(t){return t(e)}));t=void 0;var n=s.map((function(e){return e.error})).filter(Boolean);if(n.length>0)return d("abort").then((function(){throw n[0]}));var i=d("dispose");s.forEach((function(e){e.dispose&&e.dispose()}));var o,a=d("apply"),l=function(e){o||(o=e)},u=[];return s.forEach((function(e){if(e.apply){var t=e.apply(l);if(t)for(var r=0;r<t.length;r++)u.push(t[r])}})),Promise.all([i,a]).then((function(){return o?d("fail").then((function(){throw o})):r?m(e).then((function(e){return u.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):d("idle").then((function(){return u}))}))}function g(){if(r)return t||(t=[]),Object.keys(u.hmrI).forEach((function(e){r.forEach((function(r){u.hmrI[e](r,t)}))})),r=void 0,!0}u.hmrD=s,u.i.push((function(c){var m,g,_,v,y=c.module,b=function(t,r){var s=n[r];if(!s)return t;var o=function(o){if(s.hot.active){if(n[o]){var a=n[o].parents;-1===a.indexOf(r)&&a.push(r)}else i=[r],e=o;-1===s.children.indexOf(o)&&s.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+r),i=[];return t(o)},u=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(r){t[e]=r}}};for(var c in t)Object.prototype.hasOwnProperty.call(t,c)&&"e"!==c&&Object.defineProperty(o,c,u(c));return o.e=function(e){return function(e){switch(a){case"ready":d("prepare");case"prepare":return l++,e.then(h,h),e;default:return e}}(t.e(e))},o}(c.require,c.id);y.hot=(m=c.id,g=y,v={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:_=e!==m,_requireSelf:function(){i=g.parents.slice(),e=_?void 0:m,u(m)},active:!0,accept:function(e,t,r){if(void 0===e)v._selfAccepted=!0;else if("function"==typeof e)v._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var s=0;s<e.length;s++)v._acceptedDependencies[e[s]]=t||function(){},v._acceptedErrorHandlers[e[s]]=r;else v._acceptedDependencies[e]=t||function(){},v._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)v._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)v._declinedDependencies[e[t]]=!0;else v._declinedDependencies[e]=!0},dispose:function(e){v._disposeHandlers.push(e)},addDisposeHandler:function(e){v._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=v._disposeHandlers.indexOf(e);t>=0&&v._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,a){case"idle":t=[],Object.keys(u.hmrI).forEach((function(e){u.hmrI[e](m,t)})),d("ready");break;case"ready":Object.keys(u.hmrI).forEach((function(e){u.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(m)}},check:p,apply:f,status:function(e){if(!e)return a;o.push(e)},addStatusHandler:function(e){o.push(e)},removeStatusHandler:function(e){var t=o.indexOf(e);t>=0&&o.splice(t,1)},data:s[m]},e=void 0,v),y.parents=i,y.children=[],i=[],c.require=b})),u.hmrC={},u.hmrI={}})(),(()=>{var e;u.g.importScripts&&(e=u.g.location+"");var t=u.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),u.p=e})(),r=(e,t,r,s)=>{var n=document.createElement("link");return n.rel="stylesheet",n.type="text/css",n.onerror=n.onload=i=>{if(n.onerror=n.onload=null,"load"===i.type)r();else{var o=i&&("load"===i.type?"missing":i.type),a=i&&i.target&&i.target.href||t,l=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");l.code="CSS_CHUNK_LOAD_FAILED",l.type=o,l.request=a,n.parentNode.removeChild(n),s(l)}},n.href=t,document.head.appendChild(n),n},s=(e,t)=>{for(var r=document.getElementsByTagName("link"),s=0;s<r.length;s++){var n=(o=r[s]).getAttribute("data-href")||o.getAttribute("href");if("stylesheet"===o.rel&&(n===e||n===t))return o}var i=document.getElementsByTagName("style");for(s=0;s<i.length;s++){var o;if((n=(o=i[s]).getAttribute("data-href"))===e||n===t)return o}},n=[],i=[],o=e=>({dispose:()=>{for(var e=0;e<n.length;e++){var t=n[e];t.parentNode&&t.parentNode.removeChild(t)}n.length=0},apply:()=>{for(var e=0;e<i.length;e++)i[e].rel="stylesheet";i.length=0}}),u.hmrC.miniCss=(e,t,a,l,c,d)=>{c.push(o),e.forEach((e=>{var t=u.miniCssF(e),o=u.p+t,a=s(t,o);a&&l.push(new Promise(((t,s)=>{var l=r(e,o,(()=>{l.as="style",l.rel="preload",t()}),s);n.push(a),i.push(l)})))}))},(()=>{var e,t,r,s,n,i=u.hmrS_jsonp=u.hmrS_jsonp||{main:0},o={};function a(t,r){return e=r,new Promise(((e,r)=>{o[t]=e;var s=u.p+u.hu(t),n=new Error;u.l(s,(e=>{if(o[t]){o[t]=void 0;var s=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;n.message="Loading hot update chunk "+t+" failed.\n("+s+": "+i+")",n.name="ChunkLoadError",n.type=s,n.request=i,r(n)}}))}))}function l(e){function o(e){for(var t=[e],r={},s=t.map((function(e){return{chain:[e],id:e}}));s.length>0;){var n=s.pop(),i=n.id,o=n.chain,l=u.c[i];if(l&&(!l.hot._selfAccepted||l.hot._selfInvalidated)){if(l.hot._selfDeclined)return{type:"self-declined",chain:o,moduleId:i};if(l.hot._main)return{type:"unaccepted",chain:o,moduleId:i};for(var c=0;c<l.parents.length;c++){var d=l.parents[c],h=u.c[d];if(h){if(h.hot._declinedDependencies[i])return{type:"declined",chain:o.concat([d]),moduleId:i,parentId:d};-1===t.indexOf(d)&&(h.hot._acceptedDependencies[i]?(r[d]||(r[d]=[]),a(r[d],[i])):(delete r[d],t.push(d),s.push({chain:o.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function a(e,t){for(var r=0;r<t.length;r++){var s=t[r];-1===e.indexOf(s)&&e.push(s)}}u.f&&delete u.f.jsonpHmr,t=void 0;var l={},c=[],d={},h=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in r)if(u.o(r,p)){var f,m=r[p],g=!1,_=!1,v=!1,y="";switch((f=m?o(p):{type:"disposed",moduleId:p}).chain&&(y="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(g=new Error("Aborted because of self decline: "+f.moduleId+y));break;case"declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(g=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+y));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(f),e.ignoreUnaccepted||(g=new Error("Aborted because "+p+" is not accepted"+y));break;case"accepted":e.onAccepted&&e.onAccepted(f),_=!0;break;case"disposed":e.onDisposed&&e.onDisposed(f),v=!0;break;default:throw new Error("Unexception type "+f.type)}if(g)return{error:g};if(_)for(p in d[p]=m,a(c,f.outdatedModules),f.outdatedDependencies)u.o(f.outdatedDependencies,p)&&(l[p]||(l[p]=[]),a(l[p],f.outdatedDependencies[p]));v&&(a(c,[f.moduleId]),d[p]=h)}r=void 0;for(var b,w=[],x=0;x<c.length;x++){var j=c[x],E=u.c[j];E&&(E.hot._selfAccepted||E.hot._main)&&d[j]!==h&&!E.hot._selfInvalidated&&w.push({module:j,require:E.hot._requireSelf,errorHandler:E.hot._selfAccepted})}return{dispose:function(){var e;s.forEach((function(e){delete i[e]})),s=void 0;for(var t,r=c.slice();r.length>0;){var n=r.pop(),o=u.c[n];if(o){var a={},d=o.hot._disposeHandlers;for(x=0;x<d.length;x++)d[x].call(null,a);for(u.hmrD[n]=a,o.hot.active=!1,delete u.c[n],delete l[n],x=0;x<o.children.length;x++){var h=u.c[o.children[x]];h&&((e=h.parents.indexOf(n))>=0&&h.parents.splice(e,1))}}}for(var p in l)if(u.o(l,p)&&(o=u.c[p]))for(b=l[p],x=0;x<b.length;x++)t=b[x],(e=o.children.indexOf(t))>=0&&o.children.splice(e,1)},apply:function(t){for(var r in d)u.o(d,r)&&(u.m[r]=d[r]);for(var s=0;s<n.length;s++)n[s](u);for(var i in l)if(u.o(l,i)){var o=u.c[i];if(o){b=l[i];for(var a=[],h=[],p=[],f=0;f<b.length;f++){var m=b[f],g=o.hot._acceptedDependencies[m],_=o.hot._acceptedErrorHandlers[m];if(g){if(-1!==a.indexOf(g))continue;a.push(g),h.push(_),p.push(m)}}for(var v=0;v<a.length;v++)try{a[v].call(null,b)}catch(r){if("function"==typeof h[v])try{h[v](r,{moduleId:i,dependencyId:p[v]})}catch(s){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:p[v],error:s,originalError:r}),e.ignoreErrored||(t(s),t(r))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:i,dependencyId:p[v],error:r}),e.ignoreErrored||t(r)}}}for(var y=0;y<w.length;y++){var x=w[y],j=x.module;try{x.require(j)}catch(r){if("function"==typeof x.errorHandler)try{x.errorHandler(r,{moduleId:j,module:u.c[j]})}catch(s){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:j,error:s,originalError:r}),e.ignoreErrored||(t(s),t(r))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:j,error:r}),e.ignoreErrored||t(r)}}return c}}}self.webpackHotUpdateecommerce=(t,s,i)=>{for(var a in s)u.o(s,a)&&(r[a]=s[a],e&&e.push(a));i&&n.push(i),o[t]&&(o[t](),o[t]=void 0)},u.hmrI.jsonp=function(e,t){r||(r={},n=[],s=[],t.push(l)),u.o(r,e)||(r[e]=u.m[e])},u.hmrC.jsonp=function(e,o,c,d,h,p){h.push(l),t={},s=o,r=c.reduce((function(e,t){return e[t]=!1,e}),{}),n=[],e.forEach((function(e){u.o(i,e)&&void 0!==i[e]?(d.push(a(e,p)),t[e]=!0):t[e]=!1})),u.f&&(u.f.jsonpHmr=function(e,r){t&&u.o(t,e)&&!t[e]&&(r.push(a(e)),t[e]=!0)})},u.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(u.p+u.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),u("./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&reconnect=10"),u("./node_modules/webpack/hot/dev-server.js"),u("./app/index.js");u("./styles/index.scss")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,